{"ast":null,"code":"import _slicedToArray from \"/Users/armenmerikyan/Desktop/wd/tfnlab.com/metagascarnext/stage-presets-gltfjsx/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as e from \"react\";\nexport function useSize(r) {\n  var _e$useState = e.useState(void 0),\n    _e$useState2 = _slicedToArray(_e$useState, 2),\n    i = _e$useState2[0],\n    t = _e$useState2[1];\n  return e.useEffect(function () {\n    if (r) {\n      var _e = new ResizeObserver(function (e) {\n        if (!Array.isArray(e)) return;\n        if (!e.length) return;\n        var i = e[0];\n        var o, n;\n        if (\"borderBoxSize\" in i) {\n          var _e2 = i.borderBoxSize,\n            _r = Array.isArray(_e2) ? _e2[0] : _e2;\n          o = _r.inlineSize, n = _r.blockSize;\n        } else {\n          var _e3 = r.getBoundingClientRect();\n          o = _e3.width, n = _e3.height;\n        }\n        t({\n          width: o,\n          height: n\n        });\n      });\n      return _e.observe(r, {\n        box: \"border-box\"\n      }), function () {\n        t(void 0), _e.unobserve(r);\n      };\n    }\n  }, [r]), i;\n}","map":{"version":3,"mappings":";;OAIA,SAASA,QAAQC;EACf,kBAAwBC,EAAMC,cAAwDC;IAAAA;IAA/EC;IAAMC;EA8Cb,OA5CAJ,EAAMK,UAAU;IACd,IAAIN,GAAS;MACX,IAAMO,KAAiB,IAAIC,eAAgBC;QACzC,KAAKC,MAAMC,QAAQF,IACjB;QAKF,KAAKA,EAAQG,QACX;QAGF,IAAMC,IAAQJ,EAAQ;QACtB,IAAIK,GACAC;QAEJ,IAAI,mBAAmBF,GAAO;UAC5B,IAAMG,MAAkBH,EAAKI;YAEvBC,KAAaR,MAAMC,QAAQK,OAAmBA,IAAgB,KAAKA;UACzEF,IAAQI,GAAUC,YAClBJ,IAASG,GAAUE;QAAA,OACd;UAGL,IAAMC,MAAOrB,EAAQsB;UACrBR,IAAQO,IAAKP,OACbC,IAASM,IAAKN;QAAAA;QAGhBV,EAAQ;UAAES;UAAOC;QAAAA;MAAAA;MAKnB,OAFAR,GAAegB,QAAQvB,GAAS;QAAEwB,KAAK;MAAA,IAEhC;QACLnB,OAAQF,IACRI,GAAekB,UAAUzB;MAAAA;IAAAA;EAAAA,GAI5B,CAACA,KAEGI;AAAAA","names":["useSize","element","React","useState","undefined","size","setSize","useEffect","resizeObserver","ResizeObserver","entries","Array","isArray","length","entry","width","height","borderSizeEntry","borderBoxSize","borderSize","inlineSize","blockSize","rect","getBoundingClientRect","observe","box","unobserve"],"sources":["/Users/armenmerikyan/Desktop/wd/tfnlab.com/metagascarnext/stage-presets-gltfjsx/node_modules/leva/node_modules/@radix-ui/react-tooltip/node_modules/@radix-ui/react-popper/node_modules/@radix-ui/react-use-size/dist/packages/react/use-size/src/useSize.tsx"],"sourcesContent":["/// <reference types=\"resize-observer-browser\" />\n\nimport * as React from 'react';\n\nfunction useSize(element: HTMLElement | SVGElement | null) {\n  const [size, setSize] = React.useState<{ width: number; height: number } | undefined>(undefined);\n\n  React.useEffect(() => {\n    if (element) {\n      const resizeObserver = new ResizeObserver((entries) => {\n        if (!Array.isArray(entries)) {\n          return;\n        }\n\n        // Since we only observe the one element, we don't need to loop over the\n        // array\n        if (!entries.length) {\n          return;\n        }\n\n        const entry = entries[0];\n        let width: number;\n        let height: number;\n\n        if ('borderBoxSize' in entry) {\n          const borderSizeEntry = entry['borderBoxSize'];\n          // iron out differences between browsers\n          const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;\n          width = borderSize['inlineSize'];\n          height = borderSize['blockSize'];\n        } else {\n          // for browsers that don't support `borderBoxSize`\n          // we calculate a rect ourselves to get the correct border box.\n          const rect = element.getBoundingClientRect();\n          width = rect.width;\n          height = rect.height;\n        }\n\n        setSize({ width, height });\n      });\n\n      resizeObserver.observe(element, { box: 'border-box' });\n\n      return () => {\n        setSize(undefined);\n        resizeObserver.unobserve(element);\n      };\n    }\n    return;\n  }, [element]);\n\n  return size;\n}\n\nexport { useSize };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}