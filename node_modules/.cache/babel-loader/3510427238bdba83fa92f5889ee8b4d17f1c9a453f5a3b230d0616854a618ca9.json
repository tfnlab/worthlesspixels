{"ast":null,"code":"import _classCallCheck from \"/Users/armenmerikyan/Desktop/wd/tfnlab.com/metagascarnext/stage-presets-gltfjsx/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/armenmerikyan/Desktop/wd/tfnlab.com/metagascarnext/stage-presets-gltfjsx/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/armenmerikyan/Desktop/wd/tfnlab.com/metagascarnext/stage-presets-gltfjsx/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/armenmerikyan/Desktop/wd/tfnlab.com/metagascarnext/stage-presets-gltfjsx/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Triangle, Vector3, Line3, Sphere, Plane } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { closestPointsSegmentToSegment, sphereIntersectTriangle } from './MathUtilities.js';\nvar DIST_EPSILON = 1e-15;\nfunction isNearZero(value) {\n  return Math.abs(value) < DIST_EPSILON;\n}\nexport var ExtendedTriangle = /*#__PURE__*/function (_Triangle) {\n  _inherits(ExtendedTriangle, _Triangle);\n  var _super = _createSuper(ExtendedTriangle);\n  function ExtendedTriangle() {\n    var _this;\n    _classCallCheck(this, ExtendedTriangle);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.isExtendedTriangle = true;\n    _this.satAxes = new Array(4).fill().map(function () {\n      return new Vector3();\n    });\n    _this.satBounds = new Array(4).fill().map(function () {\n      return new SeparatingAxisBounds();\n    });\n    _this.points = [_this.a, _this.b, _this.c];\n    _this.sphere = new Sphere();\n    _this.plane = new Plane();\n    _this.needsUpdate = true;\n    return _this;\n  }\n  _createClass(ExtendedTriangle, [{\n    key: \"intersectsSphere\",\n    value: function intersectsSphere(sphere) {\n      return sphereIntersectTriangle(sphere, this);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var a = this.a;\n      var b = this.b;\n      var c = this.c;\n      var points = this.points;\n      var satAxes = this.satAxes;\n      var satBounds = this.satBounds;\n      var axis0 = satAxes[0];\n      var sab0 = satBounds[0];\n      this.getNormal(axis0);\n      sab0.setFromPoints(axis0, points);\n      var axis1 = satAxes[1];\n      var sab1 = satBounds[1];\n      axis1.subVectors(a, b);\n      sab1.setFromPoints(axis1, points);\n      var axis2 = satAxes[2];\n      var sab2 = satBounds[2];\n      axis2.subVectors(b, c);\n      sab2.setFromPoints(axis2, points);\n      var axis3 = satAxes[3];\n      var sab3 = satBounds[3];\n      axis3.subVectors(c, a);\n      sab3.setFromPoints(axis3, points);\n      this.sphere.setFromPoints(this.points);\n      this.plane.setFromNormalAndCoplanarPoint(axis0, a);\n      this.needsUpdate = false;\n    }\n  }]);\n  return ExtendedTriangle;\n}(Triangle);\nExtendedTriangle.prototype.closestPointToSegment = function () {\n  var point1 = new Vector3();\n  var point2 = new Vector3();\n  var edge = new Line3();\n  return function distanceToSegment(segment) {\n    var target1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var target2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var start = segment.start,\n      end = segment.end;\n    var points = this.points;\n    var distSq;\n    var closestDistanceSq = Infinity;\n\n    // check the triangle edges\n    for (var i = 0; i < 3; i++) {\n      var nexti = (i + 1) % 3;\n      edge.start.copy(points[i]);\n      edge.end.copy(points[nexti]);\n      closestPointsSegmentToSegment(edge, segment, point1, point2);\n      distSq = point1.distanceToSquared(point2);\n      if (distSq < closestDistanceSq) {\n        closestDistanceSq = distSq;\n        if (target1) target1.copy(point1);\n        if (target2) target2.copy(point2);\n      }\n    }\n\n    // check end points\n    this.closestPointToPoint(start, point1);\n    distSq = start.distanceToSquared(point1);\n    if (distSq < closestDistanceSq) {\n      closestDistanceSq = distSq;\n      if (target1) target1.copy(point1);\n      if (target2) target2.copy(start);\n    }\n    this.closestPointToPoint(end, point1);\n    distSq = end.distanceToSquared(point1);\n    if (distSq < closestDistanceSq) {\n      closestDistanceSq = distSq;\n      if (target1) target1.copy(point1);\n      if (target2) target2.copy(end);\n    }\n    return Math.sqrt(closestDistanceSq);\n  };\n}();\nExtendedTriangle.prototype.intersectsTriangle = function () {\n  var saTri2 = new ExtendedTriangle();\n  var arr1 = new Array(3);\n  var arr2 = new Array(3);\n  var cachedSatBounds = new SeparatingAxisBounds();\n  var cachedSatBounds2 = new SeparatingAxisBounds();\n  var cachedAxis = new Vector3();\n  var dir1 = new Vector3();\n  var dir2 = new Vector3();\n  var tempDir = new Vector3();\n  var edge = new Line3();\n  var edge1 = new Line3();\n  var edge2 = new Line3();\n\n  // TODO: If the triangles are coplanar and intersecting the target is nonsensical. It should at least\n  // be a line contained by both triangles if not a different special case somehow represented in the return result.\n  return function intersectsTriangle(other) {\n    var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var suppressLog = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (this.needsUpdate) {\n      this.update();\n    }\n    if (!other.isExtendedTriangle) {\n      saTri2.copy(other);\n      saTri2.update();\n      other = saTri2;\n    } else if (other.needsUpdate) {\n      other.update();\n    }\n    var plane1 = this.plane;\n    var plane2 = other.plane;\n    if (Math.abs(plane1.normal.dot(plane2.normal)) > 1.0 - 1e-10) {\n      // perform separating axis intersection test only for coplanar triangles\n      var satBounds1 = this.satBounds;\n      var satAxes1 = this.satAxes;\n      arr2[0] = other.a;\n      arr2[1] = other.b;\n      arr2[2] = other.c;\n      for (var i = 0; i < 4; i++) {\n        var sb = satBounds1[i];\n        var sa = satAxes1[i];\n        cachedSatBounds.setFromPoints(sa, arr2);\n        if (sb.isSeparated(cachedSatBounds)) return false;\n      }\n      var satBounds2 = other.satBounds;\n      var satAxes2 = other.satAxes;\n      arr1[0] = this.a;\n      arr1[1] = this.b;\n      arr1[2] = this.c;\n      for (var _i = 0; _i < 4; _i++) {\n        var _sb = satBounds2[_i];\n        var _sa = satAxes2[_i];\n        cachedSatBounds.setFromPoints(_sa, arr1);\n        if (_sb.isSeparated(cachedSatBounds)) return false;\n      }\n\n      // check crossed axes\n      for (var _i2 = 0; _i2 < 4; _i2++) {\n        var sa1 = satAxes1[_i2];\n        for (var i2 = 0; i2 < 4; i2++) {\n          var sa2 = satAxes2[i2];\n          cachedAxis.crossVectors(sa1, sa2);\n          cachedSatBounds.setFromPoints(cachedAxis, arr1);\n          cachedSatBounds2.setFromPoints(cachedAxis, arr2);\n          if (cachedSatBounds.isSeparated(cachedSatBounds2)) return false;\n        }\n      }\n      if (target) {\n        // TODO find two points that intersect on the edges and make that the result\n        if (!suppressLog) {\n          console.warn('ExtendedTriangle.intersectsTriangle: Triangles are coplanar which does not support an output edge. Setting edge to 0, 0, 0.');\n        }\n        target.start.set(0, 0, 0);\n        target.end.set(0, 0, 0);\n      }\n      return true;\n    } else {\n      // find the edge that intersects the other triangle plane\n      var points1 = this.points;\n      var found1 = false;\n      var count1 = 0;\n      for (var _i3 = 0; _i3 < 3; _i3++) {\n        var p = points1[_i3];\n        var pNext = points1[(_i3 + 1) % 3];\n        edge.start.copy(p);\n        edge.end.copy(pNext);\n        edge.delta(dir1);\n        var targetPoint = found1 ? edge1.start : edge1.end;\n        var startIntersects = isNearZero(plane2.distanceToPoint(p));\n        if (isNearZero(plane2.normal.dot(dir1)) && startIntersects) {\n          // if the edge lies on the plane then take the line\n          edge1.copy(edge);\n          count1 = 2;\n          break;\n        }\n\n        // check if the start point is near the plane because \"intersectLine\" is not robust to that case\n        var doesIntersect = plane2.intersectLine(edge, targetPoint) || startIntersects;\n        if (doesIntersect && !isNearZero(targetPoint.distanceTo(pNext))) {\n          count1++;\n          if (found1) {\n            break;\n          }\n          found1 = true;\n        }\n      }\n      if (count1 === 1 && other.containsPoint(edge1.end)) {\n        if (target) {\n          target.start.copy(edge1.end);\n          target.end.copy(edge1.end);\n        }\n        return true;\n      } else if (count1 !== 2) {\n        return false;\n      }\n\n      // find the other triangles edge that intersects this plane\n      var points2 = other.points;\n      var found2 = false;\n      var count2 = 0;\n      for (var _i4 = 0; _i4 < 3; _i4++) {\n        var _p = points2[_i4];\n        var _pNext = points2[(_i4 + 1) % 3];\n        edge.start.copy(_p);\n        edge.end.copy(_pNext);\n        edge.delta(dir2);\n        var _targetPoint = found2 ? edge2.start : edge2.end;\n        var _startIntersects = isNearZero(plane1.distanceToPoint(_p));\n        if (isNearZero(plane1.normal.dot(dir2)) && _startIntersects) {\n          // if the edge lies on the plane then take the line\n          edge2.copy(edge);\n          count2 = 2;\n          break;\n        }\n\n        // check if the start point is near the plane because \"intersectLine\" is not robust to that case\n        var _doesIntersect = plane1.intersectLine(edge, _targetPoint) || _startIntersects;\n        if (_doesIntersect && !isNearZero(_targetPoint.distanceTo(_pNext))) {\n          count2++;\n          if (found2) {\n            break;\n          }\n          found2 = true;\n        }\n      }\n      if (count2 === 1 && this.containsPoint(edge2.end)) {\n        if (target) {\n          target.start.copy(edge2.end);\n          target.end.copy(edge2.end);\n        }\n        return true;\n      } else if (count2 !== 2) {\n        return false;\n      }\n\n      // find swap the second edge so both lines are running the same direction\n      edge1.delta(dir1);\n      edge2.delta(dir2);\n      if (dir1.dot(dir2) < 0) {\n        var tmp = edge2.start;\n        edge2.start = edge2.end;\n        edge2.end = tmp;\n      }\n\n      // check if the edges are overlapping\n      var s1 = edge1.start.dot(dir1);\n      var e1 = edge1.end.dot(dir1);\n      var s2 = edge2.start.dot(dir1);\n      var e2 = edge2.end.dot(dir1);\n      var separated1 = e1 < s2;\n      var separated2 = s1 < e2;\n      if (s1 !== e2 && s2 !== e1 && separated1 === separated2) {\n        return false;\n      }\n\n      // assign the target output\n      if (target) {\n        tempDir.subVectors(edge1.start, edge2.start);\n        if (tempDir.dot(dir1) > 0) {\n          target.start.copy(edge1.start);\n        } else {\n          target.start.copy(edge2.start);\n        }\n        tempDir.subVectors(edge1.end, edge2.end);\n        if (tempDir.dot(dir1) < 0) {\n          target.end.copy(edge1.end);\n        } else {\n          target.end.copy(edge2.end);\n        }\n      }\n      return true;\n    }\n  };\n}();\nExtendedTriangle.prototype.distanceToPoint = function () {\n  var target = new Vector3();\n  return function distanceToPoint(point) {\n    this.closestPointToPoint(point, target);\n    return point.distanceTo(target);\n  };\n}();\nExtendedTriangle.prototype.distanceToTriangle = function () {\n  var point = new Vector3();\n  var point2 = new Vector3();\n  var cornerFields = ['a', 'b', 'c'];\n  var line1 = new Line3();\n  var line2 = new Line3();\n  return function distanceToTriangle(other) {\n    var target1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var target2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var lineTarget = target1 || target2 ? line1 : null;\n    if (this.intersectsTriangle(other, lineTarget)) {\n      if (target1 || target2) {\n        if (target1) lineTarget.getCenter(target1);\n        if (target2) lineTarget.getCenter(target2);\n      }\n      return 0;\n    }\n    var closestDistanceSq = Infinity;\n\n    // check all point distances\n    for (var i = 0; i < 3; i++) {\n      var dist = void 0;\n      var field = cornerFields[i];\n      var otherVec = other[field];\n      this.closestPointToPoint(otherVec, point);\n      dist = otherVec.distanceToSquared(point);\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(point);\n        if (target2) target2.copy(otherVec);\n      }\n      var thisVec = this[field];\n      other.closestPointToPoint(thisVec, point);\n      dist = thisVec.distanceToSquared(point);\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(thisVec);\n        if (target2) target2.copy(point);\n      }\n    }\n    for (var _i5 = 0; _i5 < 3; _i5++) {\n      var f11 = cornerFields[_i5];\n      var f12 = cornerFields[(_i5 + 1) % 3];\n      line1.set(this[f11], this[f12]);\n      for (var i2 = 0; i2 < 3; i2++) {\n        var f21 = cornerFields[i2];\n        var f22 = cornerFields[(i2 + 1) % 3];\n        line2.set(other[f21], other[f22]);\n        closestPointsSegmentToSegment(line1, line2, point, point2);\n        var _dist = point.distanceToSquared(point2);\n        if (_dist < closestDistanceSq) {\n          closestDistanceSq = _dist;\n          if (target1) target1.copy(point);\n          if (target2) target2.copy(point2);\n        }\n      }\n    }\n    return Math.sqrt(closestDistanceSq);\n  };\n}();","map":{"version":3,"names":["Triangle","Vector3","Line3","Sphere","Plane","SeparatingAxisBounds","closestPointsSegmentToSegment","sphereIntersectTriangle","DIST_EPSILON","isNearZero","value","Math","abs","ExtendedTriangle","args","isExtendedTriangle","satAxes","Array","fill","map","satBounds","points","a","b","c","sphere","plane","needsUpdate","axis0","sab0","getNormal","setFromPoints","axis1","sab1","subVectors","axis2","sab2","axis3","sab3","setFromNormalAndCoplanarPoint","prototype","closestPointToSegment","point1","point2","edge","distanceToSegment","segment","target1","target2","start","end","distSq","closestDistanceSq","Infinity","i","nexti","copy","distanceToSquared","closestPointToPoint","sqrt","intersectsTriangle","saTri2","arr1","arr2","cachedSatBounds","cachedSatBounds2","cachedAxis","dir1","dir2","tempDir","edge1","edge2","other","target","suppressLog","update","plane1","plane2","normal","dot","satBounds1","satAxes1","sb","sa","isSeparated","satBounds2","satAxes2","sa1","i2","sa2","crossVectors","console","warn","set","points1","found1","count1","p","pNext","delta","targetPoint","startIntersects","distanceToPoint","doesIntersect","intersectLine","distanceTo","containsPoint","points2","found2","count2","tmp","s1","e1","s2","e2","separated1","separated2","point","distanceToTriangle","cornerFields","line1","line2","lineTarget","getCenter","dist","field","otherVec","thisVec","f11","f12","f21","f22"],"sources":["/Users/armenmerikyan/Desktop/wd/tfnlab.com/metagascarnext/stage-presets-gltfjsx/node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/math/ExtendedTriangle.js"],"sourcesContent":["import { Triangle, Vector3, Line3, Sphere, Plane } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { closestPointsSegmentToSegment, sphereIntersectTriangle } from './MathUtilities.js';\n\nconst DIST_EPSILON = 1e-15;\nfunction isNearZero( value ) {\n\n\treturn Math.abs( value ) < DIST_EPSILON;\n\n}\n\nexport class ExtendedTriangle extends Triangle {\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\n\t\tthis.isExtendedTriangle = true;\n\t\tthis.satAxes = new Array( 4 ).fill().map( () => new Vector3() );\n\t\tthis.satBounds = new Array( 4 ).fill().map( () => new SeparatingAxisBounds() );\n\t\tthis.points = [ this.a, this.b, this.c ];\n\t\tthis.sphere = new Sphere();\n\t\tthis.plane = new Plane();\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn sphereIntersectTriangle( sphere, this );\n\n\t}\n\n\tupdate() {\n\n\t\tconst a = this.a;\n\t\tconst b = this.b;\n\t\tconst c = this.c;\n\t\tconst points = this.points;\n\n\t\tconst satAxes = this.satAxes;\n\t\tconst satBounds = this.satBounds;\n\n\t\tconst axis0 = satAxes[ 0 ];\n\t\tconst sab0 = satBounds[ 0 ];\n\t\tthis.getNormal( axis0 );\n\t\tsab0.setFromPoints( axis0, points );\n\n\t\tconst axis1 = satAxes[ 1 ];\n\t\tconst sab1 = satBounds[ 1 ];\n\t\taxis1.subVectors( a, b );\n\t\tsab1.setFromPoints( axis1, points );\n\n\t\tconst axis2 = satAxes[ 2 ];\n\t\tconst sab2 = satBounds[ 2 ];\n\t\taxis2.subVectors( b, c );\n\t\tsab2.setFromPoints( axis2, points );\n\n\t\tconst axis3 = satAxes[ 3 ];\n\t\tconst sab3 = satBounds[ 3 ];\n\t\taxis3.subVectors( c, a );\n\t\tsab3.setFromPoints( axis3, points );\n\n\t\tthis.sphere.setFromPoints( this.points );\n\t\tthis.plane.setFromNormalAndCoplanarPoint( axis0, a );\n\t\tthis.needsUpdate = false;\n\n\t}\n\n}\n\nExtendedTriangle.prototype.closestPointToSegment = ( function () {\n\n\tconst point1 = new Vector3();\n\tconst point2 = new Vector3();\n\tconst edge = new Line3();\n\n\treturn function distanceToSegment( segment, target1 = null, target2 = null ) {\n\n\t\tconst { start, end } = segment;\n\t\tconst points = this.points;\n\t\tlet distSq;\n\t\tlet closestDistanceSq = Infinity;\n\n\t\t// check the triangle edges\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst nexti = ( i + 1 ) % 3;\n\t\t\tedge.start.copy( points[ i ] );\n\t\t\tedge.end.copy( points[ nexti ] );\n\n\t\t\tclosestPointsSegmentToSegment( edge, segment, point1, point2 );\n\n\t\t\tdistSq = point1.distanceToSquared( point2 );\n\t\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\t\tclosestDistanceSq = distSq;\n\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// check end points\n\t\tthis.closestPointToPoint( start, point1 );\n\t\tdistSq = start.distanceToSquared( point1 );\n\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\tclosestDistanceSq = distSq;\n\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\tif ( target2 ) target2.copy( start );\n\n\t\t}\n\n\t\tthis.closestPointToPoint( end, point1 );\n\t\tdistSq = end.distanceToSquared( point1 );\n\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\tclosestDistanceSq = distSq;\n\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\tif ( target2 ) target2.copy( end );\n\n\t\t}\n\n\t\treturn Math.sqrt( closestDistanceSq );\n\n\t};\n\n} )();\n\nExtendedTriangle.prototype.intersectsTriangle = ( function () {\n\n\tconst saTri2 = new ExtendedTriangle();\n\tconst arr1 = new Array( 3 );\n\tconst arr2 = new Array( 3 );\n\tconst cachedSatBounds = new SeparatingAxisBounds();\n\tconst cachedSatBounds2 = new SeparatingAxisBounds();\n\tconst cachedAxis = new Vector3();\n\tconst dir1 = new Vector3();\n\tconst dir2 = new Vector3();\n\tconst tempDir = new Vector3();\n\tconst edge = new Line3();\n\tconst edge1 = new Line3();\n\tconst edge2 = new Line3();\n\n\t// TODO: If the triangles are coplanar and intersecting the target is nonsensical. It should at least\n\t// be a line contained by both triangles if not a different special case somehow represented in the return result.\n\treturn function intersectsTriangle( other, target = null, suppressLog = false ) {\n\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tif ( ! other.isExtendedTriangle ) {\n\n\t\t\tsaTri2.copy( other );\n\t\t\tsaTri2.update();\n\t\t\tother = saTri2;\n\n\t\t} else if ( other.needsUpdate ) {\n\n\t\t\tother.update();\n\n\t\t}\n\n\t\tconst plane1 = this.plane;\n\t\tconst plane2 = other.plane;\n\n\t\tif ( Math.abs( plane1.normal.dot( plane2.normal ) ) > 1.0 - 1e-10 ) {\n\n\t\t\t// perform separating axis intersection test only for coplanar triangles\n\t\t\tconst satBounds1 = this.satBounds;\n\t\t\tconst satAxes1 = this.satAxes;\n\t\t\tarr2[ 0 ] = other.a;\n\t\t\tarr2[ 1 ] = other.b;\n\t\t\tarr2[ 2 ] = other.c;\n\t\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\t\tconst sb = satBounds1[ i ];\n\t\t\t\tconst sa = satAxes1[ i ];\n\t\t\t\tcachedSatBounds.setFromPoints( sa, arr2 );\n\t\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t\t}\n\n\t\t\tconst satBounds2 = other.satBounds;\n\t\t\tconst satAxes2 = other.satAxes;\n\t\t\tarr1[ 0 ] = this.a;\n\t\t\tarr1[ 1 ] = this.b;\n\t\t\tarr1[ 2 ] = this.c;\n\t\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\t\tconst sb = satBounds2[ i ];\n\t\t\t\tconst sa = satAxes2[ i ];\n\t\t\t\tcachedSatBounds.setFromPoints( sa, arr1 );\n\t\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t\t}\n\n\t\t\t// check crossed axes\n\t\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\t\tconst sa1 = satAxes1[ i ];\n\t\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\n\n\t\t\t\t\tconst sa2 = satAxes2[ i2 ];\n\t\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\n\t\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, arr1 );\n\t\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, arr2 );\n\t\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( target ) {\n\n\t\t\t\t// TODO find two points that intersect on the edges and make that the result\n\t\t\t\tif ( ! suppressLog ) {\n\n\t\t\t\t\tconsole.warn( 'ExtendedTriangle.intersectsTriangle: Triangles are coplanar which does not support an output edge. Setting edge to 0, 0, 0.' );\n\n\t\t\t\t}\n\n\t\t\t\ttarget.start.set( 0, 0, 0 );\n\t\t\t\ttarget.end.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t} else {\n\n\t\t\t// find the edge that intersects the other triangle plane\n\t\t\tconst points1 = this.points;\n\t\t\tlet found1 = false;\n\t\t\tlet count1 = 0;\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\tconst p = points1[ i ];\n\t\t\t\tconst pNext = points1[ ( i + 1 ) % 3 ];\n\n\t\t\t\tedge.start.copy( p );\n\t\t\t\tedge.end.copy( pNext );\n\t\t\t\tedge.delta( dir1 );\n\n\t\t\t\tconst targetPoint = found1 ? edge1.start : edge1.end;\n\t\t\t\tconst startIntersects = isNearZero( plane2.distanceToPoint( p ) );\n\t\t\t\tif ( isNearZero( plane2.normal.dot( dir1 ) ) && startIntersects ) {\n\n\t\t\t\t\t// if the edge lies on the plane then take the line\n\t\t\t\t\tedge1.copy( edge );\n\t\t\t\t\tcount1 = 2;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\t// check if the start point is near the plane because \"intersectLine\" is not robust to that case\n\t\t\t\tconst doesIntersect = plane2.intersectLine( edge, targetPoint ) || startIntersects;\n\t\t\t\tif ( doesIntersect && ! isNearZero( targetPoint.distanceTo( pNext ) ) ) {\n\n\t\t\t\t\tcount1 ++;\n\t\t\t\t\tif ( found1 ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfound1 = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( count1 === 1 && other.containsPoint( edge1.end ) ) {\n\n\t\t\t\tif ( target ) {\n\n\t\t\t\t\ttarget.start.copy( edge1.end );\n\t\t\t\t\ttarget.end.copy( edge1.end );\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t} else if ( count1 !== 2 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// find the other triangles edge that intersects this plane\n\t\t\tconst points2 = other.points;\n\t\t\tlet found2 = false;\n\t\t\tlet count2 = 0;\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\tconst p = points2[ i ];\n\t\t\t\tconst pNext = points2[ ( i + 1 ) % 3 ];\n\n\t\t\t\tedge.start.copy( p );\n\t\t\t\tedge.end.copy( pNext );\n\t\t\t\tedge.delta( dir2 );\n\n\t\t\t\tconst targetPoint = found2 ? edge2.start : edge2.end;\n\t\t\t\tconst startIntersects = isNearZero( plane1.distanceToPoint( p ) );\n\t\t\t\tif ( isNearZero( plane1.normal.dot( dir2 ) ) && startIntersects ) {\n\n\t\t\t\t\t// if the edge lies on the plane then take the line\n\t\t\t\t\tedge2.copy( edge );\n\t\t\t\t\tcount2 = 2;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\t// check if the start point is near the plane because \"intersectLine\" is not robust to that case\n\t\t\t\tconst doesIntersect = plane1.intersectLine( edge, targetPoint ) || startIntersects;\n\t\t\t\tif ( doesIntersect && ! isNearZero( targetPoint.distanceTo( pNext ) ) ) {\n\n\t\t\t\t\tcount2 ++;\n\t\t\t\t\tif ( found2 ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfound2 = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( count2 === 1 && this.containsPoint( edge2.end ) ) {\n\n\t\t\t\tif ( target ) {\n\n\t\t\t\t\ttarget.start.copy( edge2.end );\n\t\t\t\t\ttarget.end.copy( edge2.end );\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t} else if ( count2 !== 2 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// find swap the second edge so both lines are running the same direction\n\t\t\tedge1.delta( dir1 );\n\t\t\tedge2.delta( dir2 );\n\n\t\t\tif ( dir1.dot( dir2 ) < 0 ) {\n\n\t\t\t\tlet tmp = edge2.start;\n\t\t\t\tedge2.start = edge2.end;\n\t\t\t\tedge2.end = tmp;\n\n\t\t\t}\n\n\t\t\t// check if the edges are overlapping\n\t\t\tconst s1 = edge1.start.dot( dir1 );\n\t\t\tconst e1 = edge1.end.dot( dir1 );\n\t\t\tconst s2 = edge2.start.dot( dir1 );\n\t\t\tconst e2 = edge2.end.dot( dir1 );\n\t\t\tconst separated1 = e1 < s2;\n\t\t\tconst separated2 = s1 < e2;\n\n\t\t\tif ( s1 !== e2 && s2 !== e1 && separated1 === separated2 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// assign the target output\n\t\t\tif ( target ) {\n\n\t\t\t\ttempDir.subVectors( edge1.start, edge2.start );\n\t\t\t\tif ( tempDir.dot( dir1 ) > 0 ) {\n\n\t\t\t\t\ttarget.start.copy( edge1.start );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttarget.start.copy( edge2.start );\n\n\t\t\t\t}\n\n\t\t\t\ttempDir.subVectors( edge1.end, edge2.end );\n\t\t\t\tif ( tempDir.dot( dir1 ) < 0 ) {\n\n\t\t\t\t\ttarget.end.copy( edge1.end );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttarget.end.copy( edge2.end );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t};\n\n} )();\n\n\nExtendedTriangle.prototype.distanceToPoint = ( function () {\n\n\tconst target = new Vector3();\n\treturn function distanceToPoint( point ) {\n\n\t\tthis.closestPointToPoint( point, target );\n\t\treturn point.distanceTo( target );\n\n\t};\n\n} )();\n\n\nExtendedTriangle.prototype.distanceToTriangle = ( function () {\n\n\tconst point = new Vector3();\n\tconst point2 = new Vector3();\n\tconst cornerFields = [ 'a', 'b', 'c' ];\n\tconst line1 = new Line3();\n\tconst line2 = new Line3();\n\n\treturn function distanceToTriangle( other, target1 = null, target2 = null ) {\n\n\t\tconst lineTarget = target1 || target2 ? line1 : null;\n\t\tif ( this.intersectsTriangle( other, lineTarget ) ) {\n\n\t\t\tif ( target1 || target2 ) {\n\n\t\t\t\tif ( target1 ) lineTarget.getCenter( target1 );\n\t\t\t\tif ( target2 ) lineTarget.getCenter( target2 );\n\n\t\t\t}\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tlet closestDistanceSq = Infinity;\n\n\t\t// check all point distances\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tlet dist;\n\t\t\tconst field = cornerFields[ i ];\n\t\t\tconst otherVec = other[ field ];\n\t\t\tthis.closestPointToPoint( otherVec, point );\n\n\t\t\tdist = otherVec.distanceToSquared( point );\n\n\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\tif ( target1 ) target1.copy( point );\n\t\t\t\tif ( target2 ) target2.copy( otherVec );\n\n\t\t\t}\n\n\n\t\t\tconst thisVec = this[ field ];\n\t\t\tother.closestPointToPoint( thisVec, point );\n\n\t\t\tdist = thisVec.distanceToSquared( point );\n\n\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\tif ( target1 ) target1.copy( thisVec );\n\t\t\t\tif ( target2 ) target2.copy( point );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst f11 = cornerFields[ i ];\n\t\t\tconst f12 = cornerFields[ ( i + 1 ) % 3 ];\n\t\t\tline1.set( this[ f11 ], this[ f12 ] );\n\t\t\tfor ( let i2 = 0; i2 < 3; i2 ++ ) {\n\n\t\t\t\tconst f21 = cornerFields[ i2 ];\n\t\t\t\tconst f22 = cornerFields[ ( i2 + 1 ) % 3 ];\n\t\t\t\tline2.set( other[ f21 ], other[ f22 ] );\n\n\t\t\t\tclosestPointsSegmentToSegment( line1, line2, point, point2 );\n\n\t\t\t\tconst dist = point.distanceToSquared( point2 );\n\t\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\t\tif ( target1 ) target1.copy( point );\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Math.sqrt( closestDistanceSq );\n\n\t};\n\n} )();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}