{"ast":null,"code":"/**\n * @author Rich Tibbett / https://github.com/richtr\n * @author mrdoob / http://mrdoob.com/\n * @author Tony Parisi / http://www.tonyparisi.com/\n * @author Takahiro / https://github.com/takahirox\n * @author Don McCurdy / https://www.donmccurdy.com\n */\n\nvar THREE = require('three');\nvar _GLTFLoader = function () {\n  function GLTFLoader(manager) {\n    THREE.Loader.call(this, manager);\n    this.dracoLoader = null;\n    this.ddsLoader = null;\n  }\n  GLTFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n    constructor: GLTFLoader,\n    load: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var resourcePath;\n      if (this.resourcePath !== '') {\n        resourcePath = this.resourcePath;\n      } else if (this.path !== '') {\n        resourcePath = this.path;\n      } else {\n        resourcePath = THREE.LoaderUtils.extractUrlBase(url);\n      }\n\n      // Tells the LoadingManager to track an extra item, which resolves after\n      // the model is fully loaded. This means the count of items loaded will\n      // be incorrect, but ensures manager.onLoad() does not fire early.\n      scope.manager.itemStart(url);\n      var _onError = function _onError(e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n        scope.manager.itemEnd(url);\n      };\n      var loader = new THREE.FileLoader(scope.manager);\n      loader.setPath(this.path);\n      loader.setResponseType('arraybuffer');\n      if (scope.crossOrigin === 'use-credentials') {\n        loader.setWithCredentials(true);\n      }\n      loader.load(url, function (data) {\n        try {\n          scope.parse(data, resourcePath, function (gltf) {\n            onLoad(gltf);\n            scope.manager.itemEnd(url);\n          }, _onError);\n        } catch (e) {\n          _onError(e);\n        }\n      }, onProgress, _onError);\n    },\n    setDRACOLoader: function setDRACOLoader(dracoLoader) {\n      this.dracoLoader = dracoLoader;\n      return this;\n    },\n    setDDSLoader: function setDDSLoader(ddsLoader) {\n      this.ddsLoader = ddsLoader;\n      return this;\n    },\n    parse: function parse(data, path, onLoad, onError) {\n      var content;\n      var extensions = {};\n      if (typeof data === 'string') {\n        content = data;\n      } else {\n        var magic = THREE.LoaderUtils.decodeText(new Uint8Array(data, 0, 4));\n        if (magic === BINARY_EXTENSION_HEADER_MAGIC) {\n          try {\n            extensions[EXTENSIONS.KHR_BINARY_GLTF] = new GLTFBinaryExtension(data);\n          } catch (error) {\n            if (onError) onError(error);\n            return;\n          }\n          content = extensions[EXTENSIONS.KHR_BINARY_GLTF].content;\n        } else {\n          content = THREE.LoaderUtils.decodeText(new Uint8Array(data));\n        }\n      }\n      var json = JSON.parse(content);\n      if (json.asset === undefined || json.asset.version[0] < 2) {\n        if (onError) onError(new Error('THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported.'));\n        return;\n      }\n      if (json.extensionsUsed) {\n        for (var i = 0; i < json.extensionsUsed.length; ++i) {\n          var extensionName = json.extensionsUsed[i];\n          var extensionsRequired = json.extensionsRequired || [];\n          switch (extensionName) {\n            case EXTENSIONS.KHR_LIGHTS_PUNCTUAL:\n              extensions[extensionName] = new GLTFLightsExtension(json);\n              break;\n            case EXTENSIONS.KHR_MATERIALS_UNLIT:\n              extensions[extensionName] = new GLTFMaterialsUnlitExtension();\n              break;\n            case EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:\n              extensions[extensionName] = new GLTFMaterialsPbrSpecularGlossinessExtension();\n              break;\n            case EXTENSIONS.KHR_DRACO_MESH_COMPRESSION:\n              extensions[extensionName] = new GLTFDracoMeshCompressionExtension(json, this.dracoLoader);\n              break;\n            case EXTENSIONS.MSFT_TEXTURE_DDS:\n              extensions[extensionName] = new GLTFTextureDDSExtension(this.ddsLoader);\n              break;\n            case EXTENSIONS.KHR_TEXTURE_TRANSFORM:\n              extensions[extensionName] = new GLTFTextureTransformExtension();\n              break;\n            case EXTENSIONS.KHR_MESH_QUANTIZATION:\n              extensions[extensionName] = new GLTFMeshQuantizationExtension();\n              break;\n            default:\n              if (extensionsRequired.indexOf(extensionName) >= 0) {\n                console.warn('THREE.GLTFLoader: Unknown extension \"' + extensionName + '\".');\n              }\n          }\n        }\n      }\n      var parser = new GLTFParser(json, extensions, {\n        path: path || this.resourcePath || '',\n        crossOrigin: this.crossOrigin,\n        manager: this.manager\n      });\n      parser.parse(onLoad, onError);\n    }\n  });\n\n  /* GLTFREGISTRY */\n\n  function GLTFRegistry() {\n    var objects = {};\n    return {\n      get: function get(key) {\n        return objects[key];\n      },\n      add: function add(key, object) {\n        objects[key] = object;\n      },\n      remove: function remove(key) {\n        delete objects[key];\n      },\n      removeAll: function removeAll() {\n        objects = {};\n      }\n    };\n  }\n\n  /*********************************/\n  /********** EXTENSIONS ***********/\n  /*********************************/\n\n  var EXTENSIONS = {\n    KHR_BINARY_GLTF: 'KHR_binary_glTF',\n    KHR_DRACO_MESH_COMPRESSION: 'KHR_draco_mesh_compression',\n    KHR_LIGHTS_PUNCTUAL: 'KHR_lights_punctual',\n    KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS: 'KHR_materials_pbrSpecularGlossiness',\n    KHR_MATERIALS_UNLIT: 'KHR_materials_unlit',\n    KHR_TEXTURE_TRANSFORM: 'KHR_texture_transform',\n    KHR_MESH_QUANTIZATION: 'KHR_mesh_quantization',\n    MSFT_TEXTURE_DDS: 'MSFT_texture_dds'\n  };\n\n  /**\n   * DDS Texture Extension\n   *\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/MSFT_texture_dds\n   *\n   */\n  function GLTFTextureDDSExtension(ddsLoader) {\n    if (!ddsLoader) {\n      throw new Error('THREE.GLTFLoader: Attempting to load .dds texture without importing THREE.DDSLoader');\n    }\n    this.name = EXTENSIONS.MSFT_TEXTURE_DDS;\n    this.ddsLoader = ddsLoader;\n  }\n\n  /**\n   * Punctual Lights Extension\n   *\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\n   */\n  function GLTFLightsExtension(json) {\n    this.name = EXTENSIONS.KHR_LIGHTS_PUNCTUAL;\n    var extension = json.extensions && json.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL] || {};\n    this.lightDefs = extension.lights || [];\n  }\n  GLTFLightsExtension.prototype.loadLight = function (lightIndex) {\n    var lightDef = this.lightDefs[lightIndex];\n    var lightNode;\n    var color = new THREE.Color(0xffffff);\n    if (lightDef.color !== undefined) color.fromArray(lightDef.color);\n    var range = lightDef.range !== undefined ? lightDef.range : 0;\n    switch (lightDef.type) {\n      case 'directional':\n        lightNode = new THREE.DirectionalLight(color);\n        lightNode.target.position.set(0, 0, -1);\n        lightNode.add(lightNode.target);\n        break;\n      case 'point':\n        lightNode = new THREE.PointLight(color);\n        lightNode.distance = range;\n        break;\n      case 'spot':\n        lightNode = new THREE.SpotLight(color);\n        lightNode.distance = range;\n        // Handle spotlight properties.\n        lightDef.spot = lightDef.spot || {};\n        lightDef.spot.innerConeAngle = lightDef.spot.innerConeAngle !== undefined ? lightDef.spot.innerConeAngle : 0;\n        lightDef.spot.outerConeAngle = lightDef.spot.outerConeAngle !== undefined ? lightDef.spot.outerConeAngle : Math.PI / 4.0;\n        lightNode.angle = lightDef.spot.outerConeAngle;\n        lightNode.penumbra = 1.0 - lightDef.spot.innerConeAngle / lightDef.spot.outerConeAngle;\n        lightNode.target.position.set(0, 0, -1);\n        lightNode.add(lightNode.target);\n        break;\n      default:\n        throw new Error('THREE.GLTFLoader: Unexpected light type, \"' + lightDef.type + '\".');\n    }\n\n    // Some lights (e.g. spot) default to a position other than the origin. Reset the position\n    // here, because node-level parsing will only override position if explicitly specified.\n    lightNode.position.set(0, 0, 0);\n    lightNode.decay = 2;\n    if (lightDef.intensity !== undefined) lightNode.intensity = lightDef.intensity;\n    lightNode.name = lightDef.name || 'light_' + lightIndex;\n    return Promise.resolve(lightNode);\n  };\n\n  /**\n   * Unlit Materials Extension\n   *\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit\n   */\n  function GLTFMaterialsUnlitExtension() {\n    this.name = EXTENSIONS.KHR_MATERIALS_UNLIT;\n  }\n  GLTFMaterialsUnlitExtension.prototype.getMaterialType = function () {\n    return THREE.MeshBasicMaterial;\n  };\n  GLTFMaterialsUnlitExtension.prototype.extendParams = function (materialParams, materialDef, parser) {\n    var pending = [];\n    materialParams.color = new THREE.Color(1.0, 1.0, 1.0);\n    materialParams.opacity = 1.0;\n    var metallicRoughness = materialDef.pbrMetallicRoughness;\n    if (metallicRoughness) {\n      if (Array.isArray(metallicRoughness.baseColorFactor)) {\n        var array = metallicRoughness.baseColorFactor;\n        materialParams.color.fromArray(array);\n        materialParams.opacity = array[3];\n      }\n      if (metallicRoughness.baseColorTexture !== undefined) {\n        pending.push(parser.assignTexture(materialParams, 'map', metallicRoughness.baseColorTexture));\n      }\n    }\n    return Promise.all(pending);\n  };\n\n  /* BINARY EXTENSION */\n  var BINARY_EXTENSION_HEADER_MAGIC = 'glTF';\n  var BINARY_EXTENSION_HEADER_LENGTH = 12;\n  var BINARY_EXTENSION_CHUNK_TYPES = {\n    JSON: 0x4E4F534A,\n    BIN: 0x004E4942\n  };\n  function GLTFBinaryExtension(data) {\n    this.name = EXTENSIONS.KHR_BINARY_GLTF;\n    this.content = null;\n    this.body = null;\n    var headerView = new DataView(data, 0, BINARY_EXTENSION_HEADER_LENGTH);\n    this.header = {\n      magic: THREE.LoaderUtils.decodeText(new Uint8Array(data.slice(0, 4))),\n      version: headerView.getUint32(4, true),\n      length: headerView.getUint32(8, true)\n    };\n    if (this.header.magic !== BINARY_EXTENSION_HEADER_MAGIC) {\n      throw new Error('THREE.GLTFLoader: Unsupported glTF-Binary header.');\n    } else if (this.header.version < 2.0) {\n      throw new Error('THREE.GLTFLoader: Legacy binary file detected.');\n    }\n    var chunkView = new DataView(data, BINARY_EXTENSION_HEADER_LENGTH);\n    var chunkIndex = 0;\n    while (chunkIndex < chunkView.byteLength) {\n      var chunkLength = chunkView.getUint32(chunkIndex, true);\n      chunkIndex += 4;\n      var chunkType = chunkView.getUint32(chunkIndex, true);\n      chunkIndex += 4;\n      if (chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON) {\n        var contentArray = new Uint8Array(data, BINARY_EXTENSION_HEADER_LENGTH + chunkIndex, chunkLength);\n        this.content = THREE.LoaderUtils.decodeText(contentArray);\n      } else if (chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN) {\n        var byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;\n        this.body = data.slice(byteOffset, byteOffset + chunkLength);\n      }\n\n      // Clients must ignore chunks with unknown types.\n\n      chunkIndex += chunkLength;\n    }\n    if (this.content === null) {\n      throw new Error('THREE.GLTFLoader: JSON content not found.');\n    }\n  }\n\n  /**\n   * DRACO Mesh Compression Extension\n   *\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression\n   */\n  function GLTFDracoMeshCompressionExtension(json, dracoLoader) {\n    if (!dracoLoader) {\n      throw new Error('THREE.GLTFLoader: No DRACOLoader instance provided.');\n    }\n    this.name = EXTENSIONS.KHR_DRACO_MESH_COMPRESSION;\n    this.json = json;\n    this.dracoLoader = dracoLoader;\n  }\n  GLTFDracoMeshCompressionExtension.prototype.decodePrimitive = function (primitive, parser) {\n    var json = this.json;\n    var dracoLoader = this.dracoLoader;\n    var bufferViewIndex = primitive.extensions[this.name].bufferView;\n    var gltfAttributeMap = primitive.extensions[this.name].attributes;\n    var threeAttributeMap = {};\n    var attributeNormalizedMap = {};\n    var attributeTypeMap = {};\n    for (var attributeName in gltfAttributeMap) {\n      var threeAttributeName = ATTRIBUTES[attributeName] || attributeName.toLowerCase();\n      threeAttributeMap[threeAttributeName] = gltfAttributeMap[attributeName];\n    }\n    for (attributeName in primitive.attributes) {\n      var threeAttributeName = ATTRIBUTES[attributeName] || attributeName.toLowerCase();\n      if (gltfAttributeMap[attributeName] !== undefined) {\n        var accessorDef = json.accessors[primitive.attributes[attributeName]];\n        var componentType = WEBGL_COMPONENT_TYPES[accessorDef.componentType];\n        attributeTypeMap[threeAttributeName] = componentType;\n        attributeNormalizedMap[threeAttributeName] = accessorDef.normalized === true;\n      }\n    }\n    return parser.getDependency('bufferView', bufferViewIndex).then(function (bufferView) {\n      return new Promise(function (resolve) {\n        dracoLoader.decodeDracoFile(bufferView, function (geometry) {\n          for (var attributeName in geometry.attributes) {\n            var attribute = geometry.attributes[attributeName];\n            var normalized = attributeNormalizedMap[attributeName];\n            if (normalized !== undefined) attribute.normalized = normalized;\n          }\n          resolve(geometry);\n        }, threeAttributeMap, attributeTypeMap);\n      });\n    });\n  };\n\n  /**\n   * Texture Transform Extension\n   *\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_texture_transform\n   */\n  function GLTFTextureTransformExtension() {\n    this.name = EXTENSIONS.KHR_TEXTURE_TRANSFORM;\n  }\n  GLTFTextureTransformExtension.prototype.extendTexture = function (texture, transform) {\n    texture = texture.clone();\n    if (transform.offset !== undefined) {\n      texture.offset.fromArray(transform.offset);\n    }\n    if (transform.rotation !== undefined) {\n      texture.rotation = transform.rotation;\n    }\n    if (transform.scale !== undefined) {\n      texture.repeat.fromArray(transform.scale);\n    }\n    if (transform.texCoord !== undefined) {\n      console.warn('THREE.GLTFLoader: Custom UV sets in \"' + this.name + '\" extension not yet supported.');\n    }\n    texture.needsUpdate = true;\n    return texture;\n  };\n\n  /**\n   * Specular-Glossiness Extension\n   *\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness\n   */\n  function GLTFMaterialsPbrSpecularGlossinessExtension() {\n    return {\n      name: EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,\n      specularGlossinessParams: ['color', 'map', 'lightMap', 'lightMapIntensity', 'aoMap', 'aoMapIntensity', 'emissive', 'emissiveIntensity', 'emissiveMap', 'bumpMap', 'bumpScale', 'normalMap', 'displacementMap', 'displacementScale', 'displacementBias', 'specularMap', 'specular', 'glossinessMap', 'glossiness', 'alphaMap', 'envMap', 'envMapIntensity', 'refractionRatio'],\n      getMaterialType: function getMaterialType() {\n        return THREE.ShaderMaterial;\n      },\n      extendParams: function extendParams(materialParams, materialDef, parser) {\n        var pbrSpecularGlossiness = materialDef.extensions[this.name];\n        var shader = THREE.ShaderLib['standard'];\n        var uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n        var specularMapParsFragmentChunk = ['#ifdef USE_SPECULARMAP', '\tuniform sampler2D specularMap;', '#endif'].join('\\n');\n        var glossinessMapParsFragmentChunk = ['#ifdef USE_GLOSSINESSMAP', '\tuniform sampler2D glossinessMap;', '#endif'].join('\\n');\n        var specularMapFragmentChunk = ['vec3 specularFactor = specular;', '#ifdef USE_SPECULARMAP', '\tvec4 texelSpecular = texture2D( specularMap, vUv );', '\ttexelSpecular = sRGBToLinear( texelSpecular );', '\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture', '\tspecularFactor *= texelSpecular.rgb;', '#endif'].join('\\n');\n        var glossinessMapFragmentChunk = ['float glossinessFactor = glossiness;', '#ifdef USE_GLOSSINESSMAP', '\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );', '\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture', '\tglossinessFactor *= texelGlossiness.a;', '#endif'].join('\\n');\n        var lightPhysicalFragmentChunk = ['PhysicalMaterial material;', 'material.diffuseColor = diffuseColor.rgb;', 'material.specularRoughness = clamp( 1.0 - glossinessFactor, 0.04, 1.0 );', 'material.specularColor = specularFactor.rgb;'].join('\\n');\n        var fragmentShader = shader.fragmentShader.replace('uniform float roughness;', 'uniform vec3 specular;').replace('uniform float metalness;', 'uniform float glossiness;').replace('#include <roughnessmap_pars_fragment>', specularMapParsFragmentChunk).replace('#include <metalnessmap_pars_fragment>', glossinessMapParsFragmentChunk).replace('#include <roughnessmap_fragment>', specularMapFragmentChunk).replace('#include <metalnessmap_fragment>', glossinessMapFragmentChunk).replace('#include <lights_physical_fragment>', lightPhysicalFragmentChunk);\n        delete uniforms.roughness;\n        delete uniforms.metalness;\n        delete uniforms.roughnessMap;\n        delete uniforms.metalnessMap;\n        uniforms.specular = {\n          value: new THREE.Color().setHex(0x111111)\n        };\n        uniforms.glossiness = {\n          value: 0.5\n        };\n        uniforms.specularMap = {\n          value: null\n        };\n        uniforms.glossinessMap = {\n          value: null\n        };\n        materialParams.vertexShader = shader.vertexShader;\n        materialParams.fragmentShader = fragmentShader;\n        materialParams.uniforms = uniforms;\n        materialParams.defines = {\n          'STANDARD': ''\n        };\n        materialParams.color = new THREE.Color(1.0, 1.0, 1.0);\n        materialParams.opacity = 1.0;\n        var pending = [];\n        if (Array.isArray(pbrSpecularGlossiness.diffuseFactor)) {\n          var array = pbrSpecularGlossiness.diffuseFactor;\n          materialParams.color.fromArray(array);\n          materialParams.opacity = array[3];\n        }\n        if (pbrSpecularGlossiness.diffuseTexture !== undefined) {\n          pending.push(parser.assignTexture(materialParams, 'map', pbrSpecularGlossiness.diffuseTexture));\n        }\n        materialParams.emissive = new THREE.Color(0.0, 0.0, 0.0);\n        materialParams.glossiness = pbrSpecularGlossiness.glossinessFactor !== undefined ? pbrSpecularGlossiness.glossinessFactor : 1.0;\n        materialParams.specular = new THREE.Color(1.0, 1.0, 1.0);\n        if (Array.isArray(pbrSpecularGlossiness.specularFactor)) {\n          materialParams.specular.fromArray(pbrSpecularGlossiness.specularFactor);\n        }\n        if (pbrSpecularGlossiness.specularGlossinessTexture !== undefined) {\n          var specGlossMapDef = pbrSpecularGlossiness.specularGlossinessTexture;\n          pending.push(parser.assignTexture(materialParams, 'glossinessMap', specGlossMapDef));\n          pending.push(parser.assignTexture(materialParams, 'specularMap', specGlossMapDef));\n        }\n        return Promise.all(pending);\n      },\n      createMaterial: function createMaterial(params) {\n        // setup material properties based on MeshStandardMaterial for Specular-Glossiness\n\n        var material = new THREE.ShaderMaterial({\n          defines: params.defines,\n          vertexShader: params.vertexShader,\n          fragmentShader: params.fragmentShader,\n          uniforms: params.uniforms,\n          fog: true,\n          lights: true,\n          opacity: params.opacity,\n          transparent: params.transparent\n        });\n        material.isGLTFSpecularGlossinessMaterial = true;\n        material.color = params.color;\n        material.map = params.map === undefined ? null : params.map;\n        material.lightMap = null;\n        material.lightMapIntensity = 1.0;\n        material.aoMap = params.aoMap === undefined ? null : params.aoMap;\n        material.aoMapIntensity = 1.0;\n        material.emissive = params.emissive;\n        material.emissiveIntensity = 1.0;\n        material.emissiveMap = params.emissiveMap === undefined ? null : params.emissiveMap;\n        material.bumpMap = params.bumpMap === undefined ? null : params.bumpMap;\n        material.bumpScale = 1;\n        material.normalMap = params.normalMap === undefined ? null : params.normalMap;\n        if (params.normalScale) material.normalScale = params.normalScale;\n        material.displacementMap = null;\n        material.displacementScale = 1;\n        material.displacementBias = 0;\n        material.specularMap = params.specularMap === undefined ? null : params.specularMap;\n        material.specular = params.specular;\n        material.glossinessMap = params.glossinessMap === undefined ? null : params.glossinessMap;\n        material.glossiness = params.glossiness;\n        material.alphaMap = null;\n        material.envMap = params.envMap === undefined ? null : params.envMap;\n        material.envMapIntensity = 1.0;\n        material.refractionRatio = 0.98;\n        material.extensions.derivatives = true;\n        return material;\n      },\n      /**\n       * Clones a GLTFSpecularGlossinessMaterial instance. The ShaderMaterial.copy() method can\n       * copy only properties it knows about or inherits, and misses many properties that would\n       * normally be defined by MeshStandardMaterial.\n       *\n       * This method allows GLTFSpecularGlossinessMaterials to be cloned in the process of\n       * loading a glTF model, but cloning later (e.g. by the user) would require these changes\n       * AND also updating `.onBeforeRender` on the parent mesh.\n       *\n       * @param  {THREE.ShaderMaterial} source\n       * @return {THREE.ShaderMaterial}\n       */\n      cloneMaterial: function cloneMaterial(source) {\n        var target = source.clone();\n        target.isGLTFSpecularGlossinessMaterial = true;\n        var params = this.specularGlossinessParams;\n        for (var i = 0, il = params.length; i < il; i++) {\n          var value = source[params[i]];\n          target[params[i]] = value && value.isColor ? value.clone() : value;\n        }\n        return target;\n      },\n      // Here's based on refreshUniformsCommon() and refreshUniformsStandard() in WebGLRenderer.\n      refreshUniforms: function refreshUniforms(renderer, scene, camera, geometry, material) {\n        if (material.isGLTFSpecularGlossinessMaterial !== true) {\n          return;\n        }\n        var uniforms = material.uniforms;\n        var defines = material.defines;\n        uniforms.opacity.value = material.opacity;\n        uniforms.diffuse.value.copy(material.color);\n        uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n        uniforms.map.value = material.map;\n        uniforms.specularMap.value = material.specularMap;\n        uniforms.alphaMap.value = material.alphaMap;\n        uniforms.lightMap.value = material.lightMap;\n        uniforms.lightMapIntensity.value = material.lightMapIntensity;\n        uniforms.aoMap.value = material.aoMap;\n        uniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n        // uv repeat and offset setting priorities\n        // 1. color map\n        // 2. specular map\n        // 3. normal map\n        // 4. bump map\n        // 5. alpha map\n        // 6. emissive map\n\n        var uvScaleMap;\n        if (material.map) {\n          uvScaleMap = material.map;\n        } else if (material.specularMap) {\n          uvScaleMap = material.specularMap;\n        } else if (material.displacementMap) {\n          uvScaleMap = material.displacementMap;\n        } else if (material.normalMap) {\n          uvScaleMap = material.normalMap;\n        } else if (material.bumpMap) {\n          uvScaleMap = material.bumpMap;\n        } else if (material.glossinessMap) {\n          uvScaleMap = material.glossinessMap;\n        } else if (material.alphaMap) {\n          uvScaleMap = material.alphaMap;\n        } else if (material.emissiveMap) {\n          uvScaleMap = material.emissiveMap;\n        }\n        if (uvScaleMap !== undefined) {\n          // backwards compatibility\n          if (uvScaleMap.isWebGLRenderTarget) {\n            uvScaleMap = uvScaleMap.texture;\n          }\n          if (uvScaleMap.matrixAutoUpdate === true) {\n            uvScaleMap.updateMatrix();\n          }\n          uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n        }\n        if (material.envMap) {\n          uniforms.envMap.value = material.envMap;\n          uniforms.envMapIntensity.value = material.envMapIntensity;\n\n          // don't flip CubeTexture envMaps, flip everything else:\n          //  WebGLRenderTargetCube will be flipped for backwards compatibility\n          //  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n          // this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n          uniforms.flipEnvMap.value = material.envMap.isCubeTexture ? -1 : 1;\n          uniforms.reflectivity.value = material.reflectivity;\n          uniforms.refractionRatio.value = material.refractionRatio;\n          uniforms.maxMipLevel.value = renderer.properties.get(material.envMap).__maxMipLevel;\n        }\n        uniforms.specular.value.copy(material.specular);\n        uniforms.glossiness.value = material.glossiness;\n        uniforms.glossinessMap.value = material.glossinessMap;\n        uniforms.emissiveMap.value = material.emissiveMap;\n        uniforms.bumpMap.value = material.bumpMap;\n        uniforms.normalMap.value = material.normalMap;\n        uniforms.displacementMap.value = material.displacementMap;\n        uniforms.displacementScale.value = material.displacementScale;\n        uniforms.displacementBias.value = material.displacementBias;\n        if (uniforms.glossinessMap.value !== null && defines.USE_GLOSSINESSMAP === undefined) {\n          defines.USE_GLOSSINESSMAP = '';\n          // set USE_ROUGHNESSMAP to enable vUv\n          defines.USE_ROUGHNESSMAP = '';\n        }\n        if (uniforms.glossinessMap.value === null && defines.USE_GLOSSINESSMAP !== undefined) {\n          delete defines.USE_GLOSSINESSMAP;\n          delete defines.USE_ROUGHNESSMAP;\n        }\n      }\n    };\n  }\n\n  /**\n   * Mesh Quantization Extension\n   *\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization\n   */\n  function GLTFMeshQuantizationExtension() {\n    this.name = EXTENSIONS.KHR_MESH_QUANTIZATION;\n  }\n\n  /*********************************/\n  /********** INTERPOLATION ********/\n  /*********************************/\n\n  // Spline Interpolation\n  // Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#appendix-c-spline-interpolation\n  function GLTFCubicSplineInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n    THREE.Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n  }\n  GLTFCubicSplineInterpolant.prototype = Object.create(THREE.Interpolant.prototype);\n  GLTFCubicSplineInterpolant.prototype.constructor = GLTFCubicSplineInterpolant;\n  GLTFCubicSplineInterpolant.prototype.copySampleValue_ = function (index) {\n    // Copies a sample value to the result buffer. See description of glTF\n    // CUBICSPLINE values layout in interpolate_() function below.\n\n    var result = this.resultBuffer,\n      values = this.sampleValues,\n      valueSize = this.valueSize,\n      offset = index * valueSize * 3 + valueSize;\n    for (var i = 0; i !== valueSize; i++) {\n      result[i] = values[offset + i];\n    }\n    return result;\n  };\n  GLTFCubicSplineInterpolant.prototype.beforeStart_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;\n  GLTFCubicSplineInterpolant.prototype.afterEnd_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;\n  GLTFCubicSplineInterpolant.prototype.interpolate_ = function (i1, t0, t, t1) {\n    var result = this.resultBuffer;\n    var values = this.sampleValues;\n    var stride = this.valueSize;\n    var stride2 = stride * 2;\n    var stride3 = stride * 3;\n    var td = t1 - t0;\n    var p = (t - t0) / td;\n    var pp = p * p;\n    var ppp = pp * p;\n    var offset1 = i1 * stride3;\n    var offset0 = offset1 - stride3;\n    var s2 = -2 * ppp + 3 * pp;\n    var s3 = ppp - pp;\n    var s0 = 1 - s2;\n    var s1 = s3 - pp + p;\n\n    // Layout of keyframe output values for CUBICSPLINE animations:\n    //   [ inTangent_1, splineVertex_1, outTangent_1, inTangent_2, splineVertex_2, ... ]\n    for (var i = 0; i !== stride; i++) {\n      var p0 = values[offset0 + i + stride]; // splineVertex_k\n      var m0 = values[offset0 + i + stride2] * td; // outTangent_k * (t_k+1 - t_k)\n      var p1 = values[offset1 + i + stride]; // splineVertex_k+1\n      var m1 = values[offset1 + i] * td; // inTangent_k+1 * (t_k+1 - t_k)\n\n      result[i] = s0 * p0 + s1 * m0 + s2 * p1 + s3 * m1;\n    }\n    return result;\n  };\n\n  /*********************************/\n  /********** INTERNALS ************/\n  /*********************************/\n\n  /* CONSTANTS */\n\n  var WEBGL_CONSTANTS = {\n    FLOAT: 5126,\n    //FLOAT_MAT2: 35674,\n    FLOAT_MAT3: 35675,\n    FLOAT_MAT4: 35676,\n    FLOAT_VEC2: 35664,\n    FLOAT_VEC3: 35665,\n    FLOAT_VEC4: 35666,\n    LINEAR: 9729,\n    REPEAT: 10497,\n    SAMPLER_2D: 35678,\n    POINTS: 0,\n    LINES: 1,\n    LINE_LOOP: 2,\n    LINE_STRIP: 3,\n    TRIANGLES: 4,\n    TRIANGLE_STRIP: 5,\n    TRIANGLE_FAN: 6,\n    UNSIGNED_BYTE: 5121,\n    UNSIGNED_SHORT: 5123\n  };\n  var WEBGL_COMPONENT_TYPES = {\n    5120: Int8Array,\n    5121: Uint8Array,\n    5122: Int16Array,\n    5123: Uint16Array,\n    5125: Uint32Array,\n    5126: Float32Array\n  };\n  var WEBGL_FILTERS = {\n    9728: THREE.NearestFilter,\n    9729: THREE.LinearFilter,\n    9984: THREE.NearestMipmapNearestFilter,\n    9985: THREE.LinearMipmapNearestFilter,\n    9986: THREE.NearestMipmapLinearFilter,\n    9987: THREE.LinearMipmapLinearFilter\n  };\n  var WEBGL_WRAPPINGS = {\n    33071: THREE.ClampToEdgeWrapping,\n    33648: THREE.MirroredRepeatWrapping,\n    10497: THREE.RepeatWrapping\n  };\n  var WEBGL_TYPE_SIZES = {\n    'SCALAR': 1,\n    'VEC2': 2,\n    'VEC3': 3,\n    'VEC4': 4,\n    'MAT2': 4,\n    'MAT3': 9,\n    'MAT4': 16\n  };\n  var ATTRIBUTES = {\n    POSITION: 'position',\n    NORMAL: 'normal',\n    TANGENT: 'tangent',\n    TEXCOORD_0: 'uv',\n    TEXCOORD_1: 'uv2',\n    COLOR_0: 'color',\n    WEIGHTS_0: 'skinWeight',\n    JOINTS_0: 'skinIndex'\n  };\n  var PATH_PROPERTIES = {\n    scale: 'scale',\n    translation: 'position',\n    rotation: 'quaternion',\n    weights: 'morphTargetInfluences'\n  };\n  var INTERPOLATION = {\n    CUBICSPLINE: undefined,\n    // We use a custom interpolant (GLTFCubicSplineInterpolation) for CUBICSPLINE tracks. Each\n    // keyframe track will be initialized with a default interpolation type, then modified.\n    LINEAR: THREE.InterpolateLinear,\n    STEP: THREE.InterpolateDiscrete\n  };\n  var ALPHA_MODES = {\n    OPAQUE: 'OPAQUE',\n    MASK: 'MASK',\n    BLEND: 'BLEND'\n  };\n  var MIME_TYPE_FORMATS = {\n    'image/png': THREE.RGBAFormat,\n    'image/jpeg': THREE.RGBFormat\n  };\n\n  /* UTILITY FUNCTIONS */\n\n  function resolveURL(url, path) {\n    // Invalid URL\n    if (typeof url !== 'string' || url === '') return '';\n\n    // Host Relative URL\n    if (/^https?:\\/\\//i.test(path) && /^\\//.test(url)) {\n      path = path.replace(/(^https?:\\/\\/[^\\/]+).*/i, '$1');\n    }\n\n    // Absolute URL http://,https://,//\n    if (/^(https?:)?\\/\\//i.test(url)) return url;\n\n    // Data URI\n    if (/^data:.*,.*$/i.test(url)) return url;\n\n    // Blob URL\n    if (/^blob:.*$/i.test(url)) return url;\n\n    // Relative URL\n    return path + url;\n  }\n  var defaultMaterial;\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#default-material\n   */\n  function createDefaultMaterial() {\n    defaultMaterial = defaultMaterial || new THREE.MeshStandardMaterial({\n      color: 0xFFFFFF,\n      emissive: 0x000000,\n      metalness: 1,\n      roughness: 1,\n      transparent: false,\n      depthTest: true,\n      side: THREE.FrontSide\n    });\n    return defaultMaterial;\n  }\n  function addUnknownExtensionsToUserData(knownExtensions, object, objectDef) {\n    // Add unknown glTF extensions to an object's userData.\n\n    for (var name in objectDef.extensions) {\n      if (knownExtensions[name] === undefined) {\n        object.userData.gltfExtensions = object.userData.gltfExtensions || {};\n        object.userData.gltfExtensions[name] = objectDef.extensions[name];\n      }\n    }\n  }\n\n  /**\n   * @param {THREE.Object3D|THREE.Material|THREE.BufferGeometry} object\n   * @param {GLTF.definition} gltfDef\n   */\n  function assignExtrasToUserData(object, gltfDef) {\n    if (gltfDef.extras !== undefined) {\n      if (typeof gltfDef.extras === 'object') {\n        Object.assign(object.userData, gltfDef.extras);\n      } else {\n        console.warn('THREE.GLTFLoader: Ignoring primitive type .extras, ' + gltfDef.extras);\n      }\n    }\n  }\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#morph-targets\n   *\n   * @param {THREE.BufferGeometry} geometry\n   * @param {Array<GLTF.Target>} targets\n   * @param {GLTFParser} parser\n   * @return {Promise<THREE.BufferGeometry>}\n   */\n  function addMorphTargets(geometry, targets, parser) {\n    var hasMorphPosition = false;\n    var hasMorphNormal = false;\n    for (var i = 0, il = targets.length; i < il; i++) {\n      var target = targets[i];\n      if (target.POSITION !== undefined) hasMorphPosition = true;\n      if (target.NORMAL !== undefined) hasMorphNormal = true;\n      if (hasMorphPosition && hasMorphNormal) break;\n    }\n    if (!hasMorphPosition && !hasMorphNormal) return Promise.resolve(geometry);\n    var pendingPositionAccessors = [];\n    var pendingNormalAccessors = [];\n    for (var i = 0, il = targets.length; i < il; i++) {\n      var target = targets[i];\n      if (hasMorphPosition) {\n        var pendingAccessor = target.POSITION !== undefined ? parser.getDependency('accessor', target.POSITION) : geometry.attributes.position;\n        pendingPositionAccessors.push(pendingAccessor);\n      }\n      if (hasMorphNormal) {\n        var pendingAccessor = target.NORMAL !== undefined ? parser.getDependency('accessor', target.NORMAL) : geometry.attributes.normal;\n        pendingNormalAccessors.push(pendingAccessor);\n      }\n    }\n    return Promise.all([Promise.all(pendingPositionAccessors), Promise.all(pendingNormalAccessors)]).then(function (accessors) {\n      var morphPositions = accessors[0];\n      var morphNormals = accessors[1];\n      if (hasMorphPosition) geometry.morphAttributes.position = morphPositions;\n      if (hasMorphNormal) geometry.morphAttributes.normal = morphNormals;\n      geometry.morphTargetsRelative = true;\n      return geometry;\n    });\n  }\n\n  /**\n   * @param {THREE.Mesh} mesh\n   * @param {GLTF.Mesh} meshDef\n   */\n  function updateMorphTargets(mesh, meshDef) {\n    mesh.updateMorphTargets();\n    if (meshDef.weights !== undefined) {\n      for (var i = 0, il = meshDef.weights.length; i < il; i++) {\n        mesh.morphTargetInfluences[i] = meshDef.weights[i];\n      }\n    }\n\n    // .extras has user-defined data, so check that .extras.targetNames is an array.\n    if (meshDef.extras && Array.isArray(meshDef.extras.targetNames)) {\n      var targetNames = meshDef.extras.targetNames;\n      if (mesh.morphTargetInfluences.length === targetNames.length) {\n        mesh.morphTargetDictionary = {};\n        for (var i = 0, il = targetNames.length; i < il; i++) {\n          mesh.morphTargetDictionary[targetNames[i]] = i;\n        }\n      } else {\n        console.warn('THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.');\n      }\n    }\n  }\n  function createPrimitiveKey(primitiveDef) {\n    var dracoExtension = primitiveDef.extensions && primitiveDef.extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION];\n    var geometryKey;\n    if (dracoExtension) {\n      geometryKey = 'draco:' + dracoExtension.bufferView + ':' + dracoExtension.indices + ':' + createAttributesKey(dracoExtension.attributes);\n    } else {\n      geometryKey = primitiveDef.indices + ':' + createAttributesKey(primitiveDef.attributes) + ':' + primitiveDef.mode;\n    }\n    return geometryKey;\n  }\n  function createAttributesKey(attributes) {\n    var attributesKey = '';\n    var keys = Object.keys(attributes).sort();\n    for (var i = 0, il = keys.length; i < il; i++) {\n      attributesKey += keys[i] + ':' + attributes[keys[i]] + ';';\n    }\n    return attributesKey;\n  }\n\n  /* GLTF PARSER */\n\n  function GLTFParser(json, extensions, options) {\n    this.json = json || {};\n    this.extensions = extensions || {};\n    this.options = options || {};\n\n    // loader object cache\n    this.cache = new GLTFRegistry();\n\n    // BufferGeometry caching\n    this.primitiveCache = {};\n    this.textureLoader = new THREE.TextureLoader(this.options.manager);\n    this.textureLoader.setCrossOrigin(this.options.crossOrigin);\n    this.fileLoader = new THREE.FileLoader(this.options.manager);\n    this.fileLoader.setResponseType('arraybuffer');\n    if (this.options.crossOrigin === 'use-credentials') {\n      this.fileLoader.setWithCredentials(true);\n    }\n  }\n  GLTFParser.prototype.parse = function (onLoad, onError) {\n    var parser = this;\n    var json = this.json;\n    var extensions = this.extensions;\n\n    // Clear the loader cache\n    this.cache.removeAll();\n\n    // Mark the special nodes/meshes in json for efficient parse\n    this.markDefs();\n    Promise.all([this.getDependencies('scene'), this.getDependencies('animation'), this.getDependencies('camera')]).then(function (dependencies) {\n      var result = {\n        scene: dependencies[0][json.scene || 0],\n        scenes: dependencies[0],\n        animations: dependencies[1],\n        cameras: dependencies[2],\n        asset: json.asset,\n        parser: parser,\n        userData: {}\n      };\n      addUnknownExtensionsToUserData(extensions, result, json);\n      assignExtrasToUserData(result, json);\n      onLoad(result);\n    }).catch(onError);\n  };\n\n  /**\n   * Marks the special nodes/meshes in json for efficient parse.\n   */\n  GLTFParser.prototype.markDefs = function () {\n    var nodeDefs = this.json.nodes || [];\n    var skinDefs = this.json.skins || [];\n    var meshDefs = this.json.meshes || [];\n    var meshReferences = {};\n    var meshUses = {};\n\n    // Nothing in the node definition indicates whether it is a Bone or an\n    // Object3D. Use the skins' joint references to mark bones.\n    for (var skinIndex = 0, skinLength = skinDefs.length; skinIndex < skinLength; skinIndex++) {\n      var joints = skinDefs[skinIndex].joints;\n      for (var i = 0, il = joints.length; i < il; i++) {\n        nodeDefs[joints[i]].isBone = true;\n      }\n    }\n\n    // Meshes can (and should) be reused by multiple nodes in a glTF asset. To\n    // avoid having more than one THREE.Mesh with the same name, count\n    // references and rename instances below.\n    //\n    // Example: CesiumMilkTruck sample model reuses \"Wheel\" meshes.\n    for (var nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex++) {\n      var nodeDef = nodeDefs[nodeIndex];\n      if (nodeDef.mesh !== undefined) {\n        if (meshReferences[nodeDef.mesh] === undefined) {\n          meshReferences[nodeDef.mesh] = meshUses[nodeDef.mesh] = 0;\n        }\n        meshReferences[nodeDef.mesh]++;\n\n        // Nothing in the mesh definition indicates whether it is\n        // a SkinnedMesh or Mesh. Use the node's mesh reference\n        // to mark SkinnedMesh if node has skin.\n        if (nodeDef.skin !== undefined) {\n          meshDefs[nodeDef.mesh].isSkinnedMesh = true;\n        }\n      }\n    }\n    this.json.meshReferences = meshReferences;\n    this.json.meshUses = meshUses;\n  };\n\n  /**\n   * Requests the specified dependency asynchronously, with caching.\n   * @param {string} type\n   * @param {number} index\n   * @return {Promise<THREE.Object3D|THREE.Material|THREE.Texture|THREE.AnimationClip|ArrayBuffer|Object>}\n   */\n  GLTFParser.prototype.getDependency = function (type, index) {\n    var cacheKey = type + ':' + index;\n    var dependency = this.cache.get(cacheKey);\n    if (!dependency) {\n      switch (type) {\n        case 'scene':\n          dependency = this.loadScene(index);\n          break;\n        case 'node':\n          dependency = this.loadNode(index);\n          break;\n        case 'mesh':\n          dependency = this.loadMesh(index);\n          break;\n        case 'accessor':\n          dependency = this.loadAccessor(index);\n          break;\n        case 'bufferView':\n          dependency = this.loadBufferView(index);\n          break;\n        case 'buffer':\n          dependency = this.loadBuffer(index);\n          break;\n        case 'material':\n          dependency = this.loadMaterial(index);\n          break;\n        case 'texture':\n          dependency = this.loadTexture(index);\n          break;\n        case 'skin':\n          dependency = this.loadSkin(index);\n          break;\n        case 'animation':\n          dependency = this.loadAnimation(index);\n          break;\n        case 'camera':\n          dependency = this.loadCamera(index);\n          break;\n        case 'light':\n          dependency = this.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].loadLight(index);\n          break;\n        default:\n          throw new Error('Unknown type: ' + type);\n      }\n      this.cache.add(cacheKey, dependency);\n    }\n    return dependency;\n  };\n\n  /**\n   * Requests all dependencies of the specified type asynchronously, with caching.\n   * @param {string} type\n   * @return {Promise<Array<Object>>}\n   */\n  GLTFParser.prototype.getDependencies = function (type) {\n    var dependencies = this.cache.get(type);\n    if (!dependencies) {\n      var parser = this;\n      var defs = this.json[type + (type === 'mesh' ? 'es' : 's')] || [];\n      dependencies = Promise.all(defs.map(function (def, index) {\n        return parser.getDependency(type, index);\n      }));\n      this.cache.add(type, dependencies);\n    }\n    return dependencies;\n  };\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views\n   * @param {number} bufferIndex\n   * @return {Promise<ArrayBuffer>}\n   */\n  GLTFParser.prototype.loadBuffer = function (bufferIndex) {\n    var bufferDef = this.json.buffers[bufferIndex];\n    var loader = this.fileLoader;\n    if (bufferDef.type && bufferDef.type !== 'arraybuffer') {\n      throw new Error('THREE.GLTFLoader: ' + bufferDef.type + ' buffer type is not supported.');\n    }\n\n    // If present, GLB container is required to be the first buffer.\n    if (bufferDef.uri === undefined && bufferIndex === 0) {\n      return Promise.resolve(this.extensions[EXTENSIONS.KHR_BINARY_GLTF].body);\n    }\n    var options = this.options;\n    return new Promise(function (resolve, reject) {\n      loader.load(resolveURL(bufferDef.uri, options.path), resolve, undefined, function () {\n        reject(new Error('THREE.GLTFLoader: Failed to load buffer \"' + bufferDef.uri + '\".'));\n      });\n    });\n  };\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views\n   * @param {number} bufferViewIndex\n   * @return {Promise<ArrayBuffer>}\n   */\n  GLTFParser.prototype.loadBufferView = function (bufferViewIndex) {\n    var bufferViewDef = this.json.bufferViews[bufferViewIndex];\n    return this.getDependency('buffer', bufferViewDef.buffer).then(function (buffer) {\n      var byteLength = bufferViewDef.byteLength || 0;\n      var byteOffset = bufferViewDef.byteOffset || 0;\n      return buffer.slice(byteOffset, byteOffset + byteLength);\n    });\n  };\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#accessors\n   * @param {number} accessorIndex\n   * @return {Promise<THREE.BufferAttribute|THREE.InterleavedBufferAttribute>}\n   */\n  GLTFParser.prototype.loadAccessor = function (accessorIndex) {\n    var parser = this;\n    var json = this.json;\n    var accessorDef = this.json.accessors[accessorIndex];\n    if (accessorDef.bufferView === undefined && accessorDef.sparse === undefined) {\n      // Ignore empty accessors, which may be used to declare runtime\n      // information about attributes coming from another source (e.g. Draco\n      // compression extension).\n      return Promise.resolve(null);\n    }\n    var pendingBufferViews = [];\n    if (accessorDef.bufferView !== undefined) {\n      pendingBufferViews.push(this.getDependency('bufferView', accessorDef.bufferView));\n    } else {\n      pendingBufferViews.push(null);\n    }\n    if (accessorDef.sparse !== undefined) {\n      pendingBufferViews.push(this.getDependency('bufferView', accessorDef.sparse.indices.bufferView));\n      pendingBufferViews.push(this.getDependency('bufferView', accessorDef.sparse.values.bufferView));\n    }\n    return Promise.all(pendingBufferViews).then(function (bufferViews) {\n      var bufferView = bufferViews[0];\n      var itemSize = WEBGL_TYPE_SIZES[accessorDef.type];\n      var TypedArray = WEBGL_COMPONENT_TYPES[accessorDef.componentType];\n\n      // For VEC3: itemSize is 3, elementBytes is 4, itemBytes is 12.\n      var elementBytes = TypedArray.BYTES_PER_ELEMENT;\n      var itemBytes = elementBytes * itemSize;\n      var byteOffset = accessorDef.byteOffset || 0;\n      var byteStride = accessorDef.bufferView !== undefined ? json.bufferViews[accessorDef.bufferView].byteStride : undefined;\n      var normalized = accessorDef.normalized === true;\n      var array, bufferAttribute;\n\n      // The buffer is not interleaved if the stride is the item size in bytes.\n      if (byteStride && byteStride !== itemBytes) {\n        // Each \"slice\" of the buffer, as defined by 'count' elements of 'byteStride' bytes, gets its own InterleavedBuffer\n        // This makes sure that IBA.count reflects accessor.count properly\n        var ibSlice = Math.floor(byteOffset / byteStride);\n        var ibCacheKey = 'InterleavedBuffer:' + accessorDef.bufferView + ':' + accessorDef.componentType + ':' + ibSlice + ':' + accessorDef.count;\n        var ib = parser.cache.get(ibCacheKey);\n        if (!ib) {\n          array = new TypedArray(bufferView, ibSlice * byteStride, accessorDef.count * byteStride / elementBytes);\n\n          // Integer parameters to IB/IBA are in array elements, not bytes.\n          ib = new THREE.InterleavedBuffer(array, byteStride / elementBytes);\n          parser.cache.add(ibCacheKey, ib);\n        }\n        bufferAttribute = new THREE.InterleavedBufferAttribute(ib, itemSize, byteOffset % byteStride / elementBytes, normalized);\n      } else {\n        if (bufferView === null) {\n          array = new TypedArray(accessorDef.count * itemSize);\n        } else {\n          array = new TypedArray(bufferView, byteOffset, accessorDef.count * itemSize);\n        }\n        bufferAttribute = new THREE.BufferAttribute(array, itemSize, normalized);\n      }\n\n      // https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#sparse-accessors\n      if (accessorDef.sparse !== undefined) {\n        var itemSizeIndices = WEBGL_TYPE_SIZES.SCALAR;\n        var TypedArrayIndices = WEBGL_COMPONENT_TYPES[accessorDef.sparse.indices.componentType];\n        var byteOffsetIndices = accessorDef.sparse.indices.byteOffset || 0;\n        var byteOffsetValues = accessorDef.sparse.values.byteOffset || 0;\n        var sparseIndices = new TypedArrayIndices(bufferViews[1], byteOffsetIndices, accessorDef.sparse.count * itemSizeIndices);\n        var sparseValues = new TypedArray(bufferViews[2], byteOffsetValues, accessorDef.sparse.count * itemSize);\n        if (bufferView !== null) {\n          // Avoid modifying the original ArrayBuffer, if the bufferView wasn't initialized with zeroes.\n          bufferAttribute = new THREE.BufferAttribute(bufferAttribute.array.slice(), bufferAttribute.itemSize, bufferAttribute.normalized);\n        }\n        for (var i = 0, il = sparseIndices.length; i < il; i++) {\n          var index = sparseIndices[i];\n          bufferAttribute.setX(index, sparseValues[i * itemSize]);\n          if (itemSize >= 2) bufferAttribute.setY(index, sparseValues[i * itemSize + 1]);\n          if (itemSize >= 3) bufferAttribute.setZ(index, sparseValues[i * itemSize + 2]);\n          if (itemSize >= 4) bufferAttribute.setW(index, sparseValues[i * itemSize + 3]);\n          if (itemSize >= 5) throw new Error('THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.');\n        }\n      }\n      return bufferAttribute;\n    });\n  };\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#textures\n   * @param {number} textureIndex\n   * @return {Promise<THREE.Texture>}\n   */\n  GLTFParser.prototype.loadTexture = function (textureIndex) {\n    var parser = this;\n    var json = this.json;\n    var options = this.options;\n    var textureLoader = this.textureLoader;\n    var URL = window.URL || window.webkitURL;\n    var textureDef = json.textures[textureIndex];\n    var textureExtensions = textureDef.extensions || {};\n    var source;\n    if (textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS]) {\n      source = json.images[textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS].source];\n    } else {\n      source = json.images[textureDef.source];\n    }\n    var sourceURI = source.uri;\n    var isObjectURL = false;\n    if (source.bufferView !== undefined) {\n      // Load binary image data from bufferView, if provided.\n\n      sourceURI = parser.getDependency('bufferView', source.bufferView).then(function (bufferView) {\n        isObjectURL = true;\n        var blob = new Blob([bufferView], {\n          type: source.mimeType\n        });\n        sourceURI = URL.createObjectURL(blob);\n        return sourceURI;\n      });\n    }\n    return Promise.resolve(sourceURI).then(function (sourceURI) {\n      // Load Texture resource.\n\n      var loader = options.manager.getHandler(sourceURI);\n      if (!loader) {\n        loader = textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS] ? parser.extensions[EXTENSIONS.MSFT_TEXTURE_DDS].ddsLoader : textureLoader;\n      }\n      return new Promise(function (resolve, reject) {\n        loader.load(resolveURL(sourceURI, options.path), resolve, undefined, reject);\n      });\n    }).then(function (texture) {\n      // Clean up resources and configure Texture.\n\n      if (isObjectURL === true) {\n        URL.revokeObjectURL(sourceURI);\n      }\n      texture.flipY = false;\n      if (textureDef.name !== undefined) texture.name = textureDef.name;\n\n      // Ignore unknown mime types, like DDS files.\n      if (source.mimeType in MIME_TYPE_FORMATS) {\n        texture.format = MIME_TYPE_FORMATS[source.mimeType];\n      }\n      var samplers = json.samplers || {};\n      var sampler = samplers[textureDef.sampler] || {};\n      texture.magFilter = WEBGL_FILTERS[sampler.magFilter] || THREE.LinearFilter;\n      texture.minFilter = WEBGL_FILTERS[sampler.minFilter] || THREE.LinearMipmapLinearFilter;\n      texture.wrapS = WEBGL_WRAPPINGS[sampler.wrapS] || THREE.RepeatWrapping;\n      texture.wrapT = WEBGL_WRAPPINGS[sampler.wrapT] || THREE.RepeatWrapping;\n      return texture;\n    });\n  };\n\n  /**\n   * Asynchronously assigns a texture to the given material parameters.\n   * @param {Object} materialParams\n   * @param {string} mapName\n   * @param {Object} mapDef\n   * @return {Promise}\n   */\n  GLTFParser.prototype.assignTexture = function (materialParams, mapName, mapDef) {\n    var parser = this;\n    return this.getDependency('texture', mapDef.index).then(function (texture) {\n      if (!texture.isCompressedTexture) {\n        switch (mapName) {\n          case 'aoMap':\n          case 'emissiveMap':\n          case 'metalnessMap':\n          case 'normalMap':\n          case 'roughnessMap':\n            texture.format = THREE.RGBFormat;\n            break;\n        }\n      }\n      if (parser.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM]) {\n        var transform = mapDef.extensions !== undefined ? mapDef.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\n        if (transform) {\n          texture = parser.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM].extendTexture(texture, transform);\n        }\n      }\n      materialParams[mapName] = texture;\n    });\n  };\n\n  /**\n   * Assigns final material to a Mesh, Line, or Points instance. The instance\n   * already has a material (generated from the glTF material options alone)\n   * but reuse of the same glTF material may require multiple threejs materials\n   * to accomodate different primitive types, defines, etc. New materials will\n   * be created if necessary, and reused from a cache.\n   * @param  {THREE.Object3D} mesh Mesh, Line, or Points instance.\n   */\n  GLTFParser.prototype.assignFinalMaterial = function (mesh) {\n    var geometry = mesh.geometry;\n    var material = mesh.material;\n    var extensions = this.extensions;\n    var useVertexTangents = geometry.attributes.tangent !== undefined;\n    var useVertexColors = geometry.attributes.color !== undefined;\n    var useFlatShading = geometry.attributes.normal === undefined;\n    var useSkinning = mesh.isSkinnedMesh === true;\n    var useMorphTargets = Object.keys(geometry.morphAttributes).length > 0;\n    var useMorphNormals = useMorphTargets && geometry.morphAttributes.normal !== undefined;\n    if (mesh.isPoints) {\n      var cacheKey = 'PointsMaterial:' + material.uuid;\n      var pointsMaterial = this.cache.get(cacheKey);\n      if (!pointsMaterial) {\n        pointsMaterial = new THREE.PointsMaterial();\n        THREE.Material.prototype.copy.call(pointsMaterial, material);\n        pointsMaterial.color.copy(material.color);\n        pointsMaterial.map = material.map;\n        pointsMaterial.sizeAttenuation = false; // glTF spec says points should be 1px\n\n        this.cache.add(cacheKey, pointsMaterial);\n      }\n      material = pointsMaterial;\n    } else if (mesh.isLine) {\n      var cacheKey = 'LineBasicMaterial:' + material.uuid;\n      var lineMaterial = this.cache.get(cacheKey);\n      if (!lineMaterial) {\n        lineMaterial = new THREE.LineBasicMaterial();\n        THREE.Material.prototype.copy.call(lineMaterial, material);\n        lineMaterial.color.copy(material.color);\n        this.cache.add(cacheKey, lineMaterial);\n      }\n      material = lineMaterial;\n    }\n\n    // Clone the material if it will be modified\n    if (useVertexTangents || useVertexColors || useFlatShading || useSkinning || useMorphTargets) {\n      var cacheKey = 'ClonedMaterial:' + material.uuid + ':';\n      if (material.isGLTFSpecularGlossinessMaterial) cacheKey += 'specular-glossiness:';\n      if (useSkinning) cacheKey += 'skinning:';\n      if (useVertexTangents) cacheKey += 'vertex-tangents:';\n      if (useVertexColors) cacheKey += 'vertex-colors:';\n      if (useFlatShading) cacheKey += 'flat-shading:';\n      if (useMorphTargets) cacheKey += 'morph-targets:';\n      if (useMorphNormals) cacheKey += 'morph-normals:';\n      var cachedMaterial = this.cache.get(cacheKey);\n      if (!cachedMaterial) {\n        cachedMaterial = material.isGLTFSpecularGlossinessMaterial ? extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].cloneMaterial(material) : material.clone();\n        if (useSkinning) cachedMaterial.skinning = true;\n        if (useVertexTangents) cachedMaterial.vertexTangents = true;\n        if (useVertexColors) cachedMaterial.vertexColors = THREE.VertexColors;\n        if (useFlatShading) cachedMaterial.flatShading = true;\n        if (useMorphTargets) cachedMaterial.morphTargets = true;\n        if (useMorphNormals) cachedMaterial.morphNormals = true;\n        this.cache.add(cacheKey, cachedMaterial);\n      }\n      material = cachedMaterial;\n    }\n\n    // workarounds for mesh and geometry\n\n    if (material.aoMap && geometry.attributes.uv2 === undefined && geometry.attributes.uv !== undefined) {\n      console.log('THREE.GLTFLoader: Duplicating UVs to support aoMap.');\n      geometry.setAttribute('uv2', new THREE.BufferAttribute(geometry.attributes.uv.array, 2));\n    }\n    if (material.isGLTFSpecularGlossinessMaterial) {\n      // for GLTFSpecularGlossinessMaterial(ShaderMaterial) uniforms runtime update\n      mesh.onBeforeRender = extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].refreshUniforms;\n    }\n    mesh.material = material;\n  };\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#materials\n   * @param {number} materialIndex\n   * @return {Promise<THREE.Material>}\n   */\n  GLTFParser.prototype.loadMaterial = function (materialIndex) {\n    var parser = this;\n    var json = this.json;\n    var extensions = this.extensions;\n    var materialDef = json.materials[materialIndex];\n    var materialType;\n    var materialParams = {};\n    var materialExtensions = materialDef.extensions || {};\n    var pending = [];\n    if (materialExtensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]) {\n      var sgExtension = extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];\n      materialType = sgExtension.getMaterialType();\n      pending.push(sgExtension.extendParams(materialParams, materialDef, parser));\n    } else if (materialExtensions[EXTENSIONS.KHR_MATERIALS_UNLIT]) {\n      var kmuExtension = extensions[EXTENSIONS.KHR_MATERIALS_UNLIT];\n      materialType = kmuExtension.getMaterialType();\n      pending.push(kmuExtension.extendParams(materialParams, materialDef, parser));\n    } else {\n      // Specification:\n      // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#metallic-roughness-material\n\n      materialType = THREE.MeshStandardMaterial;\n      var metallicRoughness = materialDef.pbrMetallicRoughness || {};\n      materialParams.color = new THREE.Color(1.0, 1.0, 1.0);\n      materialParams.opacity = 1.0;\n      if (Array.isArray(metallicRoughness.baseColorFactor)) {\n        var array = metallicRoughness.baseColorFactor;\n        materialParams.color.fromArray(array);\n        materialParams.opacity = array[3];\n      }\n      if (metallicRoughness.baseColorTexture !== undefined) {\n        pending.push(parser.assignTexture(materialParams, 'map', metallicRoughness.baseColorTexture));\n      }\n      materialParams.metalness = metallicRoughness.metallicFactor !== undefined ? metallicRoughness.metallicFactor : 1.0;\n      materialParams.roughness = metallicRoughness.roughnessFactor !== undefined ? metallicRoughness.roughnessFactor : 1.0;\n      if (metallicRoughness.metallicRoughnessTexture !== undefined) {\n        pending.push(parser.assignTexture(materialParams, 'metalnessMap', metallicRoughness.metallicRoughnessTexture));\n        pending.push(parser.assignTexture(materialParams, 'roughnessMap', metallicRoughness.metallicRoughnessTexture));\n      }\n    }\n    if (materialDef.doubleSided === true) {\n      materialParams.side = THREE.DoubleSide;\n    }\n    var alphaMode = materialDef.alphaMode || ALPHA_MODES.OPAQUE;\n    if (alphaMode === ALPHA_MODES.BLEND) {\n      materialParams.transparent = true;\n    } else {\n      materialParams.transparent = false;\n      if (alphaMode === ALPHA_MODES.MASK) {\n        materialParams.alphaTest = materialDef.alphaCutoff !== undefined ? materialDef.alphaCutoff : 0.5;\n      }\n    }\n    if (materialDef.normalTexture !== undefined && materialType !== THREE.MeshBasicMaterial) {\n      pending.push(parser.assignTexture(materialParams, 'normalMap', materialDef.normalTexture));\n      materialParams.normalScale = new THREE.Vector2(1, 1);\n      if (materialDef.normalTexture.scale !== undefined) {\n        materialParams.normalScale.set(materialDef.normalTexture.scale, materialDef.normalTexture.scale);\n      }\n    }\n    if (materialDef.occlusionTexture !== undefined && materialType !== THREE.MeshBasicMaterial) {\n      pending.push(parser.assignTexture(materialParams, 'aoMap', materialDef.occlusionTexture));\n      if (materialDef.occlusionTexture.strength !== undefined) {\n        materialParams.aoMapIntensity = materialDef.occlusionTexture.strength;\n      }\n    }\n    if (materialDef.emissiveFactor !== undefined && materialType !== THREE.MeshBasicMaterial) {\n      materialParams.emissive = new THREE.Color().fromArray(materialDef.emissiveFactor);\n    }\n    if (materialDef.emissiveTexture !== undefined && materialType !== THREE.MeshBasicMaterial) {\n      pending.push(parser.assignTexture(materialParams, 'emissiveMap', materialDef.emissiveTexture));\n    }\n    return Promise.all(pending).then(function () {\n      var material;\n      if (materialType === THREE.ShaderMaterial) {\n        material = extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(materialParams);\n      } else {\n        material = new materialType(materialParams);\n      }\n      if (materialDef.name !== undefined) material.name = materialDef.name;\n\n      // baseColorTexture, emissiveTexture, and specularGlossinessTexture use sRGB encoding.\n      if (material.map) material.map.encoding = THREE.sRGBEncoding;\n      if (material.emissiveMap) material.emissiveMap.encoding = THREE.sRGBEncoding;\n      if (material.specularMap) material.specularMap.encoding = THREE.sRGBEncoding;\n      assignExtrasToUserData(material, materialDef);\n      if (materialDef.extensions) addUnknownExtensionsToUserData(extensions, material, materialDef);\n      return material;\n    });\n  };\n\n  /**\n   * @param {THREE.BufferGeometry} geometry\n   * @param {GLTF.Primitive} primitiveDef\n   * @param {GLTFParser} parser\n   */\n  function computeBounds(geometry, primitiveDef, parser) {\n    var attributes = primitiveDef.attributes;\n    var box = new THREE.Box3();\n    if (attributes.POSITION !== undefined) {\n      var accessor = parser.json.accessors[attributes.POSITION];\n      var min = accessor.min;\n      var max = accessor.max;\n      box.set(new THREE.Vector3(min[0], min[1], min[2]), new THREE.Vector3(max[0], max[1], max[2]));\n    } else {\n      return;\n    }\n    var targets = primitiveDef.targets;\n    if (targets !== undefined) {\n      var vector = new THREE.Vector3();\n      for (var i = 0, il = targets.length; i < il; i++) {\n        var target = targets[i];\n        if (target.POSITION !== undefined) {\n          var accessor = parser.json.accessors[target.POSITION];\n          var min = accessor.min;\n          var max = accessor.max;\n\n          // we need to get max of absolute components because target weight is [-1,1]\n          vector.setX(Math.max(Math.abs(min[0]), Math.abs(max[0])));\n          vector.setY(Math.max(Math.abs(min[1]), Math.abs(max[1])));\n          vector.setZ(Math.max(Math.abs(min[2]), Math.abs(max[2])));\n          box.expandByVector(vector);\n        }\n      }\n    }\n    geometry.boundingBox = box;\n    var sphere = new THREE.Sphere();\n    box.getCenter(sphere.center);\n    sphere.radius = box.min.distanceTo(box.max) / 2;\n    geometry.boundingSphere = sphere;\n  }\n\n  /**\n   * @param {THREE.BufferGeometry} geometry\n   * @param {GLTF.Primitive} primitiveDef\n   * @param {GLTFParser} parser\n   * @return {Promise<THREE.BufferGeometry>}\n   */\n  function addPrimitiveAttributes(geometry, primitiveDef, parser) {\n    var attributes = primitiveDef.attributes;\n    var pending = [];\n    function assignAttributeAccessor(accessorIndex, attributeName) {\n      return parser.getDependency('accessor', accessorIndex).then(function (accessor) {\n        geometry.setAttribute(attributeName, accessor);\n      });\n    }\n    for (var gltfAttributeName in attributes) {\n      var threeAttributeName = ATTRIBUTES[gltfAttributeName] || gltfAttributeName.toLowerCase();\n\n      // Skip attributes already provided by e.g. Draco extension.\n      if (threeAttributeName in geometry.attributes) continue;\n      pending.push(assignAttributeAccessor(attributes[gltfAttributeName], threeAttributeName));\n    }\n    if (primitiveDef.indices !== undefined && !geometry.index) {\n      var accessor = parser.getDependency('accessor', primitiveDef.indices).then(function (accessor) {\n        geometry.setIndex(accessor);\n      });\n      pending.push(accessor);\n    }\n    assignExtrasToUserData(geometry, primitiveDef);\n    computeBounds(geometry, primitiveDef, parser);\n    return Promise.all(pending).then(function () {\n      return primitiveDef.targets !== undefined ? addMorphTargets(geometry, primitiveDef.targets, parser) : geometry;\n    });\n  }\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#geometry\n   *\n   * Creates BufferGeometries from primitives.\n   *\n   * @param {Array<GLTF.Primitive>} primitives\n   * @return {Promise<Array<THREE.BufferGeometry>>}\n   */\n  GLTFParser.prototype.loadGeometries = function (primitives) {\n    var parser = this;\n    var extensions = this.extensions;\n    var cache = this.primitiveCache;\n    function createDracoPrimitive(primitive) {\n      return extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(primitive, parser).then(function (geometry) {\n        return addPrimitiveAttributes(geometry, primitive, parser);\n      });\n    }\n    var pending = [];\n    for (var i = 0, il = primitives.length; i < il; i++) {\n      var primitive = primitives[i];\n      var cacheKey = createPrimitiveKey(primitive);\n\n      // See if we've already created this geometry\n      var cached = cache[cacheKey];\n      if (cached) {\n        // Use the cached geometry if it exists\n        pending.push(cached.promise);\n      } else {\n        var geometryPromise;\n        if (primitive.extensions && primitive.extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION]) {\n          // Use DRACO geometry if available\n          geometryPromise = createDracoPrimitive(primitive);\n        } else {\n          // Otherwise create a new geometry\n          geometryPromise = addPrimitiveAttributes(new THREE.BufferGeometry(), primitive, parser);\n        }\n\n        // Cache this geometry\n        cache[cacheKey] = {\n          primitive: primitive,\n          promise: geometryPromise\n        };\n        pending.push(geometryPromise);\n      }\n    }\n    return Promise.all(pending);\n  };\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#meshes\n   * @param {number} meshIndex\n   * @return {Promise<THREE.Group|THREE.Mesh|THREE.SkinnedMesh>}\n   */\n  GLTFParser.prototype.loadMesh = function (meshIndex) {\n    var parser = this;\n    var json = this.json;\n    var meshDef = json.meshes[meshIndex];\n    var primitives = meshDef.primitives;\n    var pending = [];\n    for (var i = 0, il = primitives.length; i < il; i++) {\n      var material = primitives[i].material === undefined ? createDefaultMaterial() : this.getDependency('material', primitives[i].material);\n      pending.push(material);\n    }\n    return Promise.all(pending).then(function (originalMaterials) {\n      return parser.loadGeometries(primitives).then(function (geometries) {\n        var meshes = [];\n        for (var i = 0, il = geometries.length; i < il; i++) {\n          var geometry = geometries[i];\n          var primitive = primitives[i];\n\n          // 1. create Mesh\n\n          var mesh;\n          var material = originalMaterials[i];\n          if (primitive.mode === WEBGL_CONSTANTS.TRIANGLES || primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP || primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN || primitive.mode === undefined) {\n            // .isSkinnedMesh isn't in glTF spec. See .markDefs()\n            mesh = meshDef.isSkinnedMesh === true ? new THREE.SkinnedMesh(geometry, material) : new THREE.Mesh(geometry, material);\n            if (mesh.isSkinnedMesh === true && !mesh.geometry.attributes.skinWeight.normalized) {\n              // we normalize floating point skin weight array to fix malformed assets (see #15319)\n              // it's important to skip this for non-float32 data since normalizeSkinWeights assumes non-normalized inputs\n              mesh.normalizeSkinWeights();\n            }\n            if (primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP) {\n              mesh.drawMode = THREE.TriangleStripDrawMode;\n            } else if (primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN) {\n              mesh.drawMode = THREE.TriangleFanDrawMode;\n            }\n          } else if (primitive.mode === WEBGL_CONSTANTS.LINES) {\n            mesh = new THREE.LineSegments(geometry, material);\n          } else if (primitive.mode === WEBGL_CONSTANTS.LINE_STRIP) {\n            mesh = new THREE.Line(geometry, material);\n          } else if (primitive.mode === WEBGL_CONSTANTS.LINE_LOOP) {\n            mesh = new THREE.LineLoop(geometry, material);\n          } else if (primitive.mode === WEBGL_CONSTANTS.POINTS) {\n            mesh = new THREE.Points(geometry, material);\n          } else {\n            throw new Error('THREE.GLTFLoader: Primitive mode unsupported: ' + primitive.mode);\n          }\n          if (Object.keys(mesh.geometry.morphAttributes).length > 0) {\n            updateMorphTargets(mesh, meshDef);\n          }\n          mesh.name = meshDef.name || 'mesh_' + meshIndex;\n          if (geometries.length > 1) mesh.name += '_' + i;\n          assignExtrasToUserData(mesh, meshDef);\n          parser.assignFinalMaterial(mesh);\n          meshes.push(mesh);\n        }\n        if (meshes.length === 1) {\n          return meshes[0];\n        }\n        var group = new THREE.Group();\n        for (var i = 0, il = meshes.length; i < il; i++) {\n          group.add(meshes[i]);\n        }\n        return group;\n      });\n    });\n  };\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#cameras\n   * @param {number} cameraIndex\n   * @return {Promise<THREE.Camera>}\n   */\n  GLTFParser.prototype.loadCamera = function (cameraIndex) {\n    var camera;\n    var cameraDef = this.json.cameras[cameraIndex];\n    var params = cameraDef[cameraDef.type];\n    if (!params) {\n      console.warn('THREE.GLTFLoader: Missing camera parameters.');\n      return;\n    }\n    if (cameraDef.type === 'perspective') {\n      camera = new THREE.PerspectiveCamera(THREE.Math.radToDeg(params.yfov), params.aspectRatio || 1, params.znear || 1, params.zfar || 2e6);\n    } else if (cameraDef.type === 'orthographic') {\n      camera = new THREE.OrthographicCamera(params.xmag / -2, params.xmag / 2, params.ymag / 2, params.ymag / -2, params.znear, params.zfar);\n    }\n    if (cameraDef.name !== undefined) camera.name = cameraDef.name;\n    assignExtrasToUserData(camera, cameraDef);\n    return Promise.resolve(camera);\n  };\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins\n   * @param {number} skinIndex\n   * @return {Promise<Object>}\n   */\n  GLTFParser.prototype.loadSkin = function (skinIndex) {\n    var skinDef = this.json.skins[skinIndex];\n    var skinEntry = {\n      joints: skinDef.joints\n    };\n    if (skinDef.inverseBindMatrices === undefined) {\n      return Promise.resolve(skinEntry);\n    }\n    return this.getDependency('accessor', skinDef.inverseBindMatrices).then(function (accessor) {\n      skinEntry.inverseBindMatrices = accessor;\n      return skinEntry;\n    });\n  };\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#animations\n   * @param {number} animationIndex\n   * @return {Promise<THREE.AnimationClip>}\n   */\n  GLTFParser.prototype.loadAnimation = function (animationIndex) {\n    var json = this.json;\n    var animationDef = json.animations[animationIndex];\n    var pendingNodes = [];\n    var pendingInputAccessors = [];\n    var pendingOutputAccessors = [];\n    var pendingSamplers = [];\n    var pendingTargets = [];\n    for (var i = 0, il = animationDef.channels.length; i < il; i++) {\n      var channel = animationDef.channels[i];\n      var sampler = animationDef.samplers[channel.sampler];\n      var target = channel.target;\n      var name = target.node !== undefined ? target.node : target.id; // NOTE: target.id is deprecated.\n      var input = animationDef.parameters !== undefined ? animationDef.parameters[sampler.input] : sampler.input;\n      var output = animationDef.parameters !== undefined ? animationDef.parameters[sampler.output] : sampler.output;\n      pendingNodes.push(this.getDependency('node', name));\n      pendingInputAccessors.push(this.getDependency('accessor', input));\n      pendingOutputAccessors.push(this.getDependency('accessor', output));\n      pendingSamplers.push(sampler);\n      pendingTargets.push(target);\n    }\n    return Promise.all([Promise.all(pendingNodes), Promise.all(pendingInputAccessors), Promise.all(pendingOutputAccessors), Promise.all(pendingSamplers), Promise.all(pendingTargets)]).then(function (dependencies) {\n      var nodes = dependencies[0];\n      var inputAccessors = dependencies[1];\n      var outputAccessors = dependencies[2];\n      var samplers = dependencies[3];\n      var targets = dependencies[4];\n      var tracks = [];\n      for (var i = 0, il = nodes.length; i < il; i++) {\n        var node = nodes[i];\n        var inputAccessor = inputAccessors[i];\n        var outputAccessor = outputAccessors[i];\n        var sampler = samplers[i];\n        var target = targets[i];\n        if (node === undefined) continue;\n        node.updateMatrix();\n        node.matrixAutoUpdate = true;\n        var TypedKeyframeTrack;\n        switch (PATH_PROPERTIES[target.path]) {\n          case PATH_PROPERTIES.weights:\n            TypedKeyframeTrack = THREE.NumberKeyframeTrack;\n            break;\n          case PATH_PROPERTIES.rotation:\n            TypedKeyframeTrack = THREE.QuaternionKeyframeTrack;\n            break;\n          case PATH_PROPERTIES.position:\n          case PATH_PROPERTIES.scale:\n          default:\n            TypedKeyframeTrack = THREE.VectorKeyframeTrack;\n            break;\n        }\n        var targetName = node.name ? node.name : node.uuid;\n        var interpolation = sampler.interpolation !== undefined ? INTERPOLATION[sampler.interpolation] : THREE.InterpolateLinear;\n        var targetNames = [];\n        if (PATH_PROPERTIES[target.path] === PATH_PROPERTIES.weights) {\n          // Node may be a THREE.Group (glTF mesh with several primitives) or a THREE.Mesh.\n          node.traverse(function (object) {\n            if (object.isMesh === true && object.morphTargetInfluences) {\n              targetNames.push(object.name ? object.name : object.uuid);\n            }\n          });\n        } else {\n          targetNames.push(targetName);\n        }\n        var outputArray = outputAccessor.array;\n        if (outputAccessor.normalized) {\n          var scale;\n          if (outputArray.constructor === Int8Array) {\n            scale = 1 / 127;\n          } else if (outputArray.constructor === Uint8Array) {\n            scale = 1 / 255;\n          } else if (outputArray.constructor == Int16Array) {\n            scale = 1 / 32767;\n          } else if (outputArray.constructor === Uint16Array) {\n            scale = 1 / 65535;\n          } else {\n            throw new Error('THREE.GLTFLoader: Unsupported output accessor component type.');\n          }\n          var scaled = new Float32Array(outputArray.length);\n          for (var j = 0, jl = outputArray.length; j < jl; j++) {\n            scaled[j] = outputArray[j] * scale;\n          }\n          outputArray = scaled;\n        }\n        for (var j = 0, jl = targetNames.length; j < jl; j++) {\n          var track = new TypedKeyframeTrack(targetNames[j] + '.' + PATH_PROPERTIES[target.path], inputAccessor.array, outputArray, interpolation);\n\n          // Override interpolation with custom factory method.\n          if (sampler.interpolation === 'CUBICSPLINE') {\n            track.createInterpolant = function InterpolantFactoryMethodGLTFCubicSpline(result) {\n              // A CUBICSPLINE keyframe in glTF has three output values for each input value,\n              // representing inTangent, splineVertex, and outTangent. As a result, track.getValueSize()\n              // must be divided by three to get the interpolant's sampleSize argument.\n\n              return new GLTFCubicSplineInterpolant(this.times, this.values, this.getValueSize() / 3, result);\n            };\n\n            // Mark as CUBICSPLINE. `track.getInterpolation()` doesn't support custom interpolants.\n            track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline = true;\n          }\n          tracks.push(track);\n        }\n      }\n      var name = animationDef.name !== undefined ? animationDef.name : 'animation_' + animationIndex;\n      return new THREE.AnimationClip(name, undefined, tracks);\n    });\n  };\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#nodes-and-hierarchy\n   * @param {number} nodeIndex\n   * @return {Promise<THREE.Object3D>}\n   */\n  GLTFParser.prototype.loadNode = function (nodeIndex) {\n    var json = this.json;\n    var extensions = this.extensions;\n    var parser = this;\n    var meshReferences = json.meshReferences;\n    var meshUses = json.meshUses;\n    var nodeDef = json.nodes[nodeIndex];\n    return function () {\n      var pending = [];\n      if (nodeDef.mesh !== undefined) {\n        pending.push(parser.getDependency('mesh', nodeDef.mesh).then(function (mesh) {\n          var node;\n          if (meshReferences[nodeDef.mesh] > 1) {\n            var instanceNum = meshUses[nodeDef.mesh]++;\n            node = mesh.clone();\n            node.name += '_instance_' + instanceNum;\n\n            // onBeforeRender copy for Specular-Glossiness\n            node.onBeforeRender = mesh.onBeforeRender;\n            for (var i = 0, il = node.children.length; i < il; i++) {\n              node.children[i].name += '_instance_' + instanceNum;\n              node.children[i].onBeforeRender = mesh.children[i].onBeforeRender;\n            }\n          } else {\n            node = mesh;\n          }\n\n          // if weights are provided on the node, override weights on the mesh.\n          if (nodeDef.weights !== undefined) {\n            node.traverse(function (o) {\n              if (!o.isMesh) return;\n              for (var i = 0, il = nodeDef.weights.length; i < il; i++) {\n                o.morphTargetInfluences[i] = nodeDef.weights[i];\n              }\n            });\n          }\n          return node;\n        }));\n      }\n      if (nodeDef.camera !== undefined) {\n        pending.push(parser.getDependency('camera', nodeDef.camera));\n      }\n      if (nodeDef.extensions && nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL] && nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].light !== undefined) {\n        pending.push(parser.getDependency('light', nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].light));\n      }\n      return Promise.all(pending);\n    }().then(function (objects) {\n      var node;\n\n      // .isBone isn't in glTF spec. See .markDefs\n      if (nodeDef.isBone === true) {\n        node = new THREE.Bone();\n      } else if (objects.length > 1) {\n        node = new THREE.Group();\n      } else if (objects.length === 1) {\n        node = objects[0];\n      } else {\n        node = new THREE.Object3D();\n      }\n      if (node !== objects[0]) {\n        for (var i = 0, il = objects.length; i < il; i++) {\n          node.add(objects[i]);\n        }\n      }\n      if (nodeDef.name !== undefined) {\n        node.userData.name = nodeDef.name;\n        node.name = THREE.PropertyBinding.sanitizeNodeName(nodeDef.name);\n      }\n      assignExtrasToUserData(node, nodeDef);\n      if (nodeDef.extensions) addUnknownExtensionsToUserData(extensions, node, nodeDef);\n      if (nodeDef.matrix !== undefined) {\n        var matrix = new THREE.Matrix4();\n        matrix.fromArray(nodeDef.matrix);\n        node.applyMatrix(matrix);\n      } else {\n        if (nodeDef.translation !== undefined) {\n          node.position.fromArray(nodeDef.translation);\n        }\n        if (nodeDef.rotation !== undefined) {\n          node.quaternion.fromArray(nodeDef.rotation);\n        }\n        if (nodeDef.scale !== undefined) {\n          node.scale.fromArray(nodeDef.scale);\n        }\n      }\n      return node;\n    });\n  };\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#scenes\n   * @param {number} sceneIndex\n   * @return {Promise<THREE.Scene>}\n   */\n  GLTFParser.prototype.loadScene = function () {\n    // scene node hierachy builder\n\n    function buildNodeHierachy(nodeId, parentObject, json, parser) {\n      var nodeDef = json.nodes[nodeId];\n      return parser.getDependency('node', nodeId).then(function (node) {\n        if (nodeDef.skin === undefined) return node;\n\n        // build skeleton here as well\n\n        var skinEntry;\n        return parser.getDependency('skin', nodeDef.skin).then(function (skin) {\n          skinEntry = skin;\n          var pendingJoints = [];\n          for (var i = 0, il = skinEntry.joints.length; i < il; i++) {\n            pendingJoints.push(parser.getDependency('node', skinEntry.joints[i]));\n          }\n          return Promise.all(pendingJoints);\n        }).then(function (jointNodes) {\n          node.traverse(function (mesh) {\n            if (!mesh.isMesh) return;\n            var bones = [];\n            var boneInverses = [];\n            for (var j = 0, jl = jointNodes.length; j < jl; j++) {\n              var jointNode = jointNodes[j];\n              if (jointNode) {\n                bones.push(jointNode);\n                var mat = new THREE.Matrix4();\n                if (skinEntry.inverseBindMatrices !== undefined) {\n                  mat.fromArray(skinEntry.inverseBindMatrices.array, j * 16);\n                }\n                boneInverses.push(mat);\n              } else {\n                console.warn('THREE.GLTFLoader: Joint \"%s\" could not be found.', skinEntry.joints[j]);\n              }\n            }\n            mesh.bind(new THREE.Skeleton(bones, boneInverses), mesh.matrixWorld);\n          });\n          return node;\n        });\n      }).then(function (node) {\n        // build node hierachy\n\n        parentObject.add(node);\n        var pending = [];\n        if (nodeDef.children) {\n          var children = nodeDef.children;\n          for (var i = 0, il = children.length; i < il; i++) {\n            var child = children[i];\n            pending.push(buildNodeHierachy(child, node, json, parser));\n          }\n        }\n        return Promise.all(pending);\n      });\n    }\n    return function loadScene(sceneIndex) {\n      var json = this.json;\n      var extensions = this.extensions;\n      var sceneDef = this.json.scenes[sceneIndex];\n      var parser = this;\n      var scene = new THREE.Scene();\n      if (sceneDef.name !== undefined) scene.name = sceneDef.name;\n      assignExtrasToUserData(scene, sceneDef);\n      if (sceneDef.extensions) addUnknownExtensionsToUserData(extensions, scene, sceneDef);\n      var nodeIds = sceneDef.nodes || [];\n      var pending = [];\n      for (var i = 0, il = nodeIds.length; i < il; i++) {\n        pending.push(buildNodeHierachy(nodeIds[i], scene, json, parser));\n      }\n      return Promise.all(pending).then(function () {\n        return scene;\n      });\n    };\n  }();\n  return GLTFLoader;\n}();\nmodule.exports = _GLTFLoader;","map":{"version":3,"names":["THREE","require","_GLTFLoader","GLTFLoader","manager","Loader","call","dracoLoader","ddsLoader","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","resourcePath","path","LoaderUtils","extractUrlBase","itemStart","_onError","e","console","error","itemError","itemEnd","loader","FileLoader","setPath","setResponseType","crossOrigin","setWithCredentials","data","parse","gltf","setDRACOLoader","setDDSLoader","content","extensions","magic","decodeText","Uint8Array","BINARY_EXTENSION_HEADER_MAGIC","EXTENSIONS","KHR_BINARY_GLTF","GLTFBinaryExtension","json","JSON","asset","undefined","version","Error","extensionsUsed","i","length","extensionName","extensionsRequired","KHR_LIGHTS_PUNCTUAL","GLTFLightsExtension","KHR_MATERIALS_UNLIT","GLTFMaterialsUnlitExtension","KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS","GLTFMaterialsPbrSpecularGlossinessExtension","KHR_DRACO_MESH_COMPRESSION","GLTFDracoMeshCompressionExtension","MSFT_TEXTURE_DDS","GLTFTextureDDSExtension","KHR_TEXTURE_TRANSFORM","GLTFTextureTransformExtension","KHR_MESH_QUANTIZATION","GLTFMeshQuantizationExtension","indexOf","warn","parser","GLTFParser","GLTFRegistry","objects","get","key","add","object","remove","removeAll","name","extension","lightDefs","lights","loadLight","lightIndex","lightDef","lightNode","color","Color","fromArray","range","type","DirectionalLight","target","position","set","PointLight","distance","SpotLight","spot","innerConeAngle","outerConeAngle","Math","PI","angle","penumbra","decay","intensity","Promise","resolve","getMaterialType","MeshBasicMaterial","extendParams","materialParams","materialDef","pending","opacity","metallicRoughness","pbrMetallicRoughness","Array","isArray","baseColorFactor","array","baseColorTexture","push","assignTexture","all","BINARY_EXTENSION_HEADER_LENGTH","BINARY_EXTENSION_CHUNK_TYPES","BIN","body","headerView","DataView","header","slice","getUint32","chunkView","chunkIndex","byteLength","chunkLength","chunkType","contentArray","byteOffset","decodePrimitive","primitive","bufferViewIndex","bufferView","gltfAttributeMap","attributes","threeAttributeMap","attributeNormalizedMap","attributeTypeMap","attributeName","threeAttributeName","ATTRIBUTES","toLowerCase","accessorDef","accessors","componentType","WEBGL_COMPONENT_TYPES","normalized","getDependency","then","decodeDracoFile","geometry","attribute","extendTexture","texture","transform","clone","offset","rotation","scale","repeat","texCoord","needsUpdate","specularGlossinessParams","ShaderMaterial","pbrSpecularGlossiness","shader","ShaderLib","uniforms","UniformsUtils","specularMapParsFragmentChunk","join","glossinessMapParsFragmentChunk","specularMapFragmentChunk","glossinessMapFragmentChunk","lightPhysicalFragmentChunk","fragmentShader","replace","roughness","metalness","roughnessMap","metalnessMap","specular","value","setHex","glossiness","specularMap","glossinessMap","vertexShader","defines","diffuseFactor","diffuseTexture","emissive","glossinessFactor","specularFactor","specularGlossinessTexture","specGlossMapDef","createMaterial","params","material","fog","transparent","isGLTFSpecularGlossinessMaterial","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","emissiveIntensity","emissiveMap","bumpMap","bumpScale","normalMap","normalScale","displacementMap","displacementScale","displacementBias","alphaMap","envMap","envMapIntensity","refractionRatio","derivatives","cloneMaterial","source","il","isColor","refreshUniforms","renderer","scene","camera","diffuse","copy","multiplyScalar","uvScaleMap","isWebGLRenderTarget","matrixAutoUpdate","updateMatrix","uvTransform","matrix","flipEnvMap","isCubeTexture","reflectivity","maxMipLevel","properties","__maxMipLevel","USE_GLOSSINESSMAP","USE_ROUGHNESSMAP","GLTFCubicSplineInterpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","Interpolant","copySampleValue_","index","result","values","valueSize","beforeStart_","afterEnd_","interpolate_","i1","t0","t","t1","stride","stride2","stride3","td","p","pp","ppp","offset1","offset0","s2","s3","s0","s1","p0","m0","p1","m1","WEBGL_CONSTANTS","FLOAT","FLOAT_MAT3","FLOAT_MAT4","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","LINEAR","REPEAT","SAMPLER_2D","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","UNSIGNED_BYTE","UNSIGNED_SHORT","Int8Array","Int16Array","Uint16Array","Uint32Array","Float32Array","WEBGL_FILTERS","NearestFilter","LinearFilter","NearestMipmapNearestFilter","LinearMipmapNearestFilter","NearestMipmapLinearFilter","LinearMipmapLinearFilter","WEBGL_WRAPPINGS","ClampToEdgeWrapping","MirroredRepeatWrapping","RepeatWrapping","WEBGL_TYPE_SIZES","POSITION","NORMAL","TANGENT","TEXCOORD_0","TEXCOORD_1","COLOR_0","WEIGHTS_0","JOINTS_0","PATH_PROPERTIES","translation","weights","INTERPOLATION","CUBICSPLINE","InterpolateLinear","STEP","InterpolateDiscrete","ALPHA_MODES","OPAQUE","MASK","BLEND","MIME_TYPE_FORMATS","RGBAFormat","RGBFormat","resolveURL","test","defaultMaterial","createDefaultMaterial","MeshStandardMaterial","depthTest","side","FrontSide","addUnknownExtensionsToUserData","knownExtensions","objectDef","userData","gltfExtensions","assignExtrasToUserData","gltfDef","extras","addMorphTargets","targets","hasMorphPosition","hasMorphNormal","pendingPositionAccessors","pendingNormalAccessors","pendingAccessor","normal","morphPositions","morphNormals","morphAttributes","morphTargetsRelative","updateMorphTargets","mesh","meshDef","morphTargetInfluences","targetNames","morphTargetDictionary","createPrimitiveKey","primitiveDef","dracoExtension","geometryKey","indices","createAttributesKey","mode","attributesKey","keys","sort","options","cache","primitiveCache","textureLoader","TextureLoader","setCrossOrigin","fileLoader","markDefs","getDependencies","dependencies","scenes","animations","cameras","catch","nodeDefs","nodes","skinDefs","skins","meshDefs","meshes","meshReferences","meshUses","skinIndex","skinLength","joints","isBone","nodeIndex","nodeLength","nodeDef","skin","isSkinnedMesh","cacheKey","dependency","loadScene","loadNode","loadMesh","loadAccessor","loadBufferView","loadBuffer","loadMaterial","loadTexture","loadSkin","loadAnimation","loadCamera","defs","def","bufferIndex","bufferDef","buffers","uri","reject","bufferViewDef","bufferViews","buffer","accessorIndex","sparse","pendingBufferViews","itemSize","TypedArray","elementBytes","BYTES_PER_ELEMENT","itemBytes","byteStride","bufferAttribute","ibSlice","floor","ibCacheKey","count","ib","InterleavedBuffer","InterleavedBufferAttribute","BufferAttribute","itemSizeIndices","SCALAR","TypedArrayIndices","byteOffsetIndices","byteOffsetValues","sparseIndices","sparseValues","setX","setY","setZ","setW","textureIndex","URL","window","webkitURL","textureDef","textures","textureExtensions","images","sourceURI","isObjectURL","blob","Blob","mimeType","createObjectURL","getHandler","revokeObjectURL","flipY","format","samplers","sampler","magFilter","minFilter","wrapS","wrapT","mapName","mapDef","isCompressedTexture","assignFinalMaterial","useVertexTangents","tangent","useVertexColors","useFlatShading","useSkinning","useMorphTargets","useMorphNormals","isPoints","uuid","pointsMaterial","PointsMaterial","Material","sizeAttenuation","isLine","lineMaterial","LineBasicMaterial","cachedMaterial","skinning","vertexTangents","vertexColors","VertexColors","flatShading","morphTargets","uv2","uv","log","setAttribute","onBeforeRender","materialIndex","materials","materialType","materialExtensions","sgExtension","kmuExtension","metallicFactor","roughnessFactor","metallicRoughnessTexture","doubleSided","DoubleSide","alphaMode","alphaTest","alphaCutoff","normalTexture","Vector2","occlusionTexture","strength","emissiveFactor","emissiveTexture","encoding","sRGBEncoding","computeBounds","box","Box3","accessor","min","max","Vector3","vector","abs","expandByVector","boundingBox","sphere","Sphere","getCenter","center","radius","distanceTo","boundingSphere","addPrimitiveAttributes","assignAttributeAccessor","gltfAttributeName","setIndex","loadGeometries","primitives","createDracoPrimitive","cached","promise","geometryPromise","BufferGeometry","meshIndex","originalMaterials","geometries","SkinnedMesh","Mesh","skinWeight","normalizeSkinWeights","drawMode","TriangleStripDrawMode","TriangleFanDrawMode","LineSegments","Line","LineLoop","Points","group","Group","cameraIndex","cameraDef","PerspectiveCamera","radToDeg","yfov","aspectRatio","znear","zfar","OrthographicCamera","xmag","ymag","skinDef","skinEntry","inverseBindMatrices","animationIndex","animationDef","pendingNodes","pendingInputAccessors","pendingOutputAccessors","pendingSamplers","pendingTargets","channels","channel","node","id","input","parameters","output","inputAccessors","outputAccessors","tracks","inputAccessor","outputAccessor","TypedKeyframeTrack","NumberKeyframeTrack","QuaternionKeyframeTrack","VectorKeyframeTrack","targetName","interpolation","traverse","isMesh","outputArray","scaled","j","jl","track","createInterpolant","InterpolantFactoryMethodGLTFCubicSpline","times","getValueSize","isInterpolantFactoryMethodGLTFCubicSpline","AnimationClip","instanceNum","children","o","light","Bone","Object3D","PropertyBinding","sanitizeNodeName","Matrix4","applyMatrix","quaternion","buildNodeHierachy","nodeId","parentObject","pendingJoints","jointNodes","bones","boneInverses","jointNode","mat","bind","Skeleton","matrixWorld","child","sceneIndex","sceneDef","Scene","nodeIds","module","exports"],"sources":["/Users/armenmerikyan/Desktop/wd/tfnlab.com/metagascarnext/stage-presets-gltfjsx/node_modules/three-gltf-loader/index.js"],"sourcesContent":["/**\n * @author Rich Tibbett / https://github.com/richtr\n * @author mrdoob / http://mrdoob.com/\n * @author Tony Parisi / http://www.tonyparisi.com/\n * @author Takahiro / https://github.com/takahirox\n * @author Don McCurdy / https://www.donmccurdy.com\n */\n\nvar THREE = require( 'three' );\n\n\nvar _GLTFLoader = ( function () {\n\n\tfunction GLTFLoader( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t\tthis.dracoLoader = null;\n\t\tthis.ddsLoader = null;\n\n\t}\n\n\tGLTFLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: GLTFLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar resourcePath;\n\n\t\t\tif ( this.resourcePath !== '' ) {\n\n\t\t\t\tresourcePath = this.resourcePath;\n\n\t\t\t} else if ( this.path !== '' ) {\n\n\t\t\t\tresourcePath = this.path;\n\n\t\t\t} else {\n\n\t\t\t\tresourcePath = THREE.LoaderUtils.extractUrlBase( url );\n\n\t\t\t}\n\n\t\t\t// Tells the LoadingManager to track an extra item, which resolves after\n\t\t\t// the model is fully loaded. This means the count of items loaded will\n\t\t\t// be incorrect, but ensures manager.onLoad() does not fire early.\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tvar _onError = function ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t};\n\n\t\t\tvar loader = new THREE.FileLoader( scope.manager );\n\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tif ( scope.crossOrigin === 'use-credentials' ) {\n\n\t\t\t\tloader.setWithCredentials( true );\n\n\t\t\t}\n\n\t\t\tloader.load( url, function ( data ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tscope.parse( data, resourcePath, function ( gltf ) {\n\n\t\t\t\t\t\tonLoad( gltf );\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, _onError );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t_onError( e );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, _onError );\n\n\t\t},\n\n\t\tsetDRACOLoader: function ( dracoLoader ) {\n\n\t\t\tthis.dracoLoader = dracoLoader;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDDSLoader: function ( ddsLoader ) {\n\n\t\t\tthis.ddsLoader = ddsLoader;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: function ( data, path, onLoad, onError ) {\n\n\t\t\tvar content;\n\t\t\tvar extensions = {};\n\n\t\t\tif ( typeof data === 'string' ) {\n\n\t\t\t\tcontent = data;\n\n\t\t\t} else {\n\n\t\t\t\tvar magic = THREE.LoaderUtils.decodeText( new Uint8Array( data, 0, 4 ) );\n\n\t\t\t\tif ( magic === BINARY_EXTENSION_HEADER_MAGIC ) {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\textensions[ EXTENSIONS.KHR_BINARY_GLTF ] = new GLTFBinaryExtension( data );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tif ( onError ) onError( error );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontent = extensions[ EXTENSIONS.KHR_BINARY_GLTF ].content;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcontent = THREE.LoaderUtils.decodeText( new Uint8Array( data ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar json = JSON.parse( content );\n\n\t\t\tif ( json.asset === undefined || json.asset.version[ 0 ] < 2 ) {\n\n\t\t\t\tif ( onError ) onError( new Error( 'THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported.' ) );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( json.extensionsUsed ) {\n\n\t\t\t\tfor ( var i = 0; i < json.extensionsUsed.length; ++ i ) {\n\n\t\t\t\t\tvar extensionName = json.extensionsUsed[ i ];\n\t\t\t\t\tvar extensionsRequired = json.extensionsRequired || [];\n\n\t\t\t\t\tswitch ( extensionName ) {\n\n\t\t\t\t\t\tcase EXTENSIONS.KHR_LIGHTS_PUNCTUAL:\n\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFLightsExtension( json );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EXTENSIONS.KHR_MATERIALS_UNLIT:\n\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFMaterialsUnlitExtension();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:\n\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFMaterialsPbrSpecularGlossinessExtension();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EXTENSIONS.KHR_DRACO_MESH_COMPRESSION:\n\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFDracoMeshCompressionExtension( json, this.dracoLoader );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EXTENSIONS.MSFT_TEXTURE_DDS:\n\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFTextureDDSExtension( this.ddsLoader );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EXTENSIONS.KHR_TEXTURE_TRANSFORM:\n\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFTextureTransformExtension();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EXTENSIONS.KHR_MESH_QUANTIZATION:\n\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFMeshQuantizationExtension();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tif ( extensionsRequired.indexOf( extensionName ) >= 0 ) {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Unknown extension \"' + extensionName + '\".' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar parser = new GLTFParser( json, extensions, {\n\n\t\t\t\tpath: path || this.resourcePath || '',\n\t\t\t\tcrossOrigin: this.crossOrigin,\n\t\t\t\tmanager: this.manager\n\n\t\t\t} );\n\n\t\t\tparser.parse( onLoad, onError );\n\n\t\t}\n\n\t} );\n\n\t/* GLTFREGISTRY */\n\n\tfunction GLTFRegistry() {\n\n\t\tvar objects = {};\n\n\t\treturn\t{\n\n\t\t\tget: function ( key ) {\n\n\t\t\t\treturn objects[ key ];\n\n\t\t\t},\n\n\t\t\tadd: function ( key, object ) {\n\n\t\t\t\tobjects[ key ] = object;\n\n\t\t\t},\n\n\t\t\tremove: function ( key ) {\n\n\t\t\t\tdelete objects[ key ];\n\n\t\t\t},\n\n\t\t\tremoveAll: function () {\n\n\t\t\t\tobjects = {};\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/*********************************/\n\t/********** EXTENSIONS ***********/\n\t/*********************************/\n\n\tvar EXTENSIONS = {\n\t\tKHR_BINARY_GLTF: 'KHR_binary_glTF',\n\t\tKHR_DRACO_MESH_COMPRESSION: 'KHR_draco_mesh_compression',\n\t\tKHR_LIGHTS_PUNCTUAL: 'KHR_lights_punctual',\n\t\tKHR_MATERIALS_PBR_SPECULAR_GLOSSINESS: 'KHR_materials_pbrSpecularGlossiness',\n\t\tKHR_MATERIALS_UNLIT: 'KHR_materials_unlit',\n\t\tKHR_TEXTURE_TRANSFORM: 'KHR_texture_transform',\n\t\tKHR_MESH_QUANTIZATION: 'KHR_mesh_quantization',\n\t\tMSFT_TEXTURE_DDS: 'MSFT_texture_dds'\n\t};\n\n\t/**\n\t * DDS Texture Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/MSFT_texture_dds\n\t *\n\t */\n\tfunction GLTFTextureDDSExtension( ddsLoader ) {\n\n\t\tif ( ! ddsLoader ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: Attempting to load .dds texture without importing THREE.DDSLoader' );\n\n\t\t}\n\n\t\tthis.name = EXTENSIONS.MSFT_TEXTURE_DDS;\n\t\tthis.ddsLoader = ddsLoader;\n\n\t}\n\n\t/**\n\t * Punctual Lights Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\n\t */\n\tfunction GLTFLightsExtension( json ) {\n\n\t\tthis.name = EXTENSIONS.KHR_LIGHTS_PUNCTUAL;\n\n\t\tvar extension = ( json.extensions && json.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ] ) || {};\n\t\tthis.lightDefs = extension.lights || [];\n\n\t}\n\n\tGLTFLightsExtension.prototype.loadLight = function ( lightIndex ) {\n\n\t\tvar lightDef = this.lightDefs[ lightIndex ];\n\t\tvar lightNode;\n\n\t\tvar color = new THREE.Color( 0xffffff );\n\t\tif ( lightDef.color !== undefined ) color.fromArray( lightDef.color );\n\n\t\tvar range = lightDef.range !== undefined ? lightDef.range : 0;\n\n\t\tswitch ( lightDef.type ) {\n\n\t\t\tcase 'directional':\n\t\t\t\tlightNode = new THREE.DirectionalLight( color );\n\t\t\t\tlightNode.target.position.set( 0, 0, - 1 );\n\t\t\t\tlightNode.add( lightNode.target );\n\t\t\t\tbreak;\n\n\t\t\tcase 'point':\n\t\t\t\tlightNode = new THREE.PointLight( color );\n\t\t\t\tlightNode.distance = range;\n\t\t\t\tbreak;\n\n\t\t\tcase 'spot':\n\t\t\t\tlightNode = new THREE.SpotLight( color );\n\t\t\t\tlightNode.distance = range;\n\t\t\t\t// Handle spotlight properties.\n\t\t\t\tlightDef.spot = lightDef.spot || {};\n\t\t\t\tlightDef.spot.innerConeAngle = lightDef.spot.innerConeAngle !== undefined ? lightDef.spot.innerConeAngle : 0;\n\t\t\t\tlightDef.spot.outerConeAngle = lightDef.spot.outerConeAngle !== undefined ? lightDef.spot.outerConeAngle : Math.PI / 4.0;\n\t\t\t\tlightNode.angle = lightDef.spot.outerConeAngle;\n\t\t\t\tlightNode.penumbra = 1.0 - lightDef.spot.innerConeAngle / lightDef.spot.outerConeAngle;\n\t\t\t\tlightNode.target.position.set( 0, 0, - 1 );\n\t\t\t\tlightNode.add( lightNode.target );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'THREE.GLTFLoader: Unexpected light type, \"' + lightDef.type + '\".' );\n\n\t\t}\n\n\t\t// Some lights (e.g. spot) default to a position other than the origin. Reset the position\n\t\t// here, because node-level parsing will only override position if explicitly specified.\n\t\tlightNode.position.set( 0, 0, 0 );\n\n\t\tlightNode.decay = 2;\n\n\t\tif ( lightDef.intensity !== undefined ) lightNode.intensity = lightDef.intensity;\n\n\t\tlightNode.name = lightDef.name || ( 'light_' + lightIndex );\n\n\t\treturn Promise.resolve( lightNode );\n\n\t};\n\n\t/**\n\t * Unlit Materials Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit\n\t */\n\tfunction GLTFMaterialsUnlitExtension() {\n\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_UNLIT;\n\n\t}\n\n\tGLTFMaterialsUnlitExtension.prototype.getMaterialType = function () {\n\n\t\treturn THREE.MeshBasicMaterial;\n\n\t};\n\n\tGLTFMaterialsUnlitExtension.prototype.extendParams = function ( materialParams, materialDef, parser ) {\n\n\t\tvar pending = [];\n\n\t\tmaterialParams.color = new THREE.Color( 1.0, 1.0, 1.0 );\n\t\tmaterialParams.opacity = 1.0;\n\n\t\tvar metallicRoughness = materialDef.pbrMetallicRoughness;\n\n\t\tif ( metallicRoughness ) {\n\n\t\t\tif ( Array.isArray( metallicRoughness.baseColorFactor ) ) {\n\n\t\t\t\tvar array = metallicRoughness.baseColorFactor;\n\n\t\t\t\tmaterialParams.color.fromArray( array );\n\t\t\t\tmaterialParams.opacity = array[ 3 ];\n\n\t\t\t}\n\n\t\t\tif ( metallicRoughness.baseColorTexture !== undefined ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t};\n\n\t/* BINARY EXTENSION */\n\tvar BINARY_EXTENSION_HEADER_MAGIC = 'glTF';\n\tvar BINARY_EXTENSION_HEADER_LENGTH = 12;\n\tvar BINARY_EXTENSION_CHUNK_TYPES = { JSON: 0x4E4F534A, BIN: 0x004E4942 };\n\n\tfunction GLTFBinaryExtension( data ) {\n\n\t\tthis.name = EXTENSIONS.KHR_BINARY_GLTF;\n\t\tthis.content = null;\n\t\tthis.body = null;\n\n\t\tvar headerView = new DataView( data, 0, BINARY_EXTENSION_HEADER_LENGTH );\n\n\t\tthis.header = {\n\t\t\tmagic: THREE.LoaderUtils.decodeText( new Uint8Array( data.slice( 0, 4 ) ) ),\n\t\t\tversion: headerView.getUint32( 4, true ),\n\t\t\tlength: headerView.getUint32( 8, true )\n\t\t};\n\n\t\tif ( this.header.magic !== BINARY_EXTENSION_HEADER_MAGIC ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: Unsupported glTF-Binary header.' );\n\n\t\t} else if ( this.header.version < 2.0 ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: Legacy binary file detected.' );\n\n\t\t}\n\n\t\tvar chunkView = new DataView( data, BINARY_EXTENSION_HEADER_LENGTH );\n\t\tvar chunkIndex = 0;\n\n\t\twhile ( chunkIndex < chunkView.byteLength ) {\n\n\t\t\tvar chunkLength = chunkView.getUint32( chunkIndex, true );\n\t\t\tchunkIndex += 4;\n\n\t\t\tvar chunkType = chunkView.getUint32( chunkIndex, true );\n\t\t\tchunkIndex += 4;\n\n\t\t\tif ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON ) {\n\n\t\t\t\tvar contentArray = new Uint8Array( data, BINARY_EXTENSION_HEADER_LENGTH + chunkIndex, chunkLength );\n\t\t\t\tthis.content = THREE.LoaderUtils.decodeText( contentArray );\n\n\t\t\t} else if ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN ) {\n\n\t\t\t\tvar byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;\n\t\t\t\tthis.body = data.slice( byteOffset, byteOffset + chunkLength );\n\n\t\t\t}\n\n\t\t\t// Clients must ignore chunks with unknown types.\n\n\t\t\tchunkIndex += chunkLength;\n\n\t\t}\n\n\t\tif ( this.content === null ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: JSON content not found.' );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * DRACO Mesh Compression Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression\n\t */\n\tfunction GLTFDracoMeshCompressionExtension( json, dracoLoader ) {\n\n\t\tif ( ! dracoLoader ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: No DRACOLoader instance provided.' );\n\n\t\t}\n\n\t\tthis.name = EXTENSIONS.KHR_DRACO_MESH_COMPRESSION;\n\t\tthis.json = json;\n\t\tthis.dracoLoader = dracoLoader;\n\n\t}\n\n\tGLTFDracoMeshCompressionExtension.prototype.decodePrimitive = function ( primitive, parser ) {\n\n\t\tvar json = this.json;\n\t\tvar dracoLoader = this.dracoLoader;\n\t\tvar bufferViewIndex = primitive.extensions[ this.name ].bufferView;\n\t\tvar gltfAttributeMap = primitive.extensions[ this.name ].attributes;\n\t\tvar threeAttributeMap = {};\n\t\tvar attributeNormalizedMap = {};\n\t\tvar attributeTypeMap = {};\n\n\t\tfor ( var attributeName in gltfAttributeMap ) {\n\n\t\t\tvar threeAttributeName = ATTRIBUTES[ attributeName ] || attributeName.toLowerCase();\n\n\t\t\tthreeAttributeMap[ threeAttributeName ] = gltfAttributeMap[ attributeName ];\n\n\t\t}\n\n\t\tfor ( attributeName in primitive.attributes ) {\n\n\t\t\tvar threeAttributeName = ATTRIBUTES[ attributeName ] || attributeName.toLowerCase();\n\n\t\t\tif ( gltfAttributeMap[ attributeName ] !== undefined ) {\n\n\t\t\t\tvar accessorDef = json.accessors[ primitive.attributes[ attributeName ] ];\n\t\t\t\tvar componentType = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];\n\n\t\t\t\tattributeTypeMap[ threeAttributeName ] = componentType;\n\t\t\t\tattributeNormalizedMap[ threeAttributeName ] = accessorDef.normalized === true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn parser.getDependency( 'bufferView', bufferViewIndex ).then( function ( bufferView ) {\n\n\t\t\treturn new Promise( function ( resolve ) {\n\n\t\t\t\tdracoLoader.decodeDracoFile( bufferView, function ( geometry ) {\n\n\t\t\t\t\tfor ( var attributeName in geometry.attributes ) {\n\n\t\t\t\t\t\tvar attribute = geometry.attributes[ attributeName ];\n\t\t\t\t\t\tvar normalized = attributeNormalizedMap[ attributeName ];\n\n\t\t\t\t\t\tif ( normalized !== undefined ) attribute.normalized = normalized;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve( geometry );\n\n\t\t\t\t}, threeAttributeMap, attributeTypeMap );\n\n\t\t\t} );\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Texture Transform Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_texture_transform\n\t */\n\tfunction GLTFTextureTransformExtension() {\n\n\t\tthis.name = EXTENSIONS.KHR_TEXTURE_TRANSFORM;\n\n\t}\n\n\tGLTFTextureTransformExtension.prototype.extendTexture = function ( texture, transform ) {\n\n\t\ttexture = texture.clone();\n\n\t\tif ( transform.offset !== undefined ) {\n\n\t\t\ttexture.offset.fromArray( transform.offset );\n\n\t\t}\n\n\t\tif ( transform.rotation !== undefined ) {\n\n\t\t\ttexture.rotation = transform.rotation;\n\n\t\t}\n\n\t\tif ( transform.scale !== undefined ) {\n\n\t\t\ttexture.repeat.fromArray( transform.scale );\n\n\t\t}\n\n\t\tif ( transform.texCoord !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.GLTFLoader: Custom UV sets in \"' + this.name + '\" extension not yet supported.' );\n\n\t\t}\n\n\t\ttexture.needsUpdate = true;\n\n\t\treturn texture;\n\n\t};\n\n\t/**\n\t * Specular-Glossiness Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness\n\t */\n\tfunction GLTFMaterialsPbrSpecularGlossinessExtension() {\n\n\t\treturn {\n\n\t\t\tname: EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,\n\n\t\t\tspecularGlossinessParams: [\n\t\t\t\t'color',\n\t\t\t\t'map',\n\t\t\t\t'lightMap',\n\t\t\t\t'lightMapIntensity',\n\t\t\t\t'aoMap',\n\t\t\t\t'aoMapIntensity',\n\t\t\t\t'emissive',\n\t\t\t\t'emissiveIntensity',\n\t\t\t\t'emissiveMap',\n\t\t\t\t'bumpMap',\n\t\t\t\t'bumpScale',\n\t\t\t\t'normalMap',\n\t\t\t\t'displacementMap',\n\t\t\t\t'displacementScale',\n\t\t\t\t'displacementBias',\n\t\t\t\t'specularMap',\n\t\t\t\t'specular',\n\t\t\t\t'glossinessMap',\n\t\t\t\t'glossiness',\n\t\t\t\t'alphaMap',\n\t\t\t\t'envMap',\n\t\t\t\t'envMapIntensity',\n\t\t\t\t'refractionRatio',\n\t\t\t],\n\n\t\t\tgetMaterialType: function () {\n\n\t\t\t\treturn THREE.ShaderMaterial;\n\n\t\t\t},\n\n\t\t\textendParams: function ( materialParams, materialDef, parser ) {\n\n\t\t\t\tvar pbrSpecularGlossiness = materialDef.extensions[ this.name ];\n\n\t\t\t\tvar shader = THREE.ShaderLib[ 'standard' ];\n\n\t\t\t\tvar uniforms = THREE.UniformsUtils.clone( shader.uniforms );\n\n\t\t\t\tvar specularMapParsFragmentChunk = [\n\t\t\t\t\t'#ifdef USE_SPECULARMAP',\n\t\t\t\t\t'\tuniform sampler2D specularMap;',\n\t\t\t\t\t'#endif'\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tvar glossinessMapParsFragmentChunk = [\n\t\t\t\t\t'#ifdef USE_GLOSSINESSMAP',\n\t\t\t\t\t'\tuniform sampler2D glossinessMap;',\n\t\t\t\t\t'#endif'\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tvar specularMapFragmentChunk = [\n\t\t\t\t\t'vec3 specularFactor = specular;',\n\t\t\t\t\t'#ifdef USE_SPECULARMAP',\n\t\t\t\t\t'\tvec4 texelSpecular = texture2D( specularMap, vUv );',\n\t\t\t\t\t'\ttexelSpecular = sRGBToLinear( texelSpecular );',\n\t\t\t\t\t'\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',\n\t\t\t\t\t'\tspecularFactor *= texelSpecular.rgb;',\n\t\t\t\t\t'#endif'\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tvar glossinessMapFragmentChunk = [\n\t\t\t\t\t'float glossinessFactor = glossiness;',\n\t\t\t\t\t'#ifdef USE_GLOSSINESSMAP',\n\t\t\t\t\t'\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );',\n\t\t\t\t\t'\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',\n\t\t\t\t\t'\tglossinessFactor *= texelGlossiness.a;',\n\t\t\t\t\t'#endif'\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tvar lightPhysicalFragmentChunk = [\n\t\t\t\t\t'PhysicalMaterial material;',\n\t\t\t\t\t'material.diffuseColor = diffuseColor.rgb;',\n\t\t\t\t\t'material.specularRoughness = clamp( 1.0 - glossinessFactor, 0.04, 1.0 );',\n\t\t\t\t\t'material.specularColor = specularFactor.rgb;',\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tvar fragmentShader = shader.fragmentShader\n\t\t\t\t\t.replace( 'uniform float roughness;', 'uniform vec3 specular;' )\n\t\t\t\t\t.replace( 'uniform float metalness;', 'uniform float glossiness;' )\n\t\t\t\t\t.replace( '#include <roughnessmap_pars_fragment>', specularMapParsFragmentChunk )\n\t\t\t\t\t.replace( '#include <metalnessmap_pars_fragment>', glossinessMapParsFragmentChunk )\n\t\t\t\t\t.replace( '#include <roughnessmap_fragment>', specularMapFragmentChunk )\n\t\t\t\t\t.replace( '#include <metalnessmap_fragment>', glossinessMapFragmentChunk )\n\t\t\t\t\t.replace( '#include <lights_physical_fragment>', lightPhysicalFragmentChunk );\n\n\t\t\t\tdelete uniforms.roughness;\n\t\t\t\tdelete uniforms.metalness;\n\t\t\t\tdelete uniforms.roughnessMap;\n\t\t\t\tdelete uniforms.metalnessMap;\n\n\t\t\t\tuniforms.specular = { value: new THREE.Color().setHex( 0x111111 ) };\n\t\t\t\tuniforms.glossiness = { value: 0.5 };\n\t\t\t\tuniforms.specularMap = { value: null };\n\t\t\t\tuniforms.glossinessMap = { value: null };\n\n\t\t\t\tmaterialParams.vertexShader = shader.vertexShader;\n\t\t\t\tmaterialParams.fragmentShader = fragmentShader;\n\t\t\t\tmaterialParams.uniforms = uniforms;\n\t\t\t\tmaterialParams.defines = { 'STANDARD': '' };\n\n\t\t\t\tmaterialParams.color = new THREE.Color( 1.0, 1.0, 1.0 );\n\t\t\t\tmaterialParams.opacity = 1.0;\n\n\t\t\t\tvar pending = [];\n\n\t\t\t\tif ( Array.isArray( pbrSpecularGlossiness.diffuseFactor ) ) {\n\n\t\t\t\t\tvar array = pbrSpecularGlossiness.diffuseFactor;\n\n\t\t\t\t\tmaterialParams.color.fromArray( array );\n\t\t\t\t\tmaterialParams.opacity = array[ 3 ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( pbrSpecularGlossiness.diffuseTexture !== undefined ) {\n\n\t\t\t\t\tpending.push( parser.assignTexture( materialParams, 'map', pbrSpecularGlossiness.diffuseTexture ) );\n\n\t\t\t\t}\n\n\t\t\t\tmaterialParams.emissive = new THREE.Color( 0.0, 0.0, 0.0 );\n\t\t\t\tmaterialParams.glossiness = pbrSpecularGlossiness.glossinessFactor !== undefined ? pbrSpecularGlossiness.glossinessFactor : 1.0;\n\t\t\t\tmaterialParams.specular = new THREE.Color( 1.0, 1.0, 1.0 );\n\n\t\t\t\tif ( Array.isArray( pbrSpecularGlossiness.specularFactor ) ) {\n\n\t\t\t\t\tmaterialParams.specular.fromArray( pbrSpecularGlossiness.specularFactor );\n\n\t\t\t\t}\n\n\t\t\t\tif ( pbrSpecularGlossiness.specularGlossinessTexture !== undefined ) {\n\n\t\t\t\t\tvar specGlossMapDef = pbrSpecularGlossiness.specularGlossinessTexture;\n\t\t\t\t\tpending.push( parser.assignTexture( materialParams, 'glossinessMap', specGlossMapDef ) );\n\t\t\t\t\tpending.push( parser.assignTexture( materialParams, 'specularMap', specGlossMapDef ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn Promise.all( pending );\n\n\t\t\t},\n\n\t\t\tcreateMaterial: function ( params ) {\n\n\t\t\t\t// setup material properties based on MeshStandardMaterial for Specular-Glossiness\n\n\t\t\t\tvar material = new THREE.ShaderMaterial( {\n\t\t\t\t\tdefines: params.defines,\n\t\t\t\t\tvertexShader: params.vertexShader,\n\t\t\t\t\tfragmentShader: params.fragmentShader,\n\t\t\t\t\tuniforms: params.uniforms,\n\t\t\t\t\tfog: true,\n\t\t\t\t\tlights: true,\n\t\t\t\t\topacity: params.opacity,\n\t\t\t\t\ttransparent: params.transparent\n\t\t\t\t} );\n\n\t\t\t\tmaterial.isGLTFSpecularGlossinessMaterial = true;\n\n\t\t\t\tmaterial.color = params.color;\n\n\t\t\t\tmaterial.map = params.map === undefined ? null : params.map;\n\n\t\t\t\tmaterial.lightMap = null;\n\t\t\t\tmaterial.lightMapIntensity = 1.0;\n\n\t\t\t\tmaterial.aoMap = params.aoMap === undefined ? null : params.aoMap;\n\t\t\t\tmaterial.aoMapIntensity = 1.0;\n\n\t\t\t\tmaterial.emissive = params.emissive;\n\t\t\t\tmaterial.emissiveIntensity = 1.0;\n\t\t\t\tmaterial.emissiveMap = params.emissiveMap === undefined ? null : params.emissiveMap;\n\n\t\t\t\tmaterial.bumpMap = params.bumpMap === undefined ? null : params.bumpMap;\n\t\t\t\tmaterial.bumpScale = 1;\n\n\t\t\t\tmaterial.normalMap = params.normalMap === undefined ? null : params.normalMap;\n\n\t\t\t\tif ( params.normalScale ) material.normalScale = params.normalScale;\n\n\t\t\t\tmaterial.displacementMap = null;\n\t\t\t\tmaterial.displacementScale = 1;\n\t\t\t\tmaterial.displacementBias = 0;\n\n\t\t\t\tmaterial.specularMap = params.specularMap === undefined ? null : params.specularMap;\n\t\t\t\tmaterial.specular = params.specular;\n\n\t\t\t\tmaterial.glossinessMap = params.glossinessMap === undefined ? null : params.glossinessMap;\n\t\t\t\tmaterial.glossiness = params.glossiness;\n\n\t\t\t\tmaterial.alphaMap = null;\n\n\t\t\t\tmaterial.envMap = params.envMap === undefined ? null : params.envMap;\n\t\t\t\tmaterial.envMapIntensity = 1.0;\n\n\t\t\t\tmaterial.refractionRatio = 0.98;\n\n\t\t\t\tmaterial.extensions.derivatives = true;\n\n\t\t\t\treturn material;\n\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Clones a GLTFSpecularGlossinessMaterial instance. The ShaderMaterial.copy() method can\n\t\t\t * copy only properties it knows about or inherits, and misses many properties that would\n\t\t\t * normally be defined by MeshStandardMaterial.\n\t\t\t *\n\t\t\t * This method allows GLTFSpecularGlossinessMaterials to be cloned in the process of\n\t\t\t * loading a glTF model, but cloning later (e.g. by the user) would require these changes\n\t\t\t * AND also updating `.onBeforeRender` on the parent mesh.\n\t\t\t *\n\t\t\t * @param  {THREE.ShaderMaterial} source\n\t\t\t * @return {THREE.ShaderMaterial}\n\t\t\t */\n\t\t\tcloneMaterial: function ( source ) {\n\n\t\t\t\tvar target = source.clone();\n\n\t\t\t\ttarget.isGLTFSpecularGlossinessMaterial = true;\n\n\t\t\t\tvar params = this.specularGlossinessParams;\n\n\t\t\t\tfor ( var i = 0, il = params.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar value = source[ params[ i ] ];\n\t\t\t\t\ttarget[ params[ i ] ] = ( value && value.isColor ) ? value.clone() : value;\n\n\t\t\t\t}\n\n\t\t\t\treturn target;\n\n\t\t\t},\n\n\t\t\t// Here's based on refreshUniformsCommon() and refreshUniformsStandard() in WebGLRenderer.\n\t\t\trefreshUniforms: function ( renderer, scene, camera, geometry, material ) {\n\n\t\t\t\tif ( material.isGLTFSpecularGlossinessMaterial !== true ) {\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar uniforms = material.uniforms;\n\t\t\t\tvar defines = material.defines;\n\n\t\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t\t\t// uv repeat and offset setting priorities\n\t\t\t\t// 1. color map\n\t\t\t\t// 2. specular map\n\t\t\t\t// 3. normal map\n\t\t\t\t// 4. bump map\n\t\t\t\t// 5. alpha map\n\t\t\t\t// 6. emissive map\n\n\t\t\t\tvar uvScaleMap;\n\n\t\t\t\tif ( material.map ) {\n\n\t\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t\t} else if ( material.specularMap ) {\n\n\t\t\t\t\tuvScaleMap = material.specularMap;\n\n\t\t\t\t} else if ( material.displacementMap ) {\n\n\t\t\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t\t\t} else if ( material.normalMap ) {\n\n\t\t\t\t\tuvScaleMap = material.normalMap;\n\n\t\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t\t\t} else if ( material.glossinessMap ) {\n\n\t\t\t\t\tuvScaleMap = material.glossinessMap;\n\n\t\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t\t} else if ( material.emissiveMap ) {\n\n\t\t\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\t\t// backwards compatibility\n\t\t\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.envMap ) {\n\n\t\t\t\t\tuniforms.envMap.value = material.envMap;\n\t\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t\t\t\t// don't flip CubeTexture envMaps, flip everything else:\n\t\t\t\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n\t\t\t\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n\t\t\t\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\t\t\t\t\tuniforms.flipEnvMap.value = material.envMap.isCubeTexture ? - 1 : 1;\n\n\t\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\t\tuniforms.maxMipLevel.value = renderer.properties.get( material.envMap ).__maxMipLevel;\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.specular.value.copy( material.specular );\n\t\t\t\tuniforms.glossiness.value = material.glossiness;\n\n\t\t\t\tuniforms.glossinessMap.value = material.glossinessMap;\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t\tif ( uniforms.glossinessMap.value !== null && defines.USE_GLOSSINESSMAP === undefined ) {\n\n\t\t\t\t\tdefines.USE_GLOSSINESSMAP = '';\n\t\t\t\t\t// set USE_ROUGHNESSMAP to enable vUv\n\t\t\t\t\tdefines.USE_ROUGHNESSMAP = '';\n\n\t\t\t\t}\n\n\t\t\t\tif ( uniforms.glossinessMap.value === null && defines.USE_GLOSSINESSMAP !== undefined ) {\n\n\t\t\t\t\tdelete defines.USE_GLOSSINESSMAP;\n\t\t\t\t\tdelete defines.USE_ROUGHNESSMAP;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * Mesh Quantization Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization\n\t */\n\tfunction GLTFMeshQuantizationExtension() {\n\n\t\tthis.name = EXTENSIONS.KHR_MESH_QUANTIZATION;\n\n\t}\n\n\t/*********************************/\n\t/********** INTERPOLATION ********/\n\t/*********************************/\n\n\t// Spline Interpolation\n\t// Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#appendix-c-spline-interpolation\n\tfunction GLTFCubicSplineInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tTHREE.Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tGLTFCubicSplineInterpolant.prototype = Object.create( THREE.Interpolant.prototype );\n\tGLTFCubicSplineInterpolant.prototype.constructor = GLTFCubicSplineInterpolant;\n\n\tGLTFCubicSplineInterpolant.prototype.copySampleValue_ = function ( index ) {\n\n\t\t// Copies a sample value to the result buffer. See description of glTF\n\t\t// CUBICSPLINE values layout in interpolate_() function below.\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tvalueSize = this.valueSize,\n\t\t\toffset = index * valueSize * 3 + valueSize;\n\n\t\tfor ( var i = 0; i !== valueSize; i ++ ) {\n\n\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t};\n\n\tGLTFCubicSplineInterpolant.prototype.beforeStart_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;\n\n\tGLTFCubicSplineInterpolant.prototype.afterEnd_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;\n\n\tGLTFCubicSplineInterpolant.prototype.interpolate_ = function ( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer;\n\t\tvar values = this.sampleValues;\n\t\tvar stride = this.valueSize;\n\n\t\tvar stride2 = stride * 2;\n\t\tvar stride3 = stride * 3;\n\n\t\tvar td = t1 - t0;\n\n\t\tvar p = ( t - t0 ) / td;\n\t\tvar pp = p * p;\n\t\tvar ppp = pp * p;\n\n\t\tvar offset1 = i1 * stride3;\n\t\tvar offset0 = offset1 - stride3;\n\n\t\tvar s2 = - 2 * ppp + 3 * pp;\n\t\tvar s3 = ppp - pp;\n\t\tvar s0 = 1 - s2;\n\t\tvar s1 = s3 - pp + p;\n\n\t\t// Layout of keyframe output values for CUBICSPLINE animations:\n\t\t//   [ inTangent_1, splineVertex_1, outTangent_1, inTangent_2, splineVertex_2, ... ]\n\t\tfor ( var i = 0; i !== stride; i ++ ) {\n\n\t\t\tvar p0 = values[ offset0 + i + stride ]; // splineVertex_k\n\t\t\tvar m0 = values[ offset0 + i + stride2 ] * td; // outTangent_k * (t_k+1 - t_k)\n\t\t\tvar p1 = values[ offset1 + i + stride ]; // splineVertex_k+1\n\t\t\tvar m1 = values[ offset1 + i ] * td; // inTangent_k+1 * (t_k+1 - t_k)\n\n\t\t\tresult[ i ] = s0 * p0 + s1 * m0 + s2 * p1 + s3 * m1;\n\n\t\t}\n\n\t\treturn result;\n\n\t};\n\n\t/*********************************/\n\t/********** INTERNALS ************/\n\t/*********************************/\n\n\t/* CONSTANTS */\n\n\tvar WEBGL_CONSTANTS = {\n\t\tFLOAT: 5126,\n\t\t//FLOAT_MAT2: 35674,\n\t\tFLOAT_MAT3: 35675,\n\t\tFLOAT_MAT4: 35676,\n\t\tFLOAT_VEC2: 35664,\n\t\tFLOAT_VEC3: 35665,\n\t\tFLOAT_VEC4: 35666,\n\t\tLINEAR: 9729,\n\t\tREPEAT: 10497,\n\t\tSAMPLER_2D: 35678,\n\t\tPOINTS: 0,\n\t\tLINES: 1,\n\t\tLINE_LOOP: 2,\n\t\tLINE_STRIP: 3,\n\t\tTRIANGLES: 4,\n\t\tTRIANGLE_STRIP: 5,\n\t\tTRIANGLE_FAN: 6,\n\t\tUNSIGNED_BYTE: 5121,\n\t\tUNSIGNED_SHORT: 5123\n\t};\n\n\tvar WEBGL_COMPONENT_TYPES = {\n\t\t5120: Int8Array,\n\t\t5121: Uint8Array,\n\t\t5122: Int16Array,\n\t\t5123: Uint16Array,\n\t\t5125: Uint32Array,\n\t\t5126: Float32Array\n\t};\n\n\tvar WEBGL_FILTERS = {\n\t\t9728: THREE.NearestFilter,\n\t\t9729: THREE.LinearFilter,\n\t\t9984: THREE.NearestMipmapNearestFilter,\n\t\t9985: THREE.LinearMipmapNearestFilter,\n\t\t9986: THREE.NearestMipmapLinearFilter,\n\t\t9987: THREE.LinearMipmapLinearFilter\n\t};\n\n\tvar WEBGL_WRAPPINGS = {\n\t\t33071: THREE.ClampToEdgeWrapping,\n\t\t33648: THREE.MirroredRepeatWrapping,\n\t\t10497: THREE.RepeatWrapping\n\t};\n\n\tvar WEBGL_TYPE_SIZES = {\n\t\t'SCALAR': 1,\n\t\t'VEC2': 2,\n\t\t'VEC3': 3,\n\t\t'VEC4': 4,\n\t\t'MAT2': 4,\n\t\t'MAT3': 9,\n\t\t'MAT4': 16\n\t};\n\n\tvar ATTRIBUTES = {\n\t\tPOSITION: 'position',\n\t\tNORMAL: 'normal',\n\t\tTANGENT: 'tangent',\n\t\tTEXCOORD_0: 'uv',\n\t\tTEXCOORD_1: 'uv2',\n\t\tCOLOR_0: 'color',\n\t\tWEIGHTS_0: 'skinWeight',\n\t\tJOINTS_0: 'skinIndex',\n\t};\n\n\tvar PATH_PROPERTIES = {\n\t\tscale: 'scale',\n\t\ttranslation: 'position',\n\t\trotation: 'quaternion',\n\t\tweights: 'morphTargetInfluences'\n\t};\n\n\tvar INTERPOLATION = {\n\t\tCUBICSPLINE: undefined, // We use a custom interpolant (GLTFCubicSplineInterpolation) for CUBICSPLINE tracks. Each\n\t\t                        // keyframe track will be initialized with a default interpolation type, then modified.\n\t\tLINEAR: THREE.InterpolateLinear,\n\t\tSTEP: THREE.InterpolateDiscrete\n\t};\n\n\tvar ALPHA_MODES = {\n\t\tOPAQUE: 'OPAQUE',\n\t\tMASK: 'MASK',\n\t\tBLEND: 'BLEND'\n\t};\n\n\tvar MIME_TYPE_FORMATS = {\n\t\t'image/png': THREE.RGBAFormat,\n\t\t'image/jpeg': THREE.RGBFormat\n\t};\n\n\t/* UTILITY FUNCTIONS */\n\n\tfunction resolveURL( url, path ) {\n\n\t\t// Invalid URL\n\t\tif ( typeof url !== 'string' || url === '' ) return '';\n\n\t\t// Host Relative URL\n\t\tif ( /^https?:\\/\\//i.test( path ) && /^\\//.test( url ) ) {\n\n\t\t\tpath = path.replace( /(^https?:\\/\\/[^\\/]+).*/i, '$1' );\n\n\t\t}\n\n\t\t// Absolute URL http://,https://,//\n\t\tif ( /^(https?:)?\\/\\//i.test( url ) ) return url;\n\n\t\t// Data URI\n\t\tif ( /^data:.*,.*$/i.test( url ) ) return url;\n\n\t\t// Blob URL\n\t\tif ( /^blob:.*$/i.test( url ) ) return url;\n\n\t\t// Relative URL\n\t\treturn path + url;\n\n\t}\n\n\tvar defaultMaterial;\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#default-material\n\t */\n\tfunction createDefaultMaterial() {\n\n\t\tdefaultMaterial = defaultMaterial || new THREE.MeshStandardMaterial( {\n\t\t\tcolor: 0xFFFFFF,\n\t\t\temissive: 0x000000,\n\t\t\tmetalness: 1,\n\t\t\troughness: 1,\n\t\t\ttransparent: false,\n\t\t\tdepthTest: true,\n\t\t\tside: THREE.FrontSide\n\t\t} );\n\n\t\treturn defaultMaterial;\n\n\t}\n\n\tfunction addUnknownExtensionsToUserData( knownExtensions, object, objectDef ) {\n\n\t\t// Add unknown glTF extensions to an object's userData.\n\n\t\tfor ( var name in objectDef.extensions ) {\n\n\t\t\tif ( knownExtensions[ name ] === undefined ) {\n\n\t\t\t\tobject.userData.gltfExtensions = object.userData.gltfExtensions || {};\n\t\t\t\tobject.userData.gltfExtensions[ name ] = objectDef.extensions[ name ];\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @param {THREE.Object3D|THREE.Material|THREE.BufferGeometry} object\n\t * @param {GLTF.definition} gltfDef\n\t */\n\tfunction assignExtrasToUserData( object, gltfDef ) {\n\n\t\tif ( gltfDef.extras !== undefined ) {\n\n\t\t\tif ( typeof gltfDef.extras === 'object' ) {\n\n\t\t\t\tObject.assign( object.userData, gltfDef.extras );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Ignoring primitive type .extras, ' + gltfDef.extras );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#morph-targets\n\t *\n\t * @param {THREE.BufferGeometry} geometry\n\t * @param {Array<GLTF.Target>} targets\n\t * @param {GLTFParser} parser\n\t * @return {Promise<THREE.BufferGeometry>}\n\t */\n\tfunction addMorphTargets( geometry, targets, parser ) {\n\n\t\tvar hasMorphPosition = false;\n\t\tvar hasMorphNormal = false;\n\n\t\tfor ( var i = 0, il = targets.length; i < il; i ++ ) {\n\n\t\t\tvar target = targets[ i ];\n\n\t\t\tif ( target.POSITION !== undefined ) hasMorphPosition = true;\n\t\t\tif ( target.NORMAL !== undefined ) hasMorphNormal = true;\n\n\t\t\tif ( hasMorphPosition && hasMorphNormal ) break;\n\n\t\t}\n\n\t\tif ( ! hasMorphPosition && ! hasMorphNormal ) return Promise.resolve( geometry );\n\n\t\tvar pendingPositionAccessors = [];\n\t\tvar pendingNormalAccessors = [];\n\n\t\tfor ( var i = 0, il = targets.length; i < il; i ++ ) {\n\n\t\t\tvar target = targets[ i ];\n\n\t\t\tif ( hasMorphPosition ) {\n\n\t\t\t\tvar pendingAccessor = target.POSITION !== undefined\n\t\t\t\t\t? parser.getDependency( 'accessor', target.POSITION )\n\t\t\t\t\t: geometry.attributes.position;\n\n\t\t\t\tpendingPositionAccessors.push( pendingAccessor );\n\n\t\t\t}\n\n\t\t\tif ( hasMorphNormal ) {\n\n\t\t\t\tvar pendingAccessor = target.NORMAL !== undefined\n\t\t\t\t\t? parser.getDependency( 'accessor', target.NORMAL )\n\t\t\t\t\t: geometry.attributes.normal;\n\n\t\t\t\tpendingNormalAccessors.push( pendingAccessor );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Promise.all( [\n\t\t\tPromise.all( pendingPositionAccessors ),\n\t\t\tPromise.all( pendingNormalAccessors )\n\t\t] ).then( function ( accessors ) {\n\n\t\t\tvar morphPositions = accessors[ 0 ];\n\t\t\tvar morphNormals = accessors[ 1 ];\n\n\t\t\tif ( hasMorphPosition ) geometry.morphAttributes.position = morphPositions;\n\t\t\tif ( hasMorphNormal ) geometry.morphAttributes.normal = morphNormals;\n\t\t\tgeometry.morphTargetsRelative = true;\n\n\t\t\treturn geometry;\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * @param {THREE.Mesh} mesh\n\t * @param {GLTF.Mesh} meshDef\n\t */\n\tfunction updateMorphTargets( mesh, meshDef ) {\n\n\t\tmesh.updateMorphTargets();\n\n\t\tif ( meshDef.weights !== undefined ) {\n\n\t\t\tfor ( var i = 0, il = meshDef.weights.length; i < il; i ++ ) {\n\n\t\t\t\tmesh.morphTargetInfluences[ i ] = meshDef.weights[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// .extras has user-defined data, so check that .extras.targetNames is an array.\n\t\tif ( meshDef.extras && Array.isArray( meshDef.extras.targetNames ) ) {\n\n\t\t\tvar targetNames = meshDef.extras.targetNames;\n\n\t\t\tif ( mesh.morphTargetInfluences.length === targetNames.length ) {\n\n\t\t\t\tmesh.morphTargetDictionary = {};\n\n\t\t\t\tfor ( var i = 0, il = targetNames.length; i < il; i ++ ) {\n\n\t\t\t\t\tmesh.morphTargetDictionary[ targetNames[ i ] ] = i;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.' );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction createPrimitiveKey( primitiveDef ) {\n\n\t\tvar dracoExtension = primitiveDef.extensions && primitiveDef.extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ];\n\t\tvar geometryKey;\n\n\t\tif ( dracoExtension ) {\n\n\t\t\tgeometryKey = 'draco:' + dracoExtension.bufferView\n\t\t\t\t+ ':' + dracoExtension.indices\n\t\t\t\t+ ':' + createAttributesKey( dracoExtension.attributes );\n\n\t\t} else {\n\n\t\t\tgeometryKey = primitiveDef.indices + ':' + createAttributesKey( primitiveDef.attributes ) + ':' + primitiveDef.mode;\n\n\t\t}\n\n\t\treturn geometryKey;\n\n\t}\n\n\tfunction createAttributesKey( attributes ) {\n\n\t\tvar attributesKey = '';\n\n\t\tvar keys = Object.keys( attributes ).sort();\n\n\t\tfor ( var i = 0, il = keys.length; i < il; i ++ ) {\n\n\t\t\tattributesKey += keys[ i ] + ':' + attributes[ keys[ i ] ] + ';';\n\n\t\t}\n\n\t\treturn attributesKey;\n\n\t}\n\n\t/* GLTF PARSER */\n\n\tfunction GLTFParser( json, extensions, options ) {\n\n\t\tthis.json = json || {};\n\t\tthis.extensions = extensions || {};\n\t\tthis.options = options || {};\n\n\t\t// loader object cache\n\t\tthis.cache = new GLTFRegistry();\n\n\t\t// BufferGeometry caching\n\t\tthis.primitiveCache = {};\n\n\t\tthis.textureLoader = new THREE.TextureLoader( this.options.manager );\n\t\tthis.textureLoader.setCrossOrigin( this.options.crossOrigin );\n\n\t\tthis.fileLoader = new THREE.FileLoader( this.options.manager );\n\t\tthis.fileLoader.setResponseType( 'arraybuffer' );\n\n\t\tif ( this.options.crossOrigin === 'use-credentials' ) {\n\n\t\t\tthis.fileLoader.setWithCredentials( true );\n\n\t\t}\n\n\t}\n\n\tGLTFParser.prototype.parse = function ( onLoad, onError ) {\n\n\t\tvar parser = this;\n\t\tvar json = this.json;\n\t\tvar extensions = this.extensions;\n\n\t\t// Clear the loader cache\n\t\tthis.cache.removeAll();\n\n\t\t// Mark the special nodes/meshes in json for efficient parse\n\t\tthis.markDefs();\n\n\t\tPromise.all( [\n\n\t\t\tthis.getDependencies( 'scene' ),\n\t\t\tthis.getDependencies( 'animation' ),\n\t\t\tthis.getDependencies( 'camera' ),\n\n\t\t] ).then( function ( dependencies ) {\n\n\t\t\tvar result = {\n\t\t\t\tscene: dependencies[ 0 ][ json.scene || 0 ],\n\t\t\t\tscenes: dependencies[ 0 ],\n\t\t\t\tanimations: dependencies[ 1 ],\n\t\t\t\tcameras: dependencies[ 2 ],\n\t\t\t\tasset: json.asset,\n\t\t\t\tparser: parser,\n\t\t\t\tuserData: {}\n\t\t\t};\n\n\t\t\taddUnknownExtensionsToUserData( extensions, result, json );\n\n\t\t\tassignExtrasToUserData( result, json );\n\n\t\t\tonLoad( result );\n\n\t\t} ).catch( onError );\n\n\t};\n\n\t/**\n\t * Marks the special nodes/meshes in json for efficient parse.\n\t */\n\tGLTFParser.prototype.markDefs = function () {\n\n\t\tvar nodeDefs = this.json.nodes || [];\n\t\tvar skinDefs = this.json.skins || [];\n\t\tvar meshDefs = this.json.meshes || [];\n\n\t\tvar meshReferences = {};\n\t\tvar meshUses = {};\n\n\t\t// Nothing in the node definition indicates whether it is a Bone or an\n\t\t// Object3D. Use the skins' joint references to mark bones.\n\t\tfor ( var skinIndex = 0, skinLength = skinDefs.length; skinIndex < skinLength; skinIndex ++ ) {\n\n\t\t\tvar joints = skinDefs[ skinIndex ].joints;\n\n\t\t\tfor ( var i = 0, il = joints.length; i < il; i ++ ) {\n\n\t\t\t\tnodeDefs[ joints[ i ] ].isBone = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Meshes can (and should) be reused by multiple nodes in a glTF asset. To\n\t\t// avoid having more than one THREE.Mesh with the same name, count\n\t\t// references and rename instances below.\n\t\t//\n\t\t// Example: CesiumMilkTruck sample model reuses \"Wheel\" meshes.\n\t\tfor ( var nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex ++ ) {\n\n\t\t\tvar nodeDef = nodeDefs[ nodeIndex ];\n\n\t\t\tif ( nodeDef.mesh !== undefined ) {\n\n\t\t\t\tif ( meshReferences[ nodeDef.mesh ] === undefined ) {\n\n\t\t\t\t\tmeshReferences[ nodeDef.mesh ] = meshUses[ nodeDef.mesh ] = 0;\n\n\t\t\t\t}\n\n\t\t\t\tmeshReferences[ nodeDef.mesh ] ++;\n\n\t\t\t\t// Nothing in the mesh definition indicates whether it is\n\t\t\t\t// a SkinnedMesh or Mesh. Use the node's mesh reference\n\t\t\t\t// to mark SkinnedMesh if node has skin.\n\t\t\t\tif ( nodeDef.skin !== undefined ) {\n\n\t\t\t\t\tmeshDefs[ nodeDef.mesh ].isSkinnedMesh = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.json.meshReferences = meshReferences;\n\t\tthis.json.meshUses = meshUses;\n\n\t};\n\n\t/**\n\t * Requests the specified dependency asynchronously, with caching.\n\t * @param {string} type\n\t * @param {number} index\n\t * @return {Promise<THREE.Object3D|THREE.Material|THREE.Texture|THREE.AnimationClip|ArrayBuffer|Object>}\n\t */\n\tGLTFParser.prototype.getDependency = function ( type, index ) {\n\n\t\tvar cacheKey = type + ':' + index;\n\t\tvar dependency = this.cache.get( cacheKey );\n\n\t\tif ( ! dependency ) {\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 'scene':\n\t\t\t\t\tdependency = this.loadScene( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'node':\n\t\t\t\t\tdependency = this.loadNode( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'mesh':\n\t\t\t\t\tdependency = this.loadMesh( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'accessor':\n\t\t\t\t\tdependency = this.loadAccessor( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'bufferView':\n\t\t\t\t\tdependency = this.loadBufferView( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'buffer':\n\t\t\t\t\tdependency = this.loadBuffer( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'material':\n\t\t\t\t\tdependency = this.loadMaterial( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'texture':\n\t\t\t\t\tdependency = this.loadTexture( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'skin':\n\t\t\t\t\tdependency = this.loadSkin( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'animation':\n\t\t\t\t\tdependency = this.loadAnimation( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'camera':\n\t\t\t\t\tdependency = this.loadCamera( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'light':\n\t\t\t\t\tdependency = this.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].loadLight( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'Unknown type: ' + type );\n\n\t\t\t}\n\n\t\t\tthis.cache.add( cacheKey, dependency );\n\n\t\t}\n\n\t\treturn dependency;\n\n\t};\n\n\t/**\n\t * Requests all dependencies of the specified type asynchronously, with caching.\n\t * @param {string} type\n\t * @return {Promise<Array<Object>>}\n\t */\n\tGLTFParser.prototype.getDependencies = function ( type ) {\n\n\t\tvar dependencies = this.cache.get( type );\n\n\t\tif ( ! dependencies ) {\n\n\t\t\tvar parser = this;\n\t\t\tvar defs = this.json[ type + ( type === 'mesh' ? 'es' : 's' ) ] || [];\n\n\t\t\tdependencies = Promise.all( defs.map( function ( def, index ) {\n\n\t\t\t\treturn parser.getDependency( type, index );\n\n\t\t\t} ) );\n\n\t\t\tthis.cache.add( type, dependencies );\n\n\t\t}\n\n\t\treturn dependencies;\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views\n\t * @param {number} bufferIndex\n\t * @return {Promise<ArrayBuffer>}\n\t */\n\tGLTFParser.prototype.loadBuffer = function ( bufferIndex ) {\n\n\t\tvar bufferDef = this.json.buffers[ bufferIndex ];\n\t\tvar loader = this.fileLoader;\n\n\t\tif ( bufferDef.type && bufferDef.type !== 'arraybuffer' ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: ' + bufferDef.type + ' buffer type is not supported.' );\n\n\t\t}\n\n\t\t// If present, GLB container is required to be the first buffer.\n\t\tif ( bufferDef.uri === undefined && bufferIndex === 0 ) {\n\n\t\t\treturn Promise.resolve( this.extensions[ EXTENSIONS.KHR_BINARY_GLTF ].body );\n\n\t\t}\n\n\t\tvar options = this.options;\n\n\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\tloader.load( resolveURL( bufferDef.uri, options.path ), resolve, undefined, function () {\n\n\t\t\t\treject( new Error( 'THREE.GLTFLoader: Failed to load buffer \"' + bufferDef.uri + '\".' ) );\n\n\t\t\t} );\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views\n\t * @param {number} bufferViewIndex\n\t * @return {Promise<ArrayBuffer>}\n\t */\n\tGLTFParser.prototype.loadBufferView = function ( bufferViewIndex ) {\n\n\t\tvar bufferViewDef = this.json.bufferViews[ bufferViewIndex ];\n\n\t\treturn this.getDependency( 'buffer', bufferViewDef.buffer ).then( function ( buffer ) {\n\n\t\t\tvar byteLength = bufferViewDef.byteLength || 0;\n\t\t\tvar byteOffset = bufferViewDef.byteOffset || 0;\n\t\t\treturn buffer.slice( byteOffset, byteOffset + byteLength );\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#accessors\n\t * @param {number} accessorIndex\n\t * @return {Promise<THREE.BufferAttribute|THREE.InterleavedBufferAttribute>}\n\t */\n\tGLTFParser.prototype.loadAccessor = function ( accessorIndex ) {\n\n\t\tvar parser = this;\n\t\tvar json = this.json;\n\n\t\tvar accessorDef = this.json.accessors[ accessorIndex ];\n\n\t\tif ( accessorDef.bufferView === undefined && accessorDef.sparse === undefined ) {\n\n\t\t\t// Ignore empty accessors, which may be used to declare runtime\n\t\t\t// information about attributes coming from another source (e.g. Draco\n\t\t\t// compression extension).\n\t\t\treturn Promise.resolve( null );\n\n\t\t}\n\n\t\tvar pendingBufferViews = [];\n\n\t\tif ( accessorDef.bufferView !== undefined ) {\n\n\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.bufferView ) );\n\n\t\t} else {\n\n\t\t\tpendingBufferViews.push( null );\n\n\t\t}\n\n\t\tif ( accessorDef.sparse !== undefined ) {\n\n\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.indices.bufferView ) );\n\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.values.bufferView ) );\n\n\t\t}\n\n\t\treturn Promise.all( pendingBufferViews ).then( function ( bufferViews ) {\n\n\t\t\tvar bufferView = bufferViews[ 0 ];\n\n\t\t\tvar itemSize = WEBGL_TYPE_SIZES[ accessorDef.type ];\n\t\t\tvar TypedArray = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];\n\n\t\t\t// For VEC3: itemSize is 3, elementBytes is 4, itemBytes is 12.\n\t\t\tvar elementBytes = TypedArray.BYTES_PER_ELEMENT;\n\t\t\tvar itemBytes = elementBytes * itemSize;\n\t\t\tvar byteOffset = accessorDef.byteOffset || 0;\n\t\t\tvar byteStride = accessorDef.bufferView !== undefined ? json.bufferViews[ accessorDef.bufferView ].byteStride : undefined;\n\t\t\tvar normalized = accessorDef.normalized === true;\n\t\t\tvar array, bufferAttribute;\n\n\t\t\t// The buffer is not interleaved if the stride is the item size in bytes.\n\t\t\tif ( byteStride && byteStride !== itemBytes ) {\n\n\t\t\t\t// Each \"slice\" of the buffer, as defined by 'count' elements of 'byteStride' bytes, gets its own InterleavedBuffer\n\t\t\t\t// This makes sure that IBA.count reflects accessor.count properly\n\t\t\t\tvar ibSlice = Math.floor( byteOffset / byteStride );\n\t\t\t\tvar ibCacheKey = 'InterleavedBuffer:' + accessorDef.bufferView + ':' + accessorDef.componentType + ':' + ibSlice + ':' + accessorDef.count;\n\t\t\t\tvar ib = parser.cache.get( ibCacheKey );\n\n\t\t\t\tif ( ! ib ) {\n\n\t\t\t\t\tarray = new TypedArray( bufferView, ibSlice * byteStride, accessorDef.count * byteStride / elementBytes );\n\n\t\t\t\t\t// Integer parameters to IB/IBA are in array elements, not bytes.\n\t\t\t\t\tib = new THREE.InterleavedBuffer( array, byteStride / elementBytes );\n\n\t\t\t\t\tparser.cache.add( ibCacheKey, ib );\n\n\t\t\t\t}\n\n\t\t\t\tbufferAttribute = new THREE.InterleavedBufferAttribute( ib, itemSize, ( byteOffset % byteStride ) / elementBytes, normalized );\n\n\t\t\t} else {\n\n\t\t\t\tif ( bufferView === null ) {\n\n\t\t\t\t\tarray = new TypedArray( accessorDef.count * itemSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tarray = new TypedArray( bufferView, byteOffset, accessorDef.count * itemSize );\n\n\t\t\t\t}\n\n\t\t\t\tbufferAttribute = new THREE.BufferAttribute( array, itemSize, normalized );\n\n\t\t\t}\n\n\t\t\t// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#sparse-accessors\n\t\t\tif ( accessorDef.sparse !== undefined ) {\n\n\t\t\t\tvar itemSizeIndices = WEBGL_TYPE_SIZES.SCALAR;\n\t\t\t\tvar TypedArrayIndices = WEBGL_COMPONENT_TYPES[ accessorDef.sparse.indices.componentType ];\n\n\t\t\t\tvar byteOffsetIndices = accessorDef.sparse.indices.byteOffset || 0;\n\t\t\t\tvar byteOffsetValues = accessorDef.sparse.values.byteOffset || 0;\n\n\t\t\t\tvar sparseIndices = new TypedArrayIndices( bufferViews[ 1 ], byteOffsetIndices, accessorDef.sparse.count * itemSizeIndices );\n\t\t\t\tvar sparseValues = new TypedArray( bufferViews[ 2 ], byteOffsetValues, accessorDef.sparse.count * itemSize );\n\n\t\t\t\tif ( bufferView !== null ) {\n\n\t\t\t\t\t// Avoid modifying the original ArrayBuffer, if the bufferView wasn't initialized with zeroes.\n\t\t\t\t\tbufferAttribute = new THREE.BufferAttribute( bufferAttribute.array.slice(), bufferAttribute.itemSize, bufferAttribute.normalized );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0, il = sparseIndices.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar index = sparseIndices[ i ];\n\n\t\t\t\t\tbufferAttribute.setX( index, sparseValues[ i * itemSize ] );\n\t\t\t\t\tif ( itemSize >= 2 ) bufferAttribute.setY( index, sparseValues[ i * itemSize + 1 ] );\n\t\t\t\t\tif ( itemSize >= 3 ) bufferAttribute.setZ( index, sparseValues[ i * itemSize + 2 ] );\n\t\t\t\t\tif ( itemSize >= 4 ) bufferAttribute.setW( index, sparseValues[ i * itemSize + 3 ] );\n\t\t\t\t\tif ( itemSize >= 5 ) throw new Error( 'THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn bufferAttribute;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#textures\n\t * @param {number} textureIndex\n\t * @return {Promise<THREE.Texture>}\n\t */\n\tGLTFParser.prototype.loadTexture = function ( textureIndex ) {\n\n\t\tvar parser = this;\n\t\tvar json = this.json;\n\t\tvar options = this.options;\n\t\tvar textureLoader = this.textureLoader;\n\n\t\tvar URL = window.URL || window.webkitURL;\n\n\t\tvar textureDef = json.textures[ textureIndex ];\n\n\t\tvar textureExtensions = textureDef.extensions || {};\n\n\t\tvar source;\n\n\t\tif ( textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ] ) {\n\n\t\t\tsource = json.images[ textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ].source ];\n\n\t\t} else {\n\n\t\t\tsource = json.images[ textureDef.source ];\n\n\t\t}\n\n\t\tvar sourceURI = source.uri;\n\t\tvar isObjectURL = false;\n\n\t\tif ( source.bufferView !== undefined ) {\n\n\t\t\t// Load binary image data from bufferView, if provided.\n\n\t\t\tsourceURI = parser.getDependency( 'bufferView', source.bufferView ).then( function ( bufferView ) {\n\n\t\t\t\tisObjectURL = true;\n\t\t\t\tvar blob = new Blob( [ bufferView ], { type: source.mimeType } );\n\t\t\t\tsourceURI = URL.createObjectURL( blob );\n\t\t\t\treturn sourceURI;\n\n\t\t\t} );\n\n\t\t}\n\n\t\treturn Promise.resolve( sourceURI ).then( function ( sourceURI ) {\n\n\t\t\t// Load Texture resource.\n\n\t\t\tvar loader = options.manager.getHandler( sourceURI );\n\n\t\t\tif ( ! loader ) {\n\n\t\t\t\tloader = textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ]\n\t\t\t\t\t? parser.extensions[ EXTENSIONS.MSFT_TEXTURE_DDS ].ddsLoader\n\t\t\t\t\t: textureLoader;\n\n\t\t\t}\n\n\t\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\t\tloader.load( resolveURL( sourceURI, options.path ), resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t} ).then( function ( texture ) {\n\n\t\t\t// Clean up resources and configure Texture.\n\n\t\t\tif ( isObjectURL === true ) {\n\n\t\t\t\tURL.revokeObjectURL( sourceURI );\n\n\t\t\t}\n\n\t\t\ttexture.flipY = false;\n\n\t\t\tif ( textureDef.name !== undefined ) texture.name = textureDef.name;\n\n\t\t\t// Ignore unknown mime types, like DDS files.\n\t\t\tif ( source.mimeType in MIME_TYPE_FORMATS ) {\n\n\t\t\t\ttexture.format = MIME_TYPE_FORMATS[ source.mimeType ];\n\n\t\t\t}\n\n\t\t\tvar samplers = json.samplers || {};\n\t\t\tvar sampler = samplers[ textureDef.sampler ] || {};\n\n\t\t\ttexture.magFilter = WEBGL_FILTERS[ sampler.magFilter ] || THREE.LinearFilter;\n\t\t\ttexture.minFilter = WEBGL_FILTERS[ sampler.minFilter ] || THREE.LinearMipmapLinearFilter;\n\t\t\ttexture.wrapS = WEBGL_WRAPPINGS[ sampler.wrapS ] || THREE.RepeatWrapping;\n\t\t\ttexture.wrapT = WEBGL_WRAPPINGS[ sampler.wrapT ] || THREE.RepeatWrapping;\n\n\t\t\treturn texture;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Asynchronously assigns a texture to the given material parameters.\n\t * @param {Object} materialParams\n\t * @param {string} mapName\n\t * @param {Object} mapDef\n\t * @return {Promise}\n\t */\n\tGLTFParser.prototype.assignTexture = function ( materialParams, mapName, mapDef ) {\n\n\t\tvar parser = this;\n\n\t\treturn this.getDependency( 'texture', mapDef.index ).then( function ( texture ) {\n\n\t\t\tif ( ! texture.isCompressedTexture ) {\n\n\t\t\t\tswitch ( mapName ) {\n\n\t\t\t\t\tcase 'aoMap':\n\t\t\t\t\tcase 'emissiveMap':\n\t\t\t\t\tcase 'metalnessMap':\n\t\t\t\t\tcase 'normalMap':\n\t\t\t\t\tcase 'roughnessMap':\n\t\t\t\t\t\ttexture.format = THREE.RGBFormat;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( parser.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ] ) {\n\n\t\t\t\tvar transform = mapDef.extensions !== undefined ? mapDef.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ] : undefined;\n\n\t\t\t\tif ( transform ) {\n\n\t\t\t\t\ttexture = parser.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ].extendTexture( texture, transform );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tmaterialParams[ mapName ] = texture;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Assigns final material to a Mesh, Line, or Points instance. The instance\n\t * already has a material (generated from the glTF material options alone)\n\t * but reuse of the same glTF material may require multiple threejs materials\n\t * to accomodate different primitive types, defines, etc. New materials will\n\t * be created if necessary, and reused from a cache.\n\t * @param  {THREE.Object3D} mesh Mesh, Line, or Points instance.\n\t */\n\tGLTFParser.prototype.assignFinalMaterial = function ( mesh ) {\n\n\t\tvar geometry = mesh.geometry;\n\t\tvar material = mesh.material;\n\t\tvar extensions = this.extensions;\n\n\t\tvar useVertexTangents = geometry.attributes.tangent !== undefined;\n\t\tvar useVertexColors = geometry.attributes.color !== undefined;\n\t\tvar useFlatShading = geometry.attributes.normal === undefined;\n\t\tvar useSkinning = mesh.isSkinnedMesh === true;\n\t\tvar useMorphTargets = Object.keys( geometry.morphAttributes ).length > 0;\n\t\tvar useMorphNormals = useMorphTargets && geometry.morphAttributes.normal !== undefined;\n\n\t\tif ( mesh.isPoints ) {\n\n\t\t\tvar cacheKey = 'PointsMaterial:' + material.uuid;\n\n\t\t\tvar pointsMaterial = this.cache.get( cacheKey );\n\n\t\t\tif ( ! pointsMaterial ) {\n\n\t\t\t\tpointsMaterial = new THREE.PointsMaterial();\n\t\t\t\tTHREE.Material.prototype.copy.call( pointsMaterial, material );\n\t\t\t\tpointsMaterial.color.copy( material.color );\n\t\t\t\tpointsMaterial.map = material.map;\n\t\t\t\tpointsMaterial.sizeAttenuation = false; // glTF spec says points should be 1px\n\n\t\t\t\tthis.cache.add( cacheKey, pointsMaterial );\n\n\t\t\t}\n\n\t\t\tmaterial = pointsMaterial;\n\n\t\t} else if ( mesh.isLine ) {\n\n\t\t\tvar cacheKey = 'LineBasicMaterial:' + material.uuid;\n\n\t\t\tvar lineMaterial = this.cache.get( cacheKey );\n\n\t\t\tif ( ! lineMaterial ) {\n\n\t\t\t\tlineMaterial = new THREE.LineBasicMaterial();\n\t\t\t\tTHREE.Material.prototype.copy.call( lineMaterial, material );\n\t\t\t\tlineMaterial.color.copy( material.color );\n\n\t\t\t\tthis.cache.add( cacheKey, lineMaterial );\n\n\t\t\t}\n\n\t\t\tmaterial = lineMaterial;\n\n\t\t}\n\n\t\t// Clone the material if it will be modified\n\t\tif ( useVertexTangents || useVertexColors || useFlatShading || useSkinning || useMorphTargets ) {\n\n\t\t\tvar cacheKey = 'ClonedMaterial:' + material.uuid + ':';\n\n\t\t\tif ( material.isGLTFSpecularGlossinessMaterial ) cacheKey += 'specular-glossiness:';\n\t\t\tif ( useSkinning ) cacheKey += 'skinning:';\n\t\t\tif ( useVertexTangents ) cacheKey += 'vertex-tangents:';\n\t\t\tif ( useVertexColors ) cacheKey += 'vertex-colors:';\n\t\t\tif ( useFlatShading ) cacheKey += 'flat-shading:';\n\t\t\tif ( useMorphTargets ) cacheKey += 'morph-targets:';\n\t\t\tif ( useMorphNormals ) cacheKey += 'morph-normals:';\n\n\t\t\tvar cachedMaterial = this.cache.get( cacheKey );\n\n\t\t\tif ( ! cachedMaterial ) {\n\n\t\t\t\tcachedMaterial = material.isGLTFSpecularGlossinessMaterial\n\t\t\t\t\t? extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ].cloneMaterial( material )\n\t\t\t\t\t: material.clone();\n\n\t\t\t\tif ( useSkinning ) cachedMaterial.skinning = true;\n\t\t\t\tif ( useVertexTangents ) cachedMaterial.vertexTangents = true;\n\t\t\t\tif ( useVertexColors ) cachedMaterial.vertexColors = THREE.VertexColors;\n\t\t\t\tif ( useFlatShading ) cachedMaterial.flatShading = true;\n\t\t\t\tif ( useMorphTargets ) cachedMaterial.morphTargets = true;\n\t\t\t\tif ( useMorphNormals ) cachedMaterial.morphNormals = true;\n\n\t\t\t\tthis.cache.add( cacheKey, cachedMaterial );\n\n\t\t\t}\n\n\t\t\tmaterial = cachedMaterial;\n\n\t\t}\n\n\t\t// workarounds for mesh and geometry\n\n\t\tif ( material.aoMap && geometry.attributes.uv2 === undefined && geometry.attributes.uv !== undefined ) {\n\n\t\t\tconsole.log( 'THREE.GLTFLoader: Duplicating UVs to support aoMap.' );\n\t\t\tgeometry.setAttribute( 'uv2', new THREE.BufferAttribute( geometry.attributes.uv.array, 2 ) );\n\n\t\t}\n\n\t\tif ( material.isGLTFSpecularGlossinessMaterial ) {\n\n\t\t\t// for GLTFSpecularGlossinessMaterial(ShaderMaterial) uniforms runtime update\n\t\t\tmesh.onBeforeRender = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ].refreshUniforms;\n\n\t\t}\n\n\t\tmesh.material = material;\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#materials\n\t * @param {number} materialIndex\n\t * @return {Promise<THREE.Material>}\n\t */\n\tGLTFParser.prototype.loadMaterial = function ( materialIndex ) {\n\n\t\tvar parser = this;\n\t\tvar json = this.json;\n\t\tvar extensions = this.extensions;\n\t\tvar materialDef = json.materials[ materialIndex ];\n\n\t\tvar materialType;\n\t\tvar materialParams = {};\n\t\tvar materialExtensions = materialDef.extensions || {};\n\n\t\tvar pending = [];\n\n\t\tif ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ] ) {\n\n\t\t\tvar sgExtension = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ];\n\t\t\tmaterialType = sgExtension.getMaterialType();\n\t\t\tpending.push( sgExtension.extendParams( materialParams, materialDef, parser ) );\n\n\t\t} else if ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_UNLIT ] ) {\n\n\t\t\tvar kmuExtension = extensions[ EXTENSIONS.KHR_MATERIALS_UNLIT ];\n\t\t\tmaterialType = kmuExtension.getMaterialType();\n\t\t\tpending.push( kmuExtension.extendParams( materialParams, materialDef, parser ) );\n\n\t\t} else {\n\n\t\t\t// Specification:\n\t\t\t// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#metallic-roughness-material\n\n\t\t\tmaterialType = THREE.MeshStandardMaterial;\n\n\t\t\tvar metallicRoughness = materialDef.pbrMetallicRoughness || {};\n\n\t\t\tmaterialParams.color = new THREE.Color( 1.0, 1.0, 1.0 );\n\t\t\tmaterialParams.opacity = 1.0;\n\n\t\t\tif ( Array.isArray( metallicRoughness.baseColorFactor ) ) {\n\n\t\t\t\tvar array = metallicRoughness.baseColorFactor;\n\n\t\t\t\tmaterialParams.color.fromArray( array );\n\t\t\t\tmaterialParams.opacity = array[ 3 ];\n\n\t\t\t}\n\n\t\t\tif ( metallicRoughness.baseColorTexture !== undefined ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture ) );\n\n\t\t\t}\n\n\t\t\tmaterialParams.metalness = metallicRoughness.metallicFactor !== undefined ? metallicRoughness.metallicFactor : 1.0;\n\t\t\tmaterialParams.roughness = metallicRoughness.roughnessFactor !== undefined ? metallicRoughness.roughnessFactor : 1.0;\n\n\t\t\tif ( metallicRoughness.metallicRoughnessTexture !== undefined ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'metalnessMap', metallicRoughness.metallicRoughnessTexture ) );\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'roughnessMap', metallicRoughness.metallicRoughnessTexture ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.doubleSided === true ) {\n\n\t\t\tmaterialParams.side = THREE.DoubleSide;\n\n\t\t}\n\n\t\tvar alphaMode = materialDef.alphaMode || ALPHA_MODES.OPAQUE;\n\n\t\tif ( alphaMode === ALPHA_MODES.BLEND ) {\n\n\t\t\tmaterialParams.transparent = true;\n\n\t\t} else {\n\n\t\t\tmaterialParams.transparent = false;\n\n\t\t\tif ( alphaMode === ALPHA_MODES.MASK ) {\n\n\t\t\t\tmaterialParams.alphaTest = materialDef.alphaCutoff !== undefined ? materialDef.alphaCutoff : 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.normalTexture !== undefined && materialType !== THREE.MeshBasicMaterial ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'normalMap', materialDef.normalTexture ) );\n\n\t\t\tmaterialParams.normalScale = new THREE.Vector2( 1, 1 );\n\n\t\t\tif ( materialDef.normalTexture.scale !== undefined ) {\n\n\t\t\t\tmaterialParams.normalScale.set( materialDef.normalTexture.scale, materialDef.normalTexture.scale );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.occlusionTexture !== undefined && materialType !== THREE.MeshBasicMaterial ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'aoMap', materialDef.occlusionTexture ) );\n\n\t\t\tif ( materialDef.occlusionTexture.strength !== undefined ) {\n\n\t\t\t\tmaterialParams.aoMapIntensity = materialDef.occlusionTexture.strength;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.emissiveFactor !== undefined && materialType !== THREE.MeshBasicMaterial ) {\n\n\t\t\tmaterialParams.emissive = new THREE.Color().fromArray( materialDef.emissiveFactor );\n\n\t\t}\n\n\t\tif ( materialDef.emissiveTexture !== undefined && materialType !== THREE.MeshBasicMaterial ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'emissiveMap', materialDef.emissiveTexture ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending ).then( function () {\n\n\t\t\tvar material;\n\n\t\t\tif ( materialType === THREE.ShaderMaterial ) {\n\n\t\t\t\tmaterial = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ].createMaterial( materialParams );\n\n\t\t\t} else {\n\n\t\t\t\tmaterial = new materialType( materialParams );\n\n\t\t\t}\n\n\t\t\tif ( materialDef.name !== undefined ) material.name = materialDef.name;\n\n\t\t\t// baseColorTexture, emissiveTexture, and specularGlossinessTexture use sRGB encoding.\n\t\t\tif ( material.map ) material.map.encoding = THREE.sRGBEncoding;\n\t\t\tif ( material.emissiveMap ) material.emissiveMap.encoding = THREE.sRGBEncoding;\n\t\t\tif ( material.specularMap ) material.specularMap.encoding = THREE.sRGBEncoding;\n\n\t\t\tassignExtrasToUserData( material, materialDef );\n\n\t\t\tif ( materialDef.extensions ) addUnknownExtensionsToUserData( extensions, material, materialDef );\n\n\t\t\treturn material;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * @param {THREE.BufferGeometry} geometry\n\t * @param {GLTF.Primitive} primitiveDef\n\t * @param {GLTFParser} parser\n\t */\n\tfunction computeBounds( geometry, primitiveDef, parser ) {\n\n\t\tvar attributes = primitiveDef.attributes;\n\n\t\tvar box = new THREE.Box3();\n\n\t\tif ( attributes.POSITION !== undefined ) {\n\n\t\t\tvar accessor = parser.json.accessors[ attributes.POSITION ];\n\t\t\tvar min = accessor.min;\n\t\t\tvar max = accessor.max;\n\n\t\t\tbox.set(\n\t\t\t\tnew THREE.Vector3( min[ 0 ], min[ 1 ], min[ 2 ] ),\n\t\t\t\tnew THREE.Vector3( max[ 0 ], max[ 1 ], max[ 2 ] ) );\n\n\t\t} else {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar targets = primitiveDef.targets;\n\n\t\tif ( targets !== undefined ) {\n\n\t\t\tvar vector = new THREE.Vector3();\n\n\t\t\tfor ( var i = 0, il = targets.length; i < il; i ++ ) {\n\n\t\t\t\tvar target = targets[ i ];\n\n\t\t\t\tif ( target.POSITION !== undefined ) {\n\n\t\t\t\t\tvar accessor = parser.json.accessors[ target.POSITION ];\n\t\t\t\t\tvar min = accessor.min;\n\t\t\t\t\tvar max = accessor.max;\n\n\t\t\t\t\t// we need to get max of absolute components because target weight is [-1,1]\n\t\t\t\t\tvector.setX( Math.max( Math.abs( min[ 0 ] ), Math.abs( max[ 0 ] ) ) );\n\t\t\t\t\tvector.setY( Math.max( Math.abs( min[ 1 ] ), Math.abs( max[ 1 ] ) ) );\n\t\t\t\t\tvector.setZ( Math.max( Math.abs( min[ 2 ] ), Math.abs( max[ 2 ] ) ) );\n\n\t\t\t\t\tbox.expandByVector( vector );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.boundingBox = box;\n\n\t\tvar sphere = new THREE.Sphere();\n\n\t\tbox.getCenter( sphere.center );\n\t\tsphere.radius = box.min.distanceTo( box.max ) / 2;\n\n\t\tgeometry.boundingSphere = sphere;\n\n\t}\n\n\t/**\n\t * @param {THREE.BufferGeometry} geometry\n\t * @param {GLTF.Primitive} primitiveDef\n\t * @param {GLTFParser} parser\n\t * @return {Promise<THREE.BufferGeometry>}\n\t */\n\tfunction addPrimitiveAttributes( geometry, primitiveDef, parser ) {\n\n\t\tvar attributes = primitiveDef.attributes;\n\n\t\tvar pending = [];\n\n\t\tfunction assignAttributeAccessor( accessorIndex, attributeName ) {\n\n\t\t\treturn parser.getDependency( 'accessor', accessorIndex )\n\t\t\t\t.then( function ( accessor ) {\n\n\t\t\t\t\tgeometry.setAttribute( attributeName, accessor );\n\n\t\t\t\t} );\n\n\t\t}\n\n\t\tfor ( var gltfAttributeName in attributes ) {\n\n\t\t\tvar threeAttributeName = ATTRIBUTES[ gltfAttributeName ] || gltfAttributeName.toLowerCase();\n\n\t\t\t// Skip attributes already provided by e.g. Draco extension.\n\t\t\tif ( threeAttributeName in geometry.attributes ) continue;\n\n\t\t\tpending.push( assignAttributeAccessor( attributes[ gltfAttributeName ], threeAttributeName ) );\n\n\t\t}\n\n\t\tif ( primitiveDef.indices !== undefined && ! geometry.index ) {\n\n\t\t\tvar accessor = parser.getDependency( 'accessor', primitiveDef.indices ).then( function ( accessor ) {\n\n\t\t\t\tgeometry.setIndex( accessor );\n\n\t\t\t} );\n\n\t\t\tpending.push( accessor );\n\n\t\t}\n\n\t\tassignExtrasToUserData( geometry, primitiveDef );\n\n\t\tcomputeBounds( geometry, primitiveDef, parser );\n\n\t\treturn Promise.all( pending ).then( function () {\n\n\t\t\treturn primitiveDef.targets !== undefined\n\t\t\t\t? addMorphTargets( geometry, primitiveDef.targets, parser )\n\t\t\t\t: geometry;\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#geometry\n\t *\n\t * Creates BufferGeometries from primitives.\n\t *\n\t * @param {Array<GLTF.Primitive>} primitives\n\t * @return {Promise<Array<THREE.BufferGeometry>>}\n\t */\n\tGLTFParser.prototype.loadGeometries = function ( primitives ) {\n\n\t\tvar parser = this;\n\t\tvar extensions = this.extensions;\n\t\tvar cache = this.primitiveCache;\n\n\t\tfunction createDracoPrimitive( primitive ) {\n\n\t\t\treturn extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ]\n\t\t\t\t.decodePrimitive( primitive, parser )\n\t\t\t\t.then( function ( geometry ) {\n\n\t\t\t\t\treturn addPrimitiveAttributes( geometry, primitive, parser );\n\n\t\t\t\t} );\n\n\t\t}\n\n\t\tvar pending = [];\n\n\t\tfor ( var i = 0, il = primitives.length; i < il; i ++ ) {\n\n\t\t\tvar primitive = primitives[ i ];\n\t\t\tvar cacheKey = createPrimitiveKey( primitive );\n\n\t\t\t// See if we've already created this geometry\n\t\t\tvar cached = cache[ cacheKey ];\n\n\t\t\tif ( cached ) {\n\n\t\t\t\t// Use the cached geometry if it exists\n\t\t\t\tpending.push( cached.promise );\n\n\t\t\t} else {\n\n\t\t\t\tvar geometryPromise;\n\n\t\t\t\tif ( primitive.extensions && primitive.extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ] ) {\n\n\t\t\t\t\t// Use DRACO geometry if available\n\t\t\t\t\tgeometryPromise = createDracoPrimitive( primitive );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Otherwise create a new geometry\n\t\t\t\t\tgeometryPromise = addPrimitiveAttributes( new THREE.BufferGeometry(), primitive, parser );\n\n\t\t\t\t}\n\n\t\t\t\t// Cache this geometry\n\t\t\t\tcache[ cacheKey ] = { primitive: primitive, promise: geometryPromise };\n\n\t\t\t\tpending.push( geometryPromise );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#meshes\n\t * @param {number} meshIndex\n\t * @return {Promise<THREE.Group|THREE.Mesh|THREE.SkinnedMesh>}\n\t */\n\tGLTFParser.prototype.loadMesh = function ( meshIndex ) {\n\n\t\tvar parser = this;\n\t\tvar json = this.json;\n\n\t\tvar meshDef = json.meshes[ meshIndex ];\n\t\tvar primitives = meshDef.primitives;\n\n\t\tvar pending = [];\n\n\t\tfor ( var i = 0, il = primitives.length; i < il; i ++ ) {\n\n\t\t\tvar material = primitives[ i ].material === undefined\n\t\t\t\t? createDefaultMaterial()\n\t\t\t\t: this.getDependency( 'material', primitives[ i ].material );\n\n\t\t\tpending.push( material );\n\n\t\t}\n\n\t\treturn Promise.all( pending ).then( function ( originalMaterials ) {\n\n\t\t\treturn parser.loadGeometries( primitives ).then( function ( geometries ) {\n\n\t\t\t\tvar meshes = [];\n\n\t\t\t\tfor ( var i = 0, il = geometries.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar geometry = geometries[ i ];\n\t\t\t\t\tvar primitive = primitives[ i ];\n\n\t\t\t\t\t// 1. create Mesh\n\n\t\t\t\t\tvar mesh;\n\n\t\t\t\t\tvar material = originalMaterials[ i ];\n\n\t\t\t\t\tif ( primitive.mode === WEBGL_CONSTANTS.TRIANGLES ||\n\t\t\t\t\t\tprimitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ||\n\t\t\t\t\t\tprimitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ||\n\t\t\t\t\t\tprimitive.mode === undefined ) {\n\n\t\t\t\t\t\t// .isSkinnedMesh isn't in glTF spec. See .markDefs()\n\t\t\t\t\t\tmesh = meshDef.isSkinnedMesh === true\n\t\t\t\t\t\t\t? new THREE.SkinnedMesh( geometry, material )\n\t\t\t\t\t\t\t: new THREE.Mesh( geometry, material );\n\n\t\t\t\t\t\tif ( mesh.isSkinnedMesh === true && ! mesh.geometry.attributes.skinWeight.normalized ) {\n\n\t\t\t\t\t\t\t// we normalize floating point skin weight array to fix malformed assets (see #15319)\n\t\t\t\t\t\t\t// it's important to skip this for non-float32 data since normalizeSkinWeights assumes non-normalized inputs\n\t\t\t\t\t\t\tmesh.normalizeSkinWeights();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ) {\n\n\t\t\t\t\t\t\tmesh.drawMode = THREE.TriangleStripDrawMode;\n\n\t\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ) {\n\n\t\t\t\t\t\t\tmesh.drawMode = THREE.TriangleFanDrawMode;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINES ) {\n\n\t\t\t\t\t\tmesh = new THREE.LineSegments( geometry, material );\n\n\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINE_STRIP ) {\n\n\t\t\t\t\t\tmesh = new THREE.Line( geometry, material );\n\n\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINE_LOOP ) {\n\n\t\t\t\t\t\tmesh = new THREE.LineLoop( geometry, material );\n\n\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.POINTS ) {\n\n\t\t\t\t\t\tmesh = new THREE.Points( geometry, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( 'THREE.GLTFLoader: Primitive mode unsupported: ' + primitive.mode );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( Object.keys( mesh.geometry.morphAttributes ).length > 0 ) {\n\n\t\t\t\t\t\tupdateMorphTargets( mesh, meshDef );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmesh.name = meshDef.name || ( 'mesh_' + meshIndex );\n\n\t\t\t\t\tif ( geometries.length > 1 ) mesh.name += '_' + i;\n\n\t\t\t\t\tassignExtrasToUserData( mesh, meshDef );\n\n\t\t\t\t\tparser.assignFinalMaterial( mesh );\n\n\t\t\t\t\tmeshes.push( mesh );\n\n\t\t\t\t}\n\n\t\t\t\tif ( meshes.length === 1 ) {\n\n\t\t\t\t\treturn meshes[ 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tvar group = new THREE.Group();\n\n\t\t\t\tfor ( var i = 0, il = meshes.length; i < il; i ++ ) {\n\n\t\t\t\t\tgroup.add( meshes[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn group;\n\n\t\t\t} );\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#cameras\n\t * @param {number} cameraIndex\n\t * @return {Promise<THREE.Camera>}\n\t */\n\tGLTFParser.prototype.loadCamera = function ( cameraIndex ) {\n\n\t\tvar camera;\n\t\tvar cameraDef = this.json.cameras[ cameraIndex ];\n\t\tvar params = cameraDef[ cameraDef.type ];\n\n\t\tif ( ! params ) {\n\n\t\t\tconsole.warn( 'THREE.GLTFLoader: Missing camera parameters.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( cameraDef.type === 'perspective' ) {\n\n\t\t\tcamera = new THREE.PerspectiveCamera( THREE.Math.radToDeg( params.yfov ), params.aspectRatio || 1, params.znear || 1, params.zfar || 2e6 );\n\n\t\t} else if ( cameraDef.type === 'orthographic' ) {\n\n\t\t\tcamera = new THREE.OrthographicCamera( params.xmag / - 2, params.xmag / 2, params.ymag / 2, params.ymag / - 2, params.znear, params.zfar );\n\n\t\t}\n\n\t\tif ( cameraDef.name !== undefined ) camera.name = cameraDef.name;\n\n\t\tassignExtrasToUserData( camera, cameraDef );\n\n\t\treturn Promise.resolve( camera );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins\n\t * @param {number} skinIndex\n\t * @return {Promise<Object>}\n\t */\n\tGLTFParser.prototype.loadSkin = function ( skinIndex ) {\n\n\t\tvar skinDef = this.json.skins[ skinIndex ];\n\n\t\tvar skinEntry = { joints: skinDef.joints };\n\n\t\tif ( skinDef.inverseBindMatrices === undefined ) {\n\n\t\t\treturn Promise.resolve( skinEntry );\n\n\t\t}\n\n\t\treturn this.getDependency( 'accessor', skinDef.inverseBindMatrices ).then( function ( accessor ) {\n\n\t\t\tskinEntry.inverseBindMatrices = accessor;\n\n\t\t\treturn skinEntry;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#animations\n\t * @param {number} animationIndex\n\t * @return {Promise<THREE.AnimationClip>}\n\t */\n\tGLTFParser.prototype.loadAnimation = function ( animationIndex ) {\n\n\t\tvar json = this.json;\n\n\t\tvar animationDef = json.animations[ animationIndex ];\n\n\t\tvar pendingNodes = [];\n\t\tvar pendingInputAccessors = [];\n\t\tvar pendingOutputAccessors = [];\n\t\tvar pendingSamplers = [];\n\t\tvar pendingTargets = [];\n\n\t\tfor ( var i = 0, il = animationDef.channels.length; i < il; i ++ ) {\n\n\t\t\tvar channel = animationDef.channels[ i ];\n\t\t\tvar sampler = animationDef.samplers[ channel.sampler ];\n\t\t\tvar target = channel.target;\n\t\t\tvar name = target.node !== undefined ? target.node : target.id; // NOTE: target.id is deprecated.\n\t\t\tvar input = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.input ] : sampler.input;\n\t\t\tvar output = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.output ] : sampler.output;\n\n\t\t\tpendingNodes.push( this.getDependency( 'node', name ) );\n\t\t\tpendingInputAccessors.push( this.getDependency( 'accessor', input ) );\n\t\t\tpendingOutputAccessors.push( this.getDependency( 'accessor', output ) );\n\t\t\tpendingSamplers.push( sampler );\n\t\t\tpendingTargets.push( target );\n\n\t\t}\n\n\t\treturn Promise.all( [\n\n\t\t\tPromise.all( pendingNodes ),\n\t\t\tPromise.all( pendingInputAccessors ),\n\t\t\tPromise.all( pendingOutputAccessors ),\n\t\t\tPromise.all( pendingSamplers ),\n\t\t\tPromise.all( pendingTargets )\n\n\t\t] ).then( function ( dependencies ) {\n\n\t\t\tvar nodes = dependencies[ 0 ];\n\t\t\tvar inputAccessors = dependencies[ 1 ];\n\t\t\tvar outputAccessors = dependencies[ 2 ];\n\t\t\tvar samplers = dependencies[ 3 ];\n\t\t\tvar targets = dependencies[ 4 ];\n\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0, il = nodes.length; i < il; i ++ ) {\n\n\t\t\t\tvar node = nodes[ i ];\n\t\t\t\tvar inputAccessor = inputAccessors[ i ];\n\t\t\t\tvar outputAccessor = outputAccessors[ i ];\n\t\t\t\tvar sampler = samplers[ i ];\n\t\t\t\tvar target = targets[ i ];\n\n\t\t\t\tif ( node === undefined ) continue;\n\n\t\t\t\tnode.updateMatrix();\n\t\t\t\tnode.matrixAutoUpdate = true;\n\n\t\t\t\tvar TypedKeyframeTrack;\n\n\t\t\t\tswitch ( PATH_PROPERTIES[ target.path ] ) {\n\n\t\t\t\t\tcase PATH_PROPERTIES.weights:\n\n\t\t\t\t\t\tTypedKeyframeTrack = THREE.NumberKeyframeTrack;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase PATH_PROPERTIES.rotation:\n\n\t\t\t\t\t\tTypedKeyframeTrack = THREE.QuaternionKeyframeTrack;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase PATH_PROPERTIES.position:\n\t\t\t\t\tcase PATH_PROPERTIES.scale:\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tTypedKeyframeTrack = THREE.VectorKeyframeTrack;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tvar targetName = node.name ? node.name : node.uuid;\n\n\t\t\t\tvar interpolation = sampler.interpolation !== undefined ? INTERPOLATION[ sampler.interpolation ] : THREE.InterpolateLinear;\n\n\t\t\t\tvar targetNames = [];\n\n\t\t\t\tif ( PATH_PROPERTIES[ target.path ] === PATH_PROPERTIES.weights ) {\n\n\t\t\t\t\t// Node may be a THREE.Group (glTF mesh with several primitives) or a THREE.Mesh.\n\t\t\t\t\tnode.traverse( function ( object ) {\n\n\t\t\t\t\t\tif ( object.isMesh === true && object.morphTargetInfluences ) {\n\n\t\t\t\t\t\t\ttargetNames.push( object.name ? object.name : object.uuid );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttargetNames.push( targetName );\n\n\t\t\t\t}\n\n\t\t\t\tvar outputArray = outputAccessor.array;\n\n\t\t\t\tif ( outputAccessor.normalized ) {\n\n\t\t\t\t\tvar scale;\n\n\t\t\t\t\tif ( outputArray.constructor === Int8Array ) {\n\n\t\t\t\t\t\tscale = 1 / 127;\n\n\t\t\t\t\t} else if ( outputArray.constructor === Uint8Array ) {\n\n\t\t\t\t\t\tscale = 1 / 255;\n\n\t\t\t\t\t} else if ( outputArray.constructor == Int16Array ) {\n\n\t\t\t\t\t\tscale = 1 / 32767;\n\n\t\t\t\t\t} else if ( outputArray.constructor === Uint16Array ) {\n\n\t\t\t\t\t\tscale = 1 / 65535;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( 'THREE.GLTFLoader: Unsupported output accessor component type.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar scaled = new Float32Array( outputArray.length );\n\n\t\t\t\t\tfor ( var j = 0, jl = outputArray.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tscaled[ j ] = outputArray[ j ] * scale;\n\n\t\t\t\t\t}\n\n\t\t\t\t\toutputArray = scaled;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = targetNames.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar track = new TypedKeyframeTrack(\n\t\t\t\t\t\ttargetNames[ j ] + '.' + PATH_PROPERTIES[ target.path ],\n\t\t\t\t\t\tinputAccessor.array,\n\t\t\t\t\t\toutputArray,\n\t\t\t\t\t\tinterpolation\n\t\t\t\t\t);\n\n\t\t\t\t\t// Override interpolation with custom factory method.\n\t\t\t\t\tif ( sampler.interpolation === 'CUBICSPLINE' ) {\n\n\t\t\t\t\t\ttrack.createInterpolant = function InterpolantFactoryMethodGLTFCubicSpline( result ) {\n\n\t\t\t\t\t\t\t// A CUBICSPLINE keyframe in glTF has three output values for each input value,\n\t\t\t\t\t\t\t// representing inTangent, splineVertex, and outTangent. As a result, track.getValueSize()\n\t\t\t\t\t\t\t// must be divided by three to get the interpolant's sampleSize argument.\n\n\t\t\t\t\t\t\treturn new GLTFCubicSplineInterpolant( this.times, this.values, this.getValueSize() / 3, result );\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// Mark as CUBICSPLINE. `track.getInterpolation()` doesn't support custom interpolants.\n\t\t\t\t\t\ttrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttracks.push( track );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar name = animationDef.name !== undefined ? animationDef.name : 'animation_' + animationIndex;\n\n\t\t\treturn new THREE.AnimationClip( name, undefined, tracks );\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#nodes-and-hierarchy\n\t * @param {number} nodeIndex\n\t * @return {Promise<THREE.Object3D>}\n\t */\n\tGLTFParser.prototype.loadNode = function ( nodeIndex ) {\n\n\t\tvar json = this.json;\n\t\tvar extensions = this.extensions;\n\t\tvar parser = this;\n\n\t\tvar meshReferences = json.meshReferences;\n\t\tvar meshUses = json.meshUses;\n\n\t\tvar nodeDef = json.nodes[ nodeIndex ];\n\n\t\treturn ( function () {\n\n\t\t\tvar pending = [];\n\n\t\t\tif ( nodeDef.mesh !== undefined ) {\n\n\t\t\t\tpending.push( parser.getDependency( 'mesh', nodeDef.mesh ).then( function ( mesh ) {\n\n\t\t\t\t\tvar node;\n\n\t\t\t\t\tif ( meshReferences[ nodeDef.mesh ] > 1 ) {\n\n\t\t\t\t\t\tvar instanceNum = meshUses[ nodeDef.mesh ] ++;\n\n\t\t\t\t\t\tnode = mesh.clone();\n\t\t\t\t\t\tnode.name += '_instance_' + instanceNum;\n\n\t\t\t\t\t\t// onBeforeRender copy for Specular-Glossiness\n\t\t\t\t\t\tnode.onBeforeRender = mesh.onBeforeRender;\n\n\t\t\t\t\t\tfor ( var i = 0, il = node.children.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tnode.children[ i ].name += '_instance_' + instanceNum;\n\t\t\t\t\t\t\tnode.children[ i ].onBeforeRender = mesh.children[ i ].onBeforeRender;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tnode = mesh;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// if weights are provided on the node, override weights on the mesh.\n\t\t\t\t\tif ( nodeDef.weights !== undefined ) {\n\n\t\t\t\t\t\tnode.traverse( function ( o ) {\n\n\t\t\t\t\t\t\tif ( ! o.isMesh ) return;\n\n\t\t\t\t\t\t\tfor ( var i = 0, il = nodeDef.weights.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\t\to.morphTargetInfluences[ i ] = nodeDef.weights[ i ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn node;\n\n\t\t\t\t} ) );\n\n\t\t\t}\n\n\t\t\tif ( nodeDef.camera !== undefined ) {\n\n\t\t\t\tpending.push( parser.getDependency( 'camera', nodeDef.camera ) );\n\n\t\t\t}\n\n\t\t\tif ( nodeDef.extensions\n\t\t\t\t&& nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ]\n\t\t\t\t&& nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].light !== undefined ) {\n\n\t\t\t\tpending.push( parser.getDependency( 'light', nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].light ) );\n\n\t\t\t}\n\n\t\t\treturn Promise.all( pending );\n\n\t\t}() ).then( function ( objects ) {\n\n\t\t\tvar node;\n\n\t\t\t// .isBone isn't in glTF spec. See .markDefs\n\t\t\tif ( nodeDef.isBone === true ) {\n\n\t\t\t\tnode = new THREE.Bone();\n\n\t\t\t} else if ( objects.length > 1 ) {\n\n\t\t\t\tnode = new THREE.Group();\n\n\t\t\t} else if ( objects.length === 1 ) {\n\n\t\t\t\tnode = objects[ 0 ];\n\n\t\t\t} else {\n\n\t\t\t\tnode = new THREE.Object3D();\n\n\t\t\t}\n\n\t\t\tif ( node !== objects[ 0 ] ) {\n\n\t\t\t\tfor ( var i = 0, il = objects.length; i < il; i ++ ) {\n\n\t\t\t\t\tnode.add( objects[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( nodeDef.name !== undefined ) {\n\n\t\t\t\tnode.userData.name = nodeDef.name;\n\t\t\t\tnode.name = THREE.PropertyBinding.sanitizeNodeName( nodeDef.name );\n\n\t\t\t}\n\n\t\t\tassignExtrasToUserData( node, nodeDef );\n\n\t\t\tif ( nodeDef.extensions ) addUnknownExtensionsToUserData( extensions, node, nodeDef );\n\n\t\t\tif ( nodeDef.matrix !== undefined ) {\n\n\t\t\t\tvar matrix = new THREE.Matrix4();\n\t\t\t\tmatrix.fromArray( nodeDef.matrix );\n\t\t\t\tnode.applyMatrix( matrix );\n\n\t\t\t} else {\n\n\t\t\t\tif ( nodeDef.translation !== undefined ) {\n\n\t\t\t\t\tnode.position.fromArray( nodeDef.translation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( nodeDef.rotation !== undefined ) {\n\n\t\t\t\t\tnode.quaternion.fromArray( nodeDef.rotation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( nodeDef.scale !== undefined ) {\n\n\t\t\t\t\tnode.scale.fromArray( nodeDef.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn node;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#scenes\n\t * @param {number} sceneIndex\n\t * @return {Promise<THREE.Scene>}\n\t */\n\tGLTFParser.prototype.loadScene = function () {\n\n\t\t// scene node hierachy builder\n\n\t\tfunction buildNodeHierachy( nodeId, parentObject, json, parser ) {\n\n\t\t\tvar nodeDef = json.nodes[ nodeId ];\n\n\t\t\treturn parser.getDependency( 'node', nodeId ).then( function ( node ) {\n\n\t\t\t\tif ( nodeDef.skin === undefined ) return node;\n\n\t\t\t\t// build skeleton here as well\n\n\t\t\t\tvar skinEntry;\n\n\t\t\t\treturn parser.getDependency( 'skin', nodeDef.skin ).then( function ( skin ) {\n\n\t\t\t\t\tskinEntry = skin;\n\n\t\t\t\t\tvar pendingJoints = [];\n\n\t\t\t\t\tfor ( var i = 0, il = skinEntry.joints.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tpendingJoints.push( parser.getDependency( 'node', skinEntry.joints[ i ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Promise.all( pendingJoints );\n\n\t\t\t\t} ).then( function ( jointNodes ) {\n\n\t\t\t\t\tnode.traverse( function ( mesh ) {\n\n\t\t\t\t\t\tif ( ! mesh.isMesh ) return;\n\n\t\t\t\t\t\tvar bones = [];\n\t\t\t\t\t\tvar boneInverses = [];\n\n\t\t\t\t\t\tfor ( var j = 0, jl = jointNodes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar jointNode = jointNodes[ j ];\n\n\t\t\t\t\t\t\tif ( jointNode ) {\n\n\t\t\t\t\t\t\t\tbones.push( jointNode );\n\n\t\t\t\t\t\t\t\tvar mat = new THREE.Matrix4();\n\n\t\t\t\t\t\t\t\tif ( skinEntry.inverseBindMatrices !== undefined ) {\n\n\t\t\t\t\t\t\t\t\tmat.fromArray( skinEntry.inverseBindMatrices.array, j * 16 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tboneInverses.push( mat );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Joint \"%s\" could not be found.', skinEntry.joints[ j ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmesh.bind( new THREE.Skeleton( bones, boneInverses ), mesh.matrixWorld );\n\n\t\t\t\t\t} );\n\n\t\t\t\t\treturn node;\n\n\t\t\t\t} );\n\n\t\t\t} ).then( function ( node ) {\n\n\t\t\t\t// build node hierachy\n\n\t\t\t\tparentObject.add( node );\n\n\t\t\t\tvar pending = [];\n\n\t\t\t\tif ( nodeDef.children ) {\n\n\t\t\t\t\tvar children = nodeDef.children;\n\n\t\t\t\t\tfor ( var i = 0, il = children.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar child = children[ i ];\n\t\t\t\t\t\tpending.push( buildNodeHierachy( child, node, json, parser ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn Promise.all( pending );\n\n\t\t\t} );\n\n\t\t}\n\n\t\treturn function loadScene( sceneIndex ) {\n\n\t\t\tvar json = this.json;\n\t\t\tvar extensions = this.extensions;\n\t\t\tvar sceneDef = this.json.scenes[ sceneIndex ];\n\t\t\tvar parser = this;\n\n\t\t\tvar scene = new THREE.Scene();\n\t\t\tif ( sceneDef.name !== undefined ) scene.name = sceneDef.name;\n\n\t\t\tassignExtrasToUserData( scene, sceneDef );\n\n\t\t\tif ( sceneDef.extensions ) addUnknownExtensionsToUserData( extensions, scene, sceneDef );\n\n\t\t\tvar nodeIds = sceneDef.nodes || [];\n\n\t\t\tvar pending = [];\n\n\t\t\tfor ( var i = 0, il = nodeIds.length; i < il; i ++ ) {\n\n\t\t\t\tpending.push( buildNodeHierachy( nodeIds[ i ], scene, json, parser ) );\n\n\t\t\t}\n\n\t\t\treturn Promise.all( pending ).then( function () {\n\n\t\t\t\treturn scene;\n\n\t\t\t} );\n\n\t\t};\n\n\t}();\n\n\treturn GLTFLoader;\n\n} )();\n\n\nmodule.exports = _GLTFLoader;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}