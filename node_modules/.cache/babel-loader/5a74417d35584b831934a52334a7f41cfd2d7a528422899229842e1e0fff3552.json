{"ast":null,"code":"import _objectSpread from \"/Users/armenmerikyan/Desktop/wd/tfnlab.com/metagascarnext/stage-presets-gltfjsx/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/armenmerikyan/Desktop/wd/tfnlab.com/metagascarnext/stage-presets-gltfjsx/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"children\"],\n  _excluded2 = [\"children\"];\nimport { composeRefs as e } from \"@radix-ui/react-compose-refs\";\nimport * as t from \"react\";\nimport r from \"@babel/runtime/helpers/esm/extends\";\nexport var Slot = /*#__PURE__*/t.forwardRef(function (e, o) {\n  var a = e.children,\n    s = _objectWithoutProperties(e, _excluded);\n  return t.Children.toArray(a).some(l) ? /*#__PURE__*/t.createElement(t.Fragment, null, t.Children.map(a, function (e) {\n    return l(e) ? /*#__PURE__*/t.createElement(n, r({}, s, {\n      ref: o\n    }), e.props.children) : e;\n  })) : /*#__PURE__*/t.createElement(n, r({}, s, {\n    ref: o\n  }), a);\n});\nSlot.displayName = \"Slot\";\nvar n = /*#__PURE__*/t.forwardRef(function (r, n) {\n  var l = r.children,\n    a = _objectWithoutProperties(r, _excluded2); /*#__PURE__*/\n  return t.isValidElement(l) ? /*#__PURE__*/t.cloneElement(l, _objectSpread(_objectSpread({}, o(a, l.props)), {}, {\n    ref: e(n, l.ref)\n  })) : t.Children.count(l) > 1 ? t.Children.only(null) : null;\n});\nn.displayName = \"SlotClone\";\nexport var Slottable = function Slottable(_ref) {\n  var e = _ref.children;\n  return /*#__PURE__*/t.createElement(t.Fragment, null, e);\n};\nfunction l(e) {\n  /*#__PURE__*/return t.isValidElement(e) && e.type === Slottable;\n}\nfunction o(e, t) {\n  var r = _objectSpread({}, t);\n  var _loop = function _loop() {\n    var l = e[_n],\n      o = t[_n];\n    /^on[A-Z]/.test(_n) ? r[_n] = function () {\n      null == o || o.apply(void 0, arguments), null == l || l.apply(void 0, arguments);\n    } : \"style\" === _n ? r[_n] = _objectSpread(_objectSpread({}, l), o) : \"className\" === _n && (r[_n] = [l, o].filter(Boolean).join(\" \"));\n  };\n  for (var _n in t) {\n    _loop();\n  }\n  return _objectSpread(_objectSpread({}, e), r);\n}\nexport var Root = Slot;","map":{"version":3,"mappings":";;;;;;;OAWA,IAAMA,oBAAOC,EAAMC,WAAmC,UAACC,GAAOC;EAC5D,IAAQC,IAA2BF,EAA7BE;IAAeC,6BAAcH;EAEnC,OAAIF,EAAMM,SAASC,QAAQH,GAAUI,KAAKC,kBAEtCC,kCACGV,EAAMM,SAASK,IAAIP,GAAWQ;IAAAA,OACtBH,EAAYG,kBACjBF,gBAACG,GAADC,MAAeT,GAAf;MAA0BU,KAAKZ;IAAAA,IAC5BS,EAAMV,MAAME,YAGfQ;EAAAA,mBAQRF,gBAACG,GAADC,MAAeT,GAAf;IAA0BU,KAAKZ;EAAAA,IAC5BC;AAAAA;AAKPL,KAAKiB,cAAc;AAUnB,IAAMC,iBAAYjB,EAAMC,WAAgC,UAACC,GAAOC;EAC9D,IAAQC,IAA2BF,EAA7BE;IAAeC,6BAAcH;EAEnC,OAAIF,EAAMkB,eAAed,kBAChBJ,EAAMmB,aAAaf,mCACrBgB,EAAWf,GAAWD,EAASF;IAClCa,KAAKM,EAAYlB,GAAeC,EAAiBW;EAAAA,MAI9Cf,EAAMM,SAASgB,MAAMlB,KAAY,IAAIJ,EAAMM,SAASiB,KAAK,QAAQ;AAAA;AAG1EN,EAAUD,cAAc;AAAA,OAMxB,IAAMQ,YAAY,SAAZA;EAAAA,IAAepB;EAAAA,oBACZM,kCAAGN;AAAAA;AAOZ,SAASK,EAAYG;EAAAA,aACnB,OAAOZ,EAAMkB,eAAeN,MAAUA,EAAMa,SAASD;AAAAA;AAGvD,SAASJ,EAAWf,GAAqBqB;EAEvC,IAAMC,sBAAqBD;EAE3B,6BAAmC;IACjC,IAAME,IAAgBvB,EAAUwB;MAC1BC,IAAiBJ,EAAWG;IAEhB,WAAWE,KAAKF,MAGhCF,EAAcE,MAAY,YAAIG;MAC5BF,uCAAoBE,EACpBJ,uCAAmBI;IAAAA,IAID,YAAbH,KACPF,EAAcE,sCAAiBD,IAAkBE,KAC3B,gBAAbD,OACTF,EAAcE,MAAY,CAACD,GAAeE,GAAgBG,OAAOC,SAASC,KAAK;EAAA,CAInF;EApBA,KAAK,IAAMN,MAAYH;IAAAA;EAAAA;EAoBvB,uCAAYrB,IAAcsB;AAAAA;AAAAA,OAG5B,IAAMS,OAAOrC","names":["Slot","React","forwardRef","props","forwardedRef","children","slotProps","Children","toArray","some","isSlottable","_react","map","child","$d34e8c328cb3dd19ab7a2f6eafa6ad$var$SlotClone","_babelRuntimeHelpersEsmExtends","ref","displayName","SlotClone","isValidElement","cloneElement","mergeProps","composeRefs","count","only","Slottable","type","childProps","overrideProps","slotPropValue","propName","childPropValue","test","args","filter","Boolean","join","Root"],"sources":["/Users/armenmerikyan/Desktop/wd/tfnlab.com/metagascarnext/stage-presets-gltfjsx/node_modules/leva/node_modules/@radix-ui/react-tooltip/node_modules/@radix-ui/react-slot/dist/packages/react/slot/src/Slot.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeRefs } from '@radix-ui/react-compose-refs';\n\n/* -------------------------------------------------------------------------------------------------\n * Slot\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SlotProps extends React.HTMLAttributes<HTMLElement> {\n  children?: React.ReactNode;\n}\n\nconst Slot = React.forwardRef<HTMLElement, SlotProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n\n  if (React.Children.toArray(children).some(isSlottable)) {\n    return (\n      <>\n        {React.Children.map(children, (child) => {\n          return isSlottable(child) ? (\n            <SlotClone {...slotProps} ref={forwardedRef}>\n              {child.props.children}\n            </SlotClone>\n          ) : (\n            child\n          );\n        })}\n      </>\n    );\n  }\n\n  return (\n    <SlotClone {...slotProps} ref={forwardedRef}>\n      {children}\n    </SlotClone>\n  );\n});\n\nSlot.displayName = 'Slot';\n\n/* -------------------------------------------------------------------------------------------------\n * SlotClone\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SlotCloneProps {\n  children: React.ReactNode;\n}\n\nconst SlotClone = React.forwardRef<any, SlotCloneProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n\n  if (React.isValidElement(children)) {\n    return React.cloneElement(children, {\n      ...mergeProps(slotProps, children.props),\n      ref: composeRefs(forwardedRef, (children as any).ref),\n    });\n  }\n\n  return React.Children.count(children) > 1 ? React.Children.only(null) : null;\n});\n\nSlotClone.displayName = 'SlotClone';\n\n/* -------------------------------------------------------------------------------------------------\n * Slottable\n * -----------------------------------------------------------------------------------------------*/\n\nconst Slottable = ({ children }: { children: React.ReactNode }) => {\n  return <>{children}</>;\n};\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype AnyProps = Record<string, any>;\n\nfunction isSlottable(child: React.ReactNode): child is React.ReactElement {\n  return React.isValidElement(child) && child.type === Slottable;\n}\n\nfunction mergeProps(slotProps: AnyProps, childProps: AnyProps) {\n  // all child props should override\n  const overrideProps = { ...childProps };\n\n  for (const propName in childProps) {\n    const slotPropValue = slotProps[propName];\n    const childPropValue = childProps[propName];\n\n    const isHandler = /^on[A-Z]/.test(propName);\n    // if it's a handler, modify the override by composing the base handler\n    if (isHandler) {\n      overrideProps[propName] = (...args: unknown[]) => {\n        childPropValue?.(...args);\n        slotPropValue?.(...args);\n      };\n    }\n    // if it's `style`, we merge them\n    else if (propName === 'style') {\n      overrideProps[propName] = { ...slotPropValue, ...childPropValue };\n    } else if (propName === 'className') {\n      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(' ');\n    }\n  }\n\n  return { ...slotProps, ...overrideProps };\n}\n\nconst Root = Slot;\n\nexport {\n  Slot,\n  Slottable,\n  //\n  Root,\n};\nexport type { SlotProps };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}