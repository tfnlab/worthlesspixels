{"ast":null,"code":"import _slicedToArray from \"/Users/armenmerikyan/Desktop/wd/tfnlab.com/metagascarnext/stage-presets-gltfjsx/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/armenmerikyan/Desktop/wd/tfnlab.com/metagascarnext/stage-presets-gltfjsx/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/armenmerikyan/Desktop/wd/tfnlab.com/metagascarnext/stage-presets-gltfjsx/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/armenmerikyan/Desktop/wd/tfnlab.com/metagascarnext/stage-presets-gltfjsx/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/armenmerikyan/Desktop/wd/tfnlab.com/metagascarnext/stage-presets-gltfjsx/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createForOfIteratorHelper from \"/Users/armenmerikyan/Desktop/wd/tfnlab.com/metagascarnext/stage-presets-gltfjsx/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport * as React from \"react\";\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return a;\n};\nvar __spreadProps = function __spreadProps(a, b) {\n  return __defProps(a, __getOwnPropDescs(b));\n};\nfunction traverseFiber(fiber, ascending, selector) {\n  if (!fiber) return;\n  if (selector(fiber) === true) return fiber;\n  var child = ascending ? fiber.return : fiber.child;\n  while (child) {\n    var match = traverseFiber(child, ascending, selector);\n    if (match) return match;\n    child = ascending ? null : child.sibling;\n  }\n}\nfunction wrapContext(context) {\n  try {\n    return Object.defineProperties(context, {\n      _currentRenderer: {\n        get: function get() {\n          return null;\n        },\n        set: function set() {}\n      },\n      _currentRenderer2: {\n        get: function get() {\n          return null;\n        },\n        set: function set() {}\n      }\n    });\n  } catch (_) {\n    return context;\n  }\n}\nvar FiberContext = wrapContext(React.createContext(null));\nvar FiberProvider = /*#__PURE__*/function (_React$Component) {\n  _inherits(FiberProvider, _React$Component);\n  var _super = _createSuper(FiberProvider);\n  function FiberProvider() {\n    _classCallCheck(this, FiberProvider);\n    return _super.apply(this, arguments);\n  }\n  _createClass(FiberProvider, [{\n    key: \"render\",\n    value: function render() {\n      return /* @__PURE__ */React.createElement(FiberContext.Provider, {\n        value: this._reactInternals\n      }, this.props.children);\n    }\n  }]);\n  return FiberProvider;\n}(React.Component);\nvar _React$__SECRET_INTER = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,\n  ReactCurrentOwner = _React$__SECRET_INTER.ReactCurrentOwner,\n  ReactCurrentDispatcher = _React$__SECRET_INTER.ReactCurrentDispatcher;\nfunction useFiber() {\n  var root = React.useContext(FiberContext);\n  if (!root) throw new Error(\"its-fine: useFiber must be called within a <FiberProvider />!\");\n  var id = React.useId();\n  var fiber = React.useMemo(function () {\n    var _a;\n    return (_a = ReactCurrentOwner.current) != null ? _a : traverseFiber(root, false, function (node) {\n      var state = node.memoizedState;\n      while (state) {\n        if (state.memoizedState === id) return true;\n        state = state.next;\n      }\n    });\n  }, [root, id]);\n  return fiber;\n}\nfunction useContainer() {\n  var fiber = useFiber();\n  var root = React.useMemo(function () {\n    return traverseFiber(fiber, true, function (node) {\n      var _a;\n      return ((_a = node.stateNode) == null ? void 0 : _a.containerInfo) != null;\n    });\n  }, [fiber]);\n  return root == null ? void 0 : root.stateNode.containerInfo;\n}\nfunction useNearestChild(type) {\n  var fiber = useFiber();\n  var childRef = React.useRef();\n  React.useLayoutEffect(function () {\n    var _a;\n    childRef.current = (_a = traverseFiber(fiber, false, function (node) {\n      return typeof node.type === \"string\" && (type === void 0 || node.type === type);\n    })) == null ? void 0 : _a.stateNode;\n  }, [fiber]);\n  return childRef;\n}\nfunction useNearestParent(type) {\n  var fiber = useFiber();\n  var parentRef = React.useRef();\n  React.useLayoutEffect(function () {\n    var _a;\n    parentRef.current = (_a = traverseFiber(fiber, true, function (node) {\n      return typeof node.type === \"string\" && (type === void 0 || node.type === type);\n    })) == null ? void 0 : _a.stateNode;\n  }, [fiber]);\n  return parentRef;\n}\nfunction useContextBridge() {\n  var _a, _b;\n  var fiber = useFiber();\n  var _React$useState = React.useState(function () {\n      return /* @__PURE__ */new Map();\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    contexts = _React$useState2[0];\n  contexts.clear();\n  var node = fiber;\n  while (node) {\n    var context = (_a = node.type) == null ? void 0 : _a._context;\n    if (context && context !== FiberContext && !contexts.has(context)) {\n      contexts.set(context, (_b = ReactCurrentDispatcher.current) == null ? void 0 : _b.readContext(wrapContext(context)));\n    }\n    node = node.return;\n  }\n  return React.useMemo(function () {\n    return Array.from(contexts.keys()).reduce(function (Prev, context) {\n      return function (props) {\n        return /* @__PURE__ */React.createElement(Prev, null, /* @__PURE__ */React.createElement(context.Provider, __spreadProps(__spreadValues({}, props), {\n          value: contexts.get(context)\n        })));\n      };\n    }, function (props) {\n      return /* @__PURE__ */React.createElement(FiberProvider, __spreadValues({}, props));\n    });\n  }, [contexts]);\n}\nexport { FiberProvider, traverseFiber, useContainer, useContextBridge, useFiber, useNearestChild, useNearestParent };","map":{"version":3,"mappings":"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","names":["fiber","ascending","selector","child","return","match","traverseFiber","sibling","wrapContext","context","defineProperties","_currentRenderer","get","set","_currentRenderer2","_","FiberContext","React","createContext","FiberProvider","Provider","value","_reactInternals","props","children","Component","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","ReactCurrentDispatcher","useFiber","useContext","root","Error","useId","useMemo","current","_a","node","state","memoizedState","id","next","useContainer","containerInfo","stateNode","useNearestChild","type","useRef","useLayoutEffect","childRef","useNearestParent","parentRef","useContextBridge","useState","Map","contexts","clear","has","_b","readContext","Array","from","keys","reduce","Prev","__spreadProps"],"sources":["/Users/armenmerikyan/Desktop/wd/tfnlab.com/metagascarnext/stage-presets-gltfjsx/node_modules/its-fine/src/index.tsx"],"sourcesContent":["import * as React from 'react'\nimport type ReactReconciler from 'react-reconciler'\n\n/**\n * Represents a react-internal Fiber node.\n */\nexport type Fiber<T = any> = Omit<ReactReconciler.Fiber, 'stateNode'> & { stateNode: T }\n\n/**\n * Represents a {@link Fiber} node selector for traversal.\n */\nexport type FiberSelector<T = any> = (\n  /** The current {@link Fiber} node. */\n  node: Fiber<T | null>,\n) => boolean | void\n\n/**\n * Traverses up or down a {@link Fiber}, return `true` to stop and select a node.\n */\nexport function traverseFiber<T = any>(\n  /** Input {@link Fiber} to traverse. */\n  fiber: Fiber | undefined,\n  /** Whether to ascend and walk up the tree. Will walk down if `false`. */\n  ascending: boolean,\n  /** A {@link Fiber} node selector, returns the first match when `true` is passed. */\n  selector: FiberSelector<T>,\n): Fiber<T> | undefined {\n  if (!fiber) return\n  if (selector(fiber) === true) return fiber\n\n  let child = ascending ? fiber.return : fiber.child\n  while (child) {\n    const match = traverseFiber(child, ascending, selector)\n    if (match) return match\n\n    child = ascending ? null : child.sibling\n  }\n}\n\n// In development, React will warn about using contexts between renderers.\n// Hide the warning because its-fine fixes this issue\n// https://github.com/facebook/react/pull/12779\nfunction wrapContext<T>(context: React.Context<T>): React.Context<T> {\n  try {\n    return Object.defineProperties(context, {\n      _currentRenderer: {\n        get() {\n          return null\n        },\n        set() {},\n      },\n      _currentRenderer2: {\n        get() {\n          return null\n        },\n        set() {},\n      },\n    })\n  } catch (_) {\n    return context\n  }\n}\n\nconst FiberContext = wrapContext(React.createContext<Fiber>(null!))\n\n/**\n * A react-internal {@link Fiber} provider. This component binds React children to the React Fiber tree. Call its-fine hooks within this.\n */\nexport class FiberProvider extends React.Component<{ children?: React.ReactNode }> {\n  private _reactInternals!: Fiber\n\n  render() {\n    return <FiberContext.Provider value={this._reactInternals}>{this.props.children}</FiberContext.Provider>\n  }\n}\n\ninterface ReactInternal {\n  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {\n    ReactCurrentOwner: React.RefObject<Fiber>\n    ReactCurrentDispatcher: React.RefObject<{ readContext<T>(context: React.Context<T>): T }>\n  }\n}\n\nconst { ReactCurrentOwner, ReactCurrentDispatcher } = (React as unknown as ReactInternal)\n  .__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\n\n/**\n * Returns the current react-internal {@link Fiber}. This is an implementation detail of [react-reconciler](https://github.com/facebook/react/tree/main/packages/react-reconciler).\n */\nexport function useFiber(): Fiber<null> | undefined {\n  const root = React.useContext(FiberContext)\n  if (!root) throw new Error('its-fine: useFiber must be called within a <FiberProvider />!')\n\n  // In development mode, React will expose the current component's Fiber as ReactCurrentOwner.\n  // In production, we don't have this luxury and must traverse from FiberProvider via useId\n  const id = React.useId()\n  const fiber = React.useMemo(\n    () =>\n      ReactCurrentOwner.current ??\n      traverseFiber<null>(root, false, (node) => {\n        let state = node.memoizedState\n        while (state) {\n          if (state.memoizedState === id) return true\n          state = state.next\n        }\n      }),\n    [root, id],\n  )\n\n  return fiber\n}\n\n/**\n * Represents a react-reconciler container instance.\n */\nexport interface ContainerInstance<T = any> {\n  containerInfo: T\n}\n\n/**\n * Returns the current react-reconciler container info passed to {@link ReactReconciler.Reconciler.createContainer}.\n *\n * In react-dom, a container will point to the root DOM element; in react-three-fiber, it will point to the root Zustand store.\n */\nexport function useContainer<T = any>(): T | undefined {\n  const fiber = useFiber()\n  const root = React.useMemo(\n    () => traverseFiber<ContainerInstance<T>>(fiber, true, (node) => node.stateNode?.containerInfo != null),\n    [fiber],\n  )\n\n  return root?.stateNode.containerInfo\n}\n\n/**\n * Returns the nearest react-reconciler child instance or the node created from {@link ReactReconciler.HostConfig.createInstance}.\n *\n * In react-dom, this would be a DOM element; in react-three-fiber this would be an instance descriptor.\n */\nexport function useNearestChild<T = any>(\n  /** An optional element type to filter to. */\n  type?: keyof JSX.IntrinsicElements,\n): React.MutableRefObject<T | undefined> {\n  const fiber = useFiber()\n  const childRef = React.useRef<T>()\n\n  React.useLayoutEffect(() => {\n    childRef.current = traverseFiber<T>(\n      fiber,\n      false,\n      (node) => typeof node.type === 'string' && (type === undefined || node.type === type),\n    )?.stateNode\n  }, [fiber])\n\n  return childRef\n}\n\n/**\n * Returns the nearest react-reconciler parent instance or the node created from {@link ReactReconciler.HostConfig.createInstance}.\n *\n * In react-dom, this would be a DOM element; in react-three-fiber this would be an instance descriptor.\n */\nexport function useNearestParent<T = any>(\n  /** An optional element type to filter to. */\n  type?: keyof JSX.IntrinsicElements,\n): React.MutableRefObject<T | undefined> {\n  const fiber = useFiber()\n  const parentRef = React.useRef<T>()\n\n  React.useLayoutEffect(() => {\n    parentRef.current = traverseFiber<T>(\n      fiber,\n      true,\n      (node) => typeof node.type === 'string' && (type === undefined || node.type === type),\n    )?.stateNode\n  }, [fiber])\n\n  return parentRef\n}\n\n/**\n * Represents a react-context bridge provider component.\n */\nexport type ContextBridge = React.FC<React.PropsWithChildren<{}>>\n\n/**\n * React Context currently cannot be shared across [React renderers](https://reactjs.org/docs/codebase-overview.html#renderers) but explicitly forwarded between providers (see [react#17275](https://github.com/facebook/react/issues/17275)). This hook returns a {@link ContextBridge} of live context providers to pierce Context across renderers.\n *\n * Pass {@link ContextBridge} as a component to a secondary renderer to enable context-sharing within its children.\n */\nexport function useContextBridge(): ContextBridge {\n  const fiber = useFiber()\n  const [contexts] = React.useState(() => new Map<React.Context<any>, any>())\n\n  // Collect live context\n  contexts.clear()\n  let node = fiber\n  while (node) {\n    const context = node.type?._context\n    if (context && context !== FiberContext && !contexts.has(context)) {\n      contexts.set(context, ReactCurrentDispatcher.current?.readContext(wrapContext(context)))\n    }\n    node = node.return!\n  }\n\n  // Flatten context and their memoized values into a `ContextBridge` provider\n  return React.useMemo(\n    () =>\n      Array.from(contexts.keys()).reduce(\n        (Prev, context) => (props) =>\n          (\n            <Prev>\n              <context.Provider {...props} value={contexts.get(context)} />\n            </Prev>\n          ),\n        (props) => <FiberProvider {...props} />,\n      ),\n    [contexts],\n  )\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}