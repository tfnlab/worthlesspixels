{"ast":null,"code":"import _slicedToArray from \"/Users/armenmerikyan/Desktop/wd/tfnlab.com/metagascarnext/stage-presets-gltfjsx/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useCallbackRef as e } from \"@radix-ui/react-use-callback-ref\";\nimport * as t from \"react\";\nexport function useControllableState(_ref) {\n  var o = _ref.prop,\n    r = _ref.defaultProp,\n    _ref$onChange = _ref.onChange,\n    n = _ref$onChange === void 0 ? function () {} : _ref$onChange;\n  var _ref2 = function (_ref4) {\n      var o = _ref4.defaultProp,\n        r = _ref4.onChange;\n      var n = t.useState(o),\n        _n = _slicedToArray(n, 1),\n        a = _n[0],\n        u = t.useRef(a),\n        c = e(r);\n      return t.useEffect(function () {\n        u.current !== a && (c(a), u.current = a);\n      }, [a, u, c]), n;\n    }({\n      defaultProp: r,\n      onChange: n\n    }),\n    _ref3 = _slicedToArray(_ref2, 2),\n    a = _ref3[0],\n    u = _ref3[1],\n    c = void 0 !== o,\n    f = c ? o : a,\n    l = e(n);\n  return [f, t.useCallback(function (e) {\n    if (c) {\n      var _t = e,\n        _r = \"function\" == typeof e ? _t(o) : e;\n      _r !== o && l(_r);\n    } else u(e);\n  }, [c, o, u, l])];\n}","map":{"version":3,"mappings":";;;OAWA,SAASA,2BAGI;EAAA,IAFXC,SAD+BA;IAE/BC,SAF+BA;IAAAA;IAG/BC,+BAAW;EAEX,YAqBF,iBAEEA;MAAAA,IADAD,UAD+BA;QAE/BC,UAF+BA;MAIzBC,QAAoBC,EAAMC,SAAwBJ;QAAAA,oBACxCE;QAATG;QACDC,IAAeH,EAAMI,OAAOF;QAC5BG,IAAeC,EAAeR;MASpC,OAPAE,EAAMO,UAAU;QACVJ,EAAaK,YAAYN,MAC3BG,EAAaH,IACbC,EAAaK,UAAUN;MAAAA,GAExB,CAACA,GAAOC,GAAcE,KAElBN;IAAAA,CArCyCU,CAAqB;MAAEZ;MAAaC;IAAAA;IAAAA;IAA7EY;IAAkBC;IACnBC,SAAwBC,MAATjB;IACfM,IAAQU,IAAehB,IAAOc;IAC9BL,IAAeC,EAAeR;EAepC,OAAO,CAACI,GAb8DF,EAAMc,YACzEC;IACC,IAAIH,GAAc;MAChB,IAAMI,KAASD;QACTb,KAA6B,qBAAda,IAA2BC,GAAOpB,KAAQmB;MAC3Db,OAAUN,KAAMS,EAAaH;IAAAA,OAEjCS,EAAoBI;EAAAA,GAGxB,CAACH,GAAchB,GAAMe,GAAqBN;AAAAA","names":["useControllableState","prop","defaultProp","onChange","uncontrolledState","React","useState","value","prevValueRef","useRef","handleChange","useCallbackRef","useEffect","current","useUncontrolledState","uncontrolledProp","setUncontrolledProp","isControlled","undefined","useCallback","nextValue","setter"],"sources":["/Users/armenmerikyan/Desktop/wd/tfnlab.com/metagascarnext/stage-presets-gltfjsx/node_modules/leva/node_modules/@radix-ui/react-tooltip/node_modules/@radix-ui/react-use-controllable-state/dist/packages/react/use-controllable-state/src/useControllableState.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\n\ntype UseControllableStateParams<T> = {\n  prop?: T | undefined;\n  defaultProp?: T | undefined;\n  onChange?: (state: T) => void;\n};\n\ntype SetStateFn<T> = (prevState?: T) => T;\n\nfunction useControllableState<T>({\n  prop,\n  defaultProp,\n  onChange = () => {},\n}: UseControllableStateParams<T>) {\n  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({ defaultProp, onChange });\n  const isControlled = prop !== undefined;\n  const value = isControlled ? prop : uncontrolledProp;\n  const handleChange = useCallbackRef(onChange);\n\n  const setValue: React.Dispatch<React.SetStateAction<T | undefined>> = React.useCallback(\n    (nextValue) => {\n      if (isControlled) {\n        const setter = nextValue as SetStateFn<T>;\n        const value = typeof nextValue === 'function' ? setter(prop) : nextValue;\n        if (value !== prop) handleChange(value as T);\n      } else {\n        setUncontrolledProp(nextValue);\n      }\n    },\n    [isControlled, prop, setUncontrolledProp, handleChange]\n  );\n\n  return [value, setValue] as const;\n}\n\nfunction useUncontrolledState<T>({\n  defaultProp,\n  onChange,\n}: Omit<UseControllableStateParams<T>, 'prop'>) {\n  const uncontrolledState = React.useState<T | undefined>(defaultProp);\n  const [value] = uncontrolledState;\n  const prevValueRef = React.useRef(value);\n  const handleChange = useCallbackRef(onChange);\n\n  React.useEffect(() => {\n    if (prevValueRef.current !== value) {\n      handleChange(value as T);\n      prevValueRef.current = value;\n    }\n  }, [value, prevValueRef, handleChange]);\n\n  return uncontrolledState;\n}\n\nexport { useControllableState };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}